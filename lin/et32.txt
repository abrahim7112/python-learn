
بايثون جرب إلا
مستوى الصعوبة: أساسي
آخر تحديث: ٢٨ يناير ٢٠٢٢
يمكن أن يكون الخطأ في Python من نوعين ، أي أخطاء نحوية واستثناءات. الأخطاء هي المشاكل في البرنامج بسبب البرنامج الذي سيوقف التنفيذ. من ناحية أخرى ، تظهر الاستثناءات عند حدوث بعض الأحداث الداخلية التي تغير التدفق الطبيعي للبرنامج.
ملاحظة: لمزيد من المعلومات ، راجع الأخطاء والاستثناءات في Python ،
ومن بعض أخطاء الاستثناء الشائعة: 
 

IOError: إذا كان الملف لا يمكن فتحه
KeyboardInterrupt (مقاطعة لوحة المفاتيح): عندما يضغط المستخدم على مفتاح غير مطلوب
ValueError: عندما تتلقى دالة مضمنة وسيطة خاطئة
خطأ EOF: إذا تم الوصول إلى End-Of-File بدون قراءة أي بيانات
ImportError: إذا كان غير قادر على العثور على الوحدة النمطية
 

جرب ما عدا لغة بايثون
تُستخدم عبارة try and except لمعالجة هذه الأخطاء داخل الكود الخاص بنا في Python. يتم استخدام كتلة try للتحقق من بعض التعليمات البرمجية بحثًا عن أخطاء ، أي سيتم تنفيذ الكود الموجود داخل كتلة try في حالة عدم وجود خطأ في البرنامج. بينما سيتم تنفيذ الكود الموجود داخل كتلة الاستثناء عندما يواجه البرنامج بعض الأخطاء في كتلة try السابقة.
 

بناء الجملة: 

يحاول:
    # بعض التعليمات البرمجية
إلا:
    # إذا تم تنفيذ الخطأ في ملف
    # حاول بلوك
كيف تعمل try ()؟ 
 

أولاً ، يتم تنفيذ جملة try ، أي الكود بين جملة try و except .
إذا لم يكن هناك استثناء ، فسيتم تشغيل جملة try فقط ، باستثناء انتهاء الجملة.
في حالة حدوث أي استثناء ، سيتم تخطي عبارة try وسيتم تشغيل عبارة " عدا ".
في حالة حدوث أي استثناء ، ولكن بند "" "" "" "" "" "" "" "" "" "" "" "" "" " . إذا تم ترك الاستثناء دون معالجة ، فسيتوقف التنفيذ.
يمكن أن تحتوي جملة try على أكثر من جملة ما عدا
الكود 1: لا يوجد استثناء ، لذلك سيتم تشغيل جملة  try .
 


# Python code to illustrate
# working of try()
def divide(x, y):
    try:
        # Floor Division : Gives only Fractional Part as Answer
        result = x // y
        print("Yeah ! Your answer is :", result)
    except ZeroDivisionError:
        print("Sorry ! You are dividing by zero ")
 
# Look at parameters and note the working of Program
divide(3, 2)
انتاج : 
 

("نعم! إجابتك هي:" ، 1)
الكود 1: هناك استثناء لذلك سيتم تشغيل  ما عدا عبارة فقط.
 


# Python code to illustrate
# working of try()
def divide(x, y):
    try:
        # Floor Division : Gives only Fractional Part as Answer
        result = x // y
        print("Yeah ! Your answer is :", result)
    except ZeroDivisionError:
        print("Sorry ! You are dividing by zero ")
 
# Look at parameters and note the working of Program
divide(3, 0)
انتاج : 
 

آسف ! أنت تقسم على صفر
 

شرط آخر
في بايثون ، يمكنك أيضًا استخدام جملة else في كتلة try-except التي يجب أن تكون موجودة بعد كل فقرات ما عدا. يقوم الكود بإدخال كتلة else فقط إذا كانت جملة try لا تثير استثناءً.
 

بناء الجملة:

يحاول:
    # بعض التعليمات البرمجية
إلا:
    # إذا تم تنفيذ الخطأ في ملف
    # حاول بلوك
آخر:
    # تنفيذ إذا لم يكن هناك استثناء
رمز:


# Program to depict else clause with try-except
  
# Function which returns a/b
def AbyB(a , b):
    try:
        c = ((a+b) // (a-b))
    except ZeroDivisionError:
        print ("a/b result in 0")
    else:
        print (c)
  
# Driver program to test above function
AbyB(2.0, 3.0)
AbyB(3.0, 3.0)
انتاج:

-5.0
نتيجة أ / ب في 0
 

أخيرًا الكلمة الرئيسية في بايثون
توفر Python كلمة أساسية أخيرًا ، والتي يتم تنفيذها دائمًا بعد المحاولة واستثناء الكتل. يتم تنفيذ الكتلة النهائية دائمًا بعد الإنهاء العادي لكتلة المحاولة أو بعد إنهاء كتلة المحاولة بسبب بعض الاستثناءات.
 

بناء الجملة:

يحاول:
    # بعض التعليمات البرمجية
إلا:
    # إذا تم تنفيذ الخطأ في ملف
    # حاول بلوك
آخر:
    # تنفيذ إذا لم يكن هناك استثناء
أخيرا:
    # بعض الكود ..... (يتم تنفيذها دائمًا)
رمز:


# Python program to demonstrate finally
    
# No exception Exception raised in try block
try:
    k = 5//0 # raises divide by zero exception.
    print(k)
    
# handles zerodivision exception    
except ZeroDivisionError:   
    print("Can't divide by zero")
        
finally:
    # this block is always executed 
    # regardless of exception generation.
    print('This is always executed') 
انتاج:

لا يمكن القسمة على الصفر
يتم تنفيذ هذا دائما
مقالات ذات صلة: 
 

أسئلة الإخراج
معالجة الاستثناءات في بايثون
الاستثناءات التي يحددها المستخدم
هذا المقال من مساهمة Mohit Gupta_OMG😀 . إذا كنت تحب GeeksforGeeks وترغب في المساهمة ، فيمكنك أيضًا كتابة مقال باستخدام write.geeksforgeeks.org أو إرسال مقالتك بالبريد إلى review-team@geeksforgeeks.org. شاهد مقالتك تظهر على صفحة GeeksforGeeks الرئيسية وساعد المهوسين الآخرين.
يرجى كتابة التعليقات إذا وجدت أي شيء غير صحيح ، أو إذا كنت ترغب في مشاركة المزيد من المعلومات حول الموضوع الذي تمت مناقشته أعلاه.
