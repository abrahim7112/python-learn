
خطأ NZEC في Python
مستوى الصعوبة: متوسط
آخر تحديث: 19 أكتوبر 2021
أثناء الترميز في مواقع تنافسية مختلفة ، يجب أن يكون العديد من الأشخاص قد واجهوا أخطاء NZEC. NZEC (رمز الخروج غير الصفري) كما يوحي الاسم يحدث عندما يفشل الرمز الخاص بك في إرجاع 0. عندما يعيد الرمز 0 ، فهذا يعني أنه تم تنفيذه بنجاح وإلا فإنه سيعيد بعض الأرقام الأخرى اعتمادًا على نوع الخطأ.
عندما ينتهي البرنامج ويفترض أن يُرجع "0" للإشارة إلى ما إذا كان قد تم الانتهاء من الغرامة ولم يكن قادرًا على القيام بذلك ، فإنه يتسبب في حدوث NZEC. بالطبع ، هناك المزيد من الحالات المرتبطة بـ NZEC.

لماذا تحدث NZEC؟ (مثال واحد)

في بيثون ، بشكل عام ، يتم فصل المدخلات المتعددة بفاصلات ونقرأها باستخدام الإدخال () أو int (الإدخال ()) ، ولكن معظم منصات الترميز عبر الإنترنت أثناء الاختبار تعطي مدخلات مفصولة بمسافة وفي تلك الحالات ، int (المدخلات ( )) غير قادر على قراءة المدخلات بشكل صحيح ويظهر خطأ مثل NZEC.

كيف تحل؟

على سبيل المثال ، فكر في برنامج بسيط حيث يتعين عليك قراءة عددين صحيحين وطباعتهما (في ملف الإدخال يكون كلا العددين صحيحين في نفس السطر). افترض أن لديك عددين صحيحين كما هو موضح أدناه:
23 45
بدلاً من استخدام:

ن = int (المدخلات ())
ك = int (المدخلات ())
يستخدم:

n ، k = raw_input (). split ("")
ن = كثافة العمليات (ن)
ك = كثافة العمليات (ك)
لتحديد المدخلات بمسافات بيضاء.

رمز خاطئ


n = int(input())
k = int(input())
print n," ",k
الإدخال:
2 3
عند تشغيل الكود أعلاه في IDE بالإدخال أعلاه ، ستحصل على خطأ: -

Traceback (آخر مكالمة أخيرة):
  ملف "b712edd81d4a972de2a9189fac8a83ed.py" ، السطر 1 ، في
    ن = int (المدخلات ())
  ملف "" ، السطر 1
    2 3
      ^
خطأ نحوي: خطأ EOF غير متوقع أثناء التحليل
سيعمل الكود أعلاه بشكل جيد عندما يكون الإدخال في سطرين مختلفين. يمكنك اختبار نفسك. للتغلب على هذه المشكلة تحتاج إلى استخدام التقسيم.

الكود الصحيح


n, k = raw_input().split(" ")
n = int(n)
k = int(k)
print n," ",k
مدخل:

7 3
انتاج:

7 3
بعض الأسباب البارزة لخطأ NZEC

العودية اللانهائية أو إذا نفدت ذاكرة المكدس.
الإدخال والإخراج لا يتطابقان تمامًا مع حالات الاختبار.
كنظام أساسي عبر الإنترنت ، اختبر برنامجك باستخدام رمز كمبيوتر يطابق مخرجاتك مع المخرجات المحددة تمامًا.
يظهر هذا النوع من الأخطاء أيضًا عندما يقوم برنامجك بتنفيذ أخطاء برمجية أساسية مثل القسمة على 0.
تحقق من قيم المتغيرات الخاصة بك ، فقد تكون عرضة لتدفق الأعداد الصحيحة.
قد تكون هناك بعض الأسباب الأخرى أيضًا لحدوث خطأ NZEC ، لقد قمت بإدراج الأسباب المتكررة.

ساهم اكاش تيواري في كتابة هذا المقال . إذا كنت تحب GeeksforGeeks وترغب في المساهمة ، فيمكنك أيضًا كتابة مقال باستخدام write.geeksforgeeks.org أو إرسال مقالتك بالبريد إلى review-team@geeksforgeeks.org. شاهد مقالتك تظهر على صفحة GeeksforGeeks الرئيسية وساعد المهوسين الآخرين.

يرجى كتابة التعليقات إذا وجدت أي شيء غير صحيح ، أو إذا كنت ترغب في مشاركة المزيد من المعلومات حول الموضوع الذي تمت مناقشته أعلاه.


<<<<<<<<<<<<<<<<<<<<<<<
معالجة الملفات في بايثون
مستوى الصعوبة: سهل
آخر تحديث: ٢٤ ديسمبر ٢٠٢١
يدعم Python أيضًا معالجة الملفات ويسمح للمستخدمين بمعالجة الملفات ، أي قراءة الملفات وكتابتها ، جنبًا إلى جنب مع العديد من خيارات معالجة الملفات الأخرى ، للعمل على الملفات. امتد مفهوم معالجة الملفات ليشمل العديد من اللغات الأخرى ، ولكن التنفيذ إما معقد أو طويل ، ولكن مثل المفاهيم الأخرى لبايثون ، فإن هذا المفهوم هنا سهل وقصير أيضًا. تعامل Python الملف بشكل مختلف كنص أو ثنائي وهذا مهم. يتضمن كل سطر من التعليمات البرمجية سلسلة من الأحرف وتشكل ملفًا نصيًا. يتم إنهاء كل سطر من الملف بحرف خاص ، يسمى EOL أو أحرف نهاية السطر مثل الفاصلة {،} أو حرف السطر الجديد. ينهي السطر الحالي ويخبر المترجم الشفهي ببدء سطر جديد. لنبدأ بملفات القراءة والكتابة. 
 

عمل دالة open ()
قبل إجراء أي عملية على الملف مثل القراءة أو الكتابة ، يتعين علينا أولاً فتح هذا الملف. لهذا ، يجب علينا استخدام دالة بايثون الداخلية open ()

لكن في وقت الفتح ، يتعين علينا تحديد الوضع الذي يمثل الغرض من فتح الملف.

f = فتح (اسم الملف ، الوضع)
حيث يتم دعم الوضع التالي:

r: فتح ملف موجود لعملية قراءة.
w: فتح ملف موجود لعملية كتابة. إذا كان الملف يحتوي بالفعل على بعض البيانات ، فسيتم تجاوزه.
أ:   فتح ملف موجود لعملية الإلحاق. لن يتجاوز البيانات الموجودة.
 r +:  لقراءة البيانات وكتابتها في الملف. لن يتم حذف البيانات السابقة في الملف.
w +: لكتابة وقراءة البيانات. سوف يتجاوز البيانات الموجودة.
a +: لإلحاق وقراءة البيانات من الملف. لن يتجاوز البيانات الموجودة.
ألق نظرة على المثال أدناه:

# a file named "geek", will be opened with the reading mode.
file = open('geek.txt', 'r')
# This will print every line one by one in the file
for each in file:
    print (each)
سيفتح الأمر open الملف في وضع القراءة وستقوم حلقة for بطباعة كل سطر موجود في الملف. 
 

العمل من وضع القراءة ()
هناك أكثر من طريقة لقراءة ملف في بايثون. إذا كنت بحاجة إلى استخراج سلسلة تحتوي على جميع الأحرف في الملف ، فيمكننا استخدام file.read () . سيعمل الكود الكامل على النحو التالي: 

# Python code to illustrate read() mode
file = open("file.txt", "r")
print (file.read())
هناك طريقة أخرى لقراءة ملف وهي استدعاء عدد معين من الأحرف كما في الكود التالي ، سيقرأ المترجم الأحرف الخمسة الأولى من البيانات المخزنة ويعيدها كسلسلة: 

# Python code to illustrate read() mode character wise
file = open("file.txt", "r")
print (file.read(5))
إنشاء ملف باستخدام وضع الكتابة ()
دعونا نرى كيفية إنشاء ملف وكيف يعمل وضع الكتابة: 
لمعالجة الملف ، اكتب ما يلي في بيئة بايثون الخاصة بك: 

# Python code to create a file
file = open('geek.txt','w')
file.write("This is the write command")
file.write("It allows us to write in a particular file")
file.close()
يقوم الأمر close () بإنهاء جميع الموارد المستخدمة وتحرير نظام هذا البرنامج المعين. 
 

العمل على وضع الإلحاق ()
دعونا نرى كيف يعمل وضع الإلحاق: 

# Python code to illustrate append() mode
file = open('geek.txt','a')
file.write("This will add this line")
file.close()
هناك أيضًا العديد من الأوامر الأخرى في معالجة الملفات والتي تُستخدم للتعامل مع المهام المختلفة مثل: 

rstrip (): تجرد هذه الوظيفة كل سطر من الملف من المسافات من الجانب الأيمن.
lstrip (): تزيل هذه الوظيفة كل سطر من الملف من المسافات من الجانب الأيسر.
تم تصميمه لتوفير بناء جملة أكثر نظافة ومعالجة الاستثناءات عند العمل مع التعليمات البرمجية. وهذا ما يفسر سبب استخدامها مع بيان حيثما أمكن. هذا مفيد لأنه باستخدام هذه الطريقة ، سيتم إغلاق أي ملفات يتم فتحها تلقائيًا بعد الانتهاء من أحدها ، لذلك التنظيف التلقائي. 
مثال: 

# Python code to illustrate with()
with open("file.txt") as file: 
    data = file.read()
# do something with data
استخدام الكتابة مع الدالة with ()
يمكننا أيضًا استخدام دالة الكتابة مع وظيفة with (): 

# Python code to illustrate with() alongwith write()
with open("file.txt", "w") as f:
    f.write("Hello World!!!")
Split () باستخدام معالجة الملفات
يمكننا أيضًا تقسيم الأسطر باستخدام معالجة الملفات في Python. هذا يقسم المتغير عند مواجهة الفضاء. يمكنك أيضًا التقسيم باستخدام أي أحرف كما نرغب. ها هو الكود:

# Python code to illustrate split() function
with open("file.text", "r") as file:
    data = file.readlines()
    for line in data:
        word = line.split()
        print (word)
هناك أيضًا العديد من الوظائف الأخرى التي تساعد في معالجة الملفات ومحتوياتها. يمكن للمرء استكشاف العديد من الوظائف الأخرى في Python Docs.
 
