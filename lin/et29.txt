
التغليف في بايثون
مستوى الصعوبة: سهل
آخر تحديث: ٥ يناير ٢٠٢٢
يعتبر التغليف أحد المفاهيم الأساسية في البرمجة الشيئية (OOP). يصف فكرة التفاف البيانات والطرق التي تعمل على البيانات في وحدة واحدة. يضع هذا قيودًا على الوصول إلى المتغيرات والطرق مباشرةً ويمكن أن يمنع التعديل العرضي للبيانات. لمنع التغيير العرضي ، لا يمكن تغيير متغير الكائن إلا بطريقة الكائن. تُعرف هذه الأنواع من المتغيرات بالخاصة

عامل
الفئة هي مثال على التغليف لأنها تضم ​​جميع البيانات التي هي عبارة عن وظائف العضو والمتغيرات وما إلى ذلك.



ضع في اعتبارك مثالًا واقعيًا للتغليف ، في الشركة ، هناك أقسام مختلفة مثل قسم الحسابات ، وقسم التمويل ، وقسم المبيعات وما إلى ذلك. يتعامل قسم الشؤون المالية مع جميع المعاملات المالية ويحتفظ بسجلات لجميع البيانات المتعلقة بالتمويل. وبالمثل ، يتعامل قسم المبيعات مع جميع الأنشطة المتعلقة بالمبيعات ويحتفظ بسجلات لجميع المبيعات. الآن قد تنشأ حالة عندما يحتاج مسؤول من قسم الشؤون المالية لسبب ما إلى جميع البيانات حول المبيعات في شهر معين. في هذه الحالة لا يحق له الوصول مباشرة إلى بيانات قسم المبيعات. سيتعين عليه أولاً الاتصال بموظف آخر في قسم المبيعات ثم يطلب منه تقديم البيانات المحددة. هذا هو ما هو التغليف. هنا يتم تغليف بيانات قسم المبيعات والموظفين الذين يمكنهم التلاعب بها تحت اسم واحد "قسم المبيعات". يؤدي استخدام التغليف أيضًا إلى إخفاء البيانات. في هذا المثال ، يتم إخفاء بيانات الأقسام مثل المبيعات أو المالية أو الحسابات من أي قسم آخر.

أعضاء محميين
الأعضاء المحميون (في C ++ و JAVA) هم أعضاء الفصل الذين لا يمكن الوصول إليهم خارج الفصل ولكن يمكن الوصول إليهم من داخل الفصل وفئاته الفرعية. لإنجاز ذلك في Python ، ما عليك سوى اتباع الاصطلاح عن طريق إضافة بادئة إلى اسم العضو بشرطة سفلية واحدة "_" .

على الرغم من أنه يمكن الوصول إلى المتغير المحمي خارج الفئة وكذلك في الفئة المشتقة (تم تعديله أيضًا في الفئة المشتقة) ، إلا أنه من المعتاد (اصطلاحًا وليس قاعدة) عدم الوصول إلى المحمية خارج جسم الفصل الدراسي.

ملاحظة: طريقة __init__ هي منشئ ويتم تشغيلها بمجرد إنشاء كائن من فئة.  

# Python program to
# demonstrate protected members
 
# Creating a base class
class Base:
    def __init__(self):
 
        # Protected member
        self._a = 2
 
# Creating a derived class
class Derived(Base):
    def __init__(self):
 
        # Calling constructor of
        # Base class
        Base.__init__(self)
        print("Calling protected member of base class: ",
              self._a)
 
        # Modify the protected variable:
        self._a = 3
        print("Calling modified protected member outside class: ",
              self._a)
 
 
obj1 = Derived()
 
obj2 = Base()
 
# Calling protected member
# Can be accessed but should not be done due to convention
print("Accessing protedted member of obj1: ", obj1._a)
 
# Accessing the protected variable outside
print("Accessing protedted member of obj2: ", obj2._a)
انتاج: 

استدعاء عضو محمي من الفئة الأساسية: 2
استدعاء عضو محمي معدل خارج الفصل 3
الوصول إلى العضو المحمي من obj1: 3
الوصول إلى العضو المحمي من obj2: 2
أعضاء القطاع الخاص
الأعضاء الخاصون مشابهون للأعضاء المحميين ، والفرق هو أن أعضاء الفصل المعلن عن الخصوصية لا ينبغي الوصول إليهم خارج الفصل ولا من قبل أي فئة أساسية. في بايثون ، لا وجود لمتغيرات مثيل خاصة لا يمكن الوصول إليها إلا داخل فئة.

ومع ذلك ، لتعريف عضو خاص بادئة اسم العضو بشرطة سفلية مزدوجة "__".

ملاحظة: يمكن الوصول إلى عضو Python الخاص والمحمي خارج الفصل من خلال تغيير اسم Python . 

# Python program to
# demonstrate private members
 
# Creating a Base class
 
 
class Base:
    def __init__(self):
        self.a = "GeeksforGeeks"
        self.__c = "GeeksforGeeks"
 
# Creating a derived class
class Derived(Base):
    def __init__(self):
 
        # Calling constructor of
        # Base class
        Base.__init__(self)
        print("Calling private member of base class: ")
        print(self.__c)
 
 
# Driver code
obj1 = Base()
print(obj1.a)
 
# Uncommenting print(obj1.c) will
# raise an AttributeError
 
# Uncommenting obj2 = Derived() will
# also raise an AtrributeError as
# private member of base class
# is called inside derived class
انتاج: 

GeeksforGeeks
Traceback (آخر مكالمة أخيرة):
  ملف "/home/f4905b43bfcf29567e360c709d3c52bd.py" ، السطر 25 ، في <module>
    طباعة (obj1.c)
AttributeError: الكائن 'Base' ليس له سمة 'c'

Traceback (آخر مكالمة أخيرة):
  ملف "/home/4d97a4efe3ea68e55f48f1e7c7ed39cf.py" ، السطر 27 ، في <module>
    obj2 = مشتق ()
  ملف "/home/4d97a4efe3ea68e55f48f1e7c7ed39cf.py" ، السطر 20 ، في __init__
    طباعة (ذاتي _ ج)
AttributeError: الكائن "المشتق" ليس له سمة "_Derived__c"

<<<<<<<<<<<<<<<<<<<<<

تعدد الأشكال في بيثون
مستوى الصعوبة: سهل
آخر تحديث: ٤ أغسطس ٢٠٢١
ما هو تعدد الأشكال: تعني كلمة تعدد الأشكال وجود العديد من الأشكال. في البرمجة ، يعني تعدد الأشكال نفس اسم الوظيفة (لكن التوقيعات المختلفة) المستخدمة لأنواع مختلفة.
مثال على وظائف متعددة الأشكال يحمل في ثناياه عوامل: 
 


# Python program to demonstrate in-built poly-
# morphic functions
 
# len() being used for a string
print(len("geeks"))
 
# len() being used for a list
print(len([10, 20, 30]))
انتاج: 
5
3
 

أمثلة على الوظائف متعددة الأشكال التي يحددها المستخدم: 
 


# A simple Python function to demonstrate
# Polymorphism
 
def add(x, y, z = 0):
    return x + y+z
 
# Driver code
print(add(2, 3))
print(add(2, 3, 4))
انتاج: 
5
9
 

تعدد الأشكال مع طرق التصنيف: 
يوضح الكود أدناه كيف يمكن لبيثون استخدام نوعين مختلفين من الفئات ، بنفس الطريقة. نقوم بإنشاء حلقة for تتكرر خلال مجموعة من الكائنات. ثم اتصل بالطرق دون القلق بشأن نوع الفئة التي يكون كل كائن فيها. نحن نفترض أن هذه الأساليب موجودة بالفعل في كل فئة. 
 


class India():
    def capital(self):
        print("New Delhi is the capital of India.")
 
    def language(self):
        print("Hindi is the most widely spoken language of India.")
 
    def type(self):
        print("India is a developing country.")
 
class USA():
    def capital(self):
        print("Washington, D.C. is the capital of USA.")
 
    def language(self):
        print("English is the primary language of USA.")
 
    def type(self):
        print("USA is a developed country.")
 
obj_ind = India()
obj_usa = USA()
for country in (obj_ind, obj_usa):
    country.capital()
    country.language()
    country.type()
انتاج: 
نيودلهي هي عاصمة الهند.
الهندية هي اللغة الأكثر انتشارًا في الهند.
الهند دولة نامية.
واشنطن العاصمة هي عاصمة الولايات المتحدة الأمريكية.
اللغة الإنجليزية هي اللغة الأساسية للولايات المتحدة الأمريكية.
الولايات المتحدة هي دولة متقدمة.
 

 
تعدد الأشكال مع الوراثة: 
في Python ، يتيح لنا تعدد الأشكال تحديد الأساليب في الفصل الفرعي التي لها نفس اسم الطرق في الفصل الرئيسي. في الوراثة ، ترث الفئة الفرعية الطرق من الفئة الأصل. ومع ذلك ، من الممكن تعديل طريقة في فئة فرعية ورثتها من الفئة الأصل. هذا مفيد بشكل خاص في الحالات التي تكون فيها الطريقة الموروثة من الفصل الرئيسي لا تتناسب تمامًا مع الفئة الفرعية. في مثل هذه الحالات ، نقوم بإعادة تنفيذ الطريقة في الفصل الدراسي التابع. تُعرف عملية إعادة تنفيذ طريقة ما في الفئة الفرعية باسم تجاوز الطريقة . 
 


class Bird:
  def intro(self):
    print("There are many types of birds.")
     
  def flight(self):
    print("Most of the birds can fly but some cannot.")
   
class sparrow(Bird):
  def flight(self):
    print("Sparrows can fly.")
     
class ostrich(Bird):
  def flight(self):
    print("Ostriches cannot fly.")
     
obj_bird = Bird()
obj_spr = sparrow()
obj_ost = ostrich()
 
obj_bird.intro()
obj_bird.flight()
 
obj_spr.intro()
obj_spr.flight()
 
obj_ost.intro()
obj_ost.flight()
انتاج: 
هناك أنواع عديدة من الطيور.
تستطيع معظم الطيور الطيران لكن بعضها لا يستطيع ذلك.
هناك أنواع عديدة من الطيور.
يمكن أن تطير العصافير.
هناك أنواع عديدة من الطيور.
لا تستطيع النعام الطيران.
 

 
تعدد الأشكال مع الوظيفة والأشياء: 
من الممكن أيضًا إنشاء وظيفة يمكن أن تأخذ أي كائن ، مما يسمح بتعدد الأشكال. في هذا المثال ، لنقم بإنشاء وظيفة تسمى "func ()" والتي ستأخذ كائنًا سنسميه "obj". على الرغم من أننا نستخدم الاسم "obj" ، فسيكون من الممكن استدعاء أي كائن تم إنشاء مثيل له في هذه الوظيفة. بعد ذلك ، دعنا نعطي الوظيفة شيئًا للقيام به يستخدم الكائن "obj" الذي مررناه إليه. في هذه الحالة ، دعنا نسمي الطرق الثلاثة ، رأس المال () ، واللغة () والنوع () ، وكل منها مُعرَّف في الفئتين "الهند" و "الولايات المتحدة الأمريكية". بعد ذلك ، لنقم بإنشاء مثيل لكل من فئتي "الهند" و "الولايات المتحدة الأمريكية" إذا لم يكن لدينا بالفعل. مع هؤلاء ، يمكننا استدعاء عملهم باستخدام نفس وظيفة func (): 
 

def func(obj):
    obj.capital()
    obj.language()
    obj.type()
  
obj_ind = India()
obj_usa = USA()
  
func(obj_ind)
func(obj_usa)
  
الكود: تنفيذ تعدد الأشكال بوظيفة 
 


class India():
    def capital(self):
        print("New Delhi is the capital of India.")
  
    def language(self):
        print("Hindi is the most widely spoken language of India.")
  
    def type(self):
        print("India is a developing country.")
  
class USA():
    def capital(self):
        print("Washington, D.C. is the capital of USA.")
  
    def language(self):
        print("English is the primary language of USA.")
  
    def type(self):
        print("USA is a developed country.")
 
def func(obj):
    obj.capital()
    obj.language()
    obj.type()
  
obj_ind = India()
obj_usa = USA()
  
func(obj_ind)
func(obj_usa)
انتاج: 
نيودلهي هي عاصمة الهند.
الهندية هي اللغة الأكثر انتشارًا في الهند.
الهند دولة نامية.
واشنطن العاصمة هي عاصمة الولايات المتحدة الأمريكية.
اللغة الإنجليزية هي اللغة الأساسية للولايات المتحدة الأمريكية.
الولايات المتحدة هي دولة متقدمة.