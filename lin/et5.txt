
أخذ المدخلات في بايثون
مستوى الصعوبة: سهل
آخر تحديث: 05 أغسطس 2020
غالبًا ما يحتاج المطورون إلى التفاعل مع المستخدمين ، إما للحصول على البيانات أو لتقديم نوع من النتائج. تستخدم معظم البرامج اليوم مربع حوار كطريقة لمطالبة المستخدم بتوفير نوع من الإدخال. بينما توفر لنا Python وظيفتين مدمجتين لقراءة المدخلات من لوحة المفاتيح.

الإدخال (موجه)
إدخال خام (موجه)
الإدخال (): تأخذ هذه الوظيفة أولاً الإدخال من المستخدم ثم تقيم التعبير ، مما يعني أن Python تحدد تلقائيًا ما إذا كان المستخدم قد أدخل سلسلة أو رقمًا أو قائمة. إذا كان الإدخال المقدم غير صحيح ، فسيتم رفع إما خطأ في بناء الجملة أو استثناء بواسطة Python. فمثلا -


# Python program showing 
# a use of input()
  
val = input("Enter your value: ")
print(val)
الإخراج:

 
كيف تعمل وظيفة الإدخال في بايثون:

عند input()تنفيذ الوظيفة ، سيتوقف تدفق البرنامج حتى يعطي المستخدم مدخلاً.
يُعد عرض النص أو الرسالة على شاشة الإخراج لتطلب من المستخدم إدخال قيمة الإدخال اختياريًا ، أي أن المطالبة ، ستتم طباعتها على الشاشة اختيارية.
كل ما تدخله كمدخلات ، تقوم وظيفة الإدخال بتحويله إلى سلسلة. إذا قمت بإدخال قيمة عدد صحيح لا تزال input()تعمل تحويلها إلى سلسلة. تحتاج إلى تحويله صراحة إلى عدد صحيح في التعليمات البرمجية الخاصة بك باستخدام التلبيس .
رمز:


# Program to check input 
# type in Python
  
num = input ("Enter number :")
print(num)
name1 = input("Enter name : ")
print(name1)
  
# Printing type of input value
print ("type of number", type(num))
print ("type of name", type(name1))
انتاج :


raw_input (): تعمل هذه الوظيفة في الإصدار الأقدم (مثل Python 2.x). تأخذ هذه الوظيفة ما يتم كتابته بالضبط من لوحة المفاتيح ، وتحولها إلى سلسلة ثم تعيدها إلى المتغير الذي نريد تخزينه. فمثلا -


# Python program showing 
# a use of raw_input()
  
g = raw_input("Enter your name : ")
print g
انتاج :


هنا ، g هو متغير سيحصل على قيمة السلسلة ، التي يكتبها المستخدم أثناء تنفيذ البرنامج. يتم إنهاء كتابة البيانات raw_input()للوظيفة بواسطة مفتاح الإدخال. يمكننا استخدامها raw_input()لإدخال البيانات الرقمية أيضًا. في هذه الحالة نستخدم أسلوب الطباعية. لمزيد من التفاصيل حول التلبيس ، يرجى الرجوع إلى هذا .
 

راجع مقالة أخذ القائمة كمدخلات من المستخدم لمزيد من المعلومات.


>>>>>>>>>>>>>>>>>>>>>>>>
أخذ المدخلات من وحدة التحكم في بايثون
مستوى الصعوبة: سهل
آخر تحديث: 27 نوفمبر 2020
ما هي وحدة التحكم في بايثون؟ وحدة التحكم (تسمى أيضًا Shell) هي في الأساس مترجم سطر أوامر يأخذ مدخلات من المستخدم ، أي أمر واحد في كل مرة ويفسرها. إذا كان خاليًا من الأخطاء ، فسيتم تشغيل الأمر ويعطي الإخراج المطلوب ، وإلا فسيظهر رسالة الخطأ. تبدو وحدة تحكم Python هكذا.



هنا نكتب الأمر ونقوم بتنفيذ الأمر فقط اضغط على مفتاح الإدخال وسيتم تفسير الأمر الخاص بك.
للتشفير في Python ، يجب أن تعرف أساسيات وحدة التحكم المستخدمة في Python.

الموجه الأساسي لوحدة تحكم Python هو الثلاثة أكبر من الرموز

>>>
أنت حر في كتابة الأمر التالي على الغلاف فقط عندما تظهر هذه المطالبات بعد تنفيذ الأمر الأول. تقبل وحدة تحكم Python الأمر في Python الذي تكتبه بعد الموجه.


قبول المدخلات من وحدة التحكم
يقوم المستخدم بإدخال القيم في وحدة التحكم ثم يتم استخدام هذه القيمة في البرنامج كما هو مطلوب.
لأخذ مدخلات من المستخدم ، نستخدم إدخال وظيفة مدمج () .


# input
input1 = input()
  
# output
print(input1)
يمكننا أيضًا كتابة هذا الإدخال إلى عدد صحيح أو عدد عشري أو سلسلة من خلال تحديد دالة الإدخال () داخل النوع.

نسخ المدخلات إلى عدد صحيح: قد تكون هناك ظروف تتطلب إدخال عدد صحيح من المستخدم / وحدة التحكم ، يأخذ الكود التالي مدخلين (عدد صحيح / عدد عشري) من وحدة التحكم ويقوم بطباعةهما إلى عدد صحيح ثم يطبع المجموع.

# input
num1 = int(input())
num2 = int(input())
  
# printing the sum in integer
print(num1 + num2)
Typecasting الإدخال إلى Float: لتحويل الإدخال إلى تعويم ، ستعمل الكود التالي.

# input
num1 = float(input())
num2 = float(input())
  
# printing the sum in float
print(num1 + num2)
كتابة المدخلات إلى سلسلة: يمكن تحويل كل أنواع المدخلات إلى نوع سلسلة سواء كانت عائمة أو عددًا صحيحًا. نحن نستفيد من الكلمات الرئيسية str للتلبيس.

# input
string = str(input())
  
# output
print(string)

>>>>>>>>>>>>>>>>>>>>>>>>
أخذ مدخلات متعددة من المستخدم في بايثون
مستوى الصعوبة: سهل
آخر تحديث: ٢٣ ديسمبر ٢٠٢١
غالبًا ما يريد المطور من المستخدم إدخال قيم أو مدخلات متعددة في سطر واحد. في C ++ / C ، يمكن للمستخدم أخذ مدخلات متعددة في سطر واحد باستخدام scanf ولكن في Python يمكن للمستخدم أخذ قيم أو مدخلات متعددة في سطر واحد بطريقتين. 

باستخدام طريقة Split ()
استخدام قائمة الفهم
استخدام طريقة Split () : 
تساعد هذه الوظيفة في الحصول على مدخلات متعددة من المستخدمين. يكسر الإدخال المحدد بواسطة الفاصل المحدد. إذا لم يتم توفير فاصل ، فإن أي مسافة بيضاء هي فاصل. بشكل عام ، يستخدم المستخدمون طريقة split () لتقسيم سلسلة Python ولكن يمكن استخدامها في أخذ مدخلات متعددة.

بناء الجملة : 

الإدخال (). الانقسام (الفاصل ، الحد الأقصى)
مثال : 


# Python program showing how to
# multiple input using split
 
# taking two inputs at a time
x, y = input("Enter two values: ").split()
print("Number of boys: ", x)
print("Number of girls: ", y)
print()
 
# taking three inputs at a time
x, y, z = input("Enter three values: ").split()
print("Total number of students: ", x)
print("Number of boys is : ", y)
print("Number of girls is : ", z)
print()
 
# taking two inputs at a time
a, b = input("Enter two values: ").split()
print("First number is {} and second number is {}".format(a, b))
print()
 
# taking multiple inputs at a time
# and type casting using list() function
x = list(map(int, input("Enter multiple values: ").split()))
print("List of students: ", x)
انتاج: 
 



استخدام فهم القائمة : 
يعد فهم القائمة طريقة رائعة لتعريف وإنشاء قائمة في بايثون. يمكننا إنشاء قوائم مثل العبارات الرياضية في سطر واحد فقط. يتم استخدامه أيضًا في الحصول على مدخلات متعددة من المستخدم. 

مثال: 


# Python program showing
# how to take multiple input
# using List comprehension
 
# taking two input at a time
x, y = [int(x) for x in input("Enter two values: ").split()]
print("First Number is: ", x)
print("Second Number is: ", y)
print()
 
# taking three input at a time
x, y, z = [int(x) for x in input("Enter three values: ").split()]
print("First Number is: ", x)
print("Second Number is: ", y)
print("Third Number is: ", z)
print()
 
# taking two inputs at a time
x, y = [int(x) for x in input("Enter two values: ").split()]
print("First number is {} and second number is {}".format(x, y))
print()
 
# taking multiple inputs at a time
x = [int(x) for x in input("Enter multiple values: ").split()]
print("Number of list is: ", x)
انتاج : 
 



ملاحظة: الأمثلة أعلاه تأخذ المدخلات مفصولة بمسافات. في حالة رغبتنا في أخذ المدخلات مفصولة بفاصلة (،) ، يمكننا استخدام ما يلي: 


# taking multiple inputs at a time separated by comma
x = [int(x) for x in input("Enter multiple value: ").split(",")]
print("Number of list is: ", x)

>>>>>>>>>>>>>>>>>>>>>>>>
بايثون | الإخراج باستخدام وظيفة الطباعة ()
مستوى الصعوبة: سهل
آخر تحديث: ٢٩ أكتوبر ٢٠٢١
تقوم وظيفة Python print () بطباعة الرسالة على الشاشة أو أي جهاز إخراج قياسي آخر.

بناء الجملة: print (value (s)، sep = ''، end = '\ n'، file = file، flush = flush)

المعلمات: 

القيمة (القيم): أي قيمة ، وبقدر ما تريد. سيتم تحويلها إلى سلسلة قبل طباعتها
sep ='eparator ': (اختياري) حدد كيفية فصل الكائنات ، إذا كان هناك أكثر من عنصر واحد.
end = 'end': (اختياري) حدد ما تريد طباعته في النهاية. الافتراضي: '\ n'
ملف: (اختياري) كائن بأسلوب كتابة. الافتراضي: sys.stdout
تدفق: (اختياري) منطقي ، يحدد ما إذا كان الإخراج متدفقًا (صواب) أو مخزنًا مؤقتًا (خطأ). الافتراضي: خطأ
إرجاع: يقوم بإرجاع الإخراج إلى الشاشة.

على الرغم من أنه ليس من الضروري تمرير الوسائط في وظيفة print () ، إلا أنها تتطلب أقواسًا فارغة في النهاية تخبر Python بتنفيذ الوظيفة بدلاً من تسميتها بالاسم. الآن ، دعنا نستكشف الحجج الاختيارية التي يمكن استخدامها مع وظيفة print ().

سلسلة حرفية
تُستخدم String literals في بيان python print بشكل أساسي لتنسيق أو تصميم كيفية ظهور سلسلة معينة عند طباعتها باستخدام وظيفة print ().

\ n: تُستخدم هذه السلسلة الحرفية لإضافة سطر فارغ جديد أثناء طباعة العبارة.
"": يتم استخدام علامة اقتباس فارغة ("") لطباعة سطر فارغ.
مثال:


print("GeeksforGeeks \n is best for DSA Content.")
انتاج:

GeeksforGeeks
 هو الأفضل لمحتوى DSA.
نهاية = ”” البيان
يتم استخدام الكلمة الأساسية النهائية لتحديد المحتوى الذي ستتم طباعته في نهاية تنفيذ وظيفة print (). بشكل افتراضي ، يتم تعيينه على "\ n" ، مما يؤدي إلى تغيير السطر بعد تنفيذ عبارة print ().

مثال: طباعة Python () بدون سطر جديد.

# This line will automatically add a new line before the
# next print statement
print ("GeeksForGeeks is the best platform for DSA content")
 
# This print() function ends with "**" as set in the end argument.
print ("GeeksForGeeks is the best platform for DSA content", end= "**")
print("Welcome to GFG")
انتاج:

GeeksForGeeks هي أفضل منصة لمحتوى DSA
GeeksForGeeks هي أفضل منصة لمحتوى DSA ** مرحبًا بك في GFG
حجة دافق
يتم تخزين I / Os في python بشكل عام ، مما يعني أنه يتم استخدامها في أجزاء. هذا هو المكان الذي يأتي فيه التدفق لأنه يساعد المستخدمين على تحديد ما إذا كانوا بحاجة إلى تخزين المحتوى المكتوب مؤقتًا أم لا. بشكل افتراضي ، يتم تعيينه على خطأ. إذا تم ضبطه على صحيح ، فسيتم كتابة الإخراج على شكل سلسلة من الأحرف واحدة تلو الأخرى. هذه العملية بطيئة ببساطة لأنه من الأسهل الكتابة في أجزاء بدلاً من كتابة حرف واحد في كل مرة. لفهم حالة استخدام وسيطة flush في دالة print () ، لنأخذ مثالاً.

مثال:

تخيل أنك تبني عدادًا للعد التنازلي ، والذي يُلحق الوقت المتبقي بنفس السطر كل ثانية. سيبدو ما يلي:

3 >>> 2 >>> 1 >>> ابدأ
سيبدو الرمز الأولي لهذا كما يلي ؛


import time
 
count_seconds = 3
for i in reversed(range(count_seconds + 1)):
    if i > 0:
        print(i, end='>>>')
        time.sleep(1)
    else:
        print('Start')
لذلك ، يضيف الكود أعلاه نصًا بدون سطر جديد لاحق ثم ينام لمدة ثانية واحدة بعد كل إضافة نص. في نهاية العد التنازلي ، يقوم بطباعة Start وينهي السطر. إذا قمت بتشغيل الكود كما هو ، فإنه ينتظر لمدة 3 ثوان ويطبع النص بالكامل بشكل مفاجئ مرة واحدة. هذا إهدار لمدة 3 ثوانٍ بسبب التخزين المؤقت لمقطع النص كما هو موضح أدناه:



على الرغم من أن التخزين المؤقت يخدم غرضًا ، إلا أنه يمكن أن يؤدي إلى تأثيرات غير مرغوب فيها كما هو موضح أعلاه. لمواجهة نفس المشكلة ، يتم استخدام وسيطة flush مع وظيفة print (). الآن ، قم بتعيين وسيطة التدفق على أنها صحيحة وشاهد النتائج مرة أخرى.


import time
 
count_seconds = 3
for i in reversed(range(count_seconds + 1)):
    if i > 0:
        print(i, end='>>>', flush = True)
        time.sleep(1)
    else:
        print('Start')
انتاج:

مشغل فديوهات

00:00
00:10


فاصل
يمكن أن تقبل الدالة print () أي عدد من الوسائط الموضعية. يمكن فصل هذه الوسيطات عن بعضها البعض باستخدام فاصل "،" . تستخدم هذه بشكل أساسي لتنسيق عبارات متعددة في دالة print () واحدة.

مثال:


b = "for"
 
print("Geeks", b , "Geeks")
انتاج:

المهوسون للمهوسون
حجة الملف
خلافًا للاعتقاد الشائع ، لا تقوم وظيفة print () بتحويل الرسائل إلى نص على الشاشة. يتم ذلك عن طريق طبقات منخفضة المستوى من التعليمات البرمجية ، والتي يمكنها قراءة البيانات (الرسالة) بالبايت. وظيفة print () هي واجهة فوق هذه الطبقات ، والتي تفوض الطباعة الفعلية إلى دفق أو كائن يشبه الملف . بشكل افتراضي ، ترتبط وظيفة print () بـ sys.stdout من خلال وسيطة الملف. 

مثال: طباعة Python () إلى ملف

import io
 
# declare a dummy file
dummy_file = io.StringIO()
 
# add message to the dummy file
print('Hello Geeks!!', file=dummy_file)
 
# get the value from dummy file
dummy_file.getvalue()
انتاج:

"مرحبا المهوسون !! \ n"
مثال: استخدام وظيفة print () في بايثون

# Python 3.x program showing
# how to print data on
# a screen
 
# One object is passed
print("GeeksForGeeks")
 
x = 5
# Two objects are passed
print("x =", x)
 
# code for disabling the softspace feature
print('G', 'F', 'G', sep='')
 
# using end argument
print("Python", end='@')
print("GeeksforGeeks")
انتاج:

المهوسون
س = 5
GFG