
كلمة رئيسية عالمية في Python
مستوى الصعوبة: سهل
آخر تحديث: 31 مايو 2020
الكلمة الأساسية العالمية هي كلمة أساسية تسمح للمستخدم بتعديل متغير خارج النطاق الحالي. يتم استخدامه لإنشاء متغيرات عالمية من نطاق غير عالمي ، أي داخل دالة. تُستخدم الكلمة الأساسية العامة داخل دالة فقط عندما نريد القيام بالتعيينات أو عندما نريد تغيير متغير. العالمية ليست مطلوبة للطباعة والوصول.

قواعد الكلمات الرئيسية العالمية:

إذا تم تعيين قيمة لمتغير في أي مكان داخل جسم الوظيفة ، فمن المفترض أن يكون متغيرًا محليًا ما لم يتم الإعلان عنه صراحة على أنه عام.
المتغيرات التي تتم الإشارة إليها فقط داخل دالة هي متغيرات عامة ضمنيًا.
نحن نستخدم الكلمة الأساسية العالمية لاستخدام متغير عام داخل دالة.
ليست هناك حاجة لاستخدام الكلمات الأساسية العالمية خارج وظيفة.
استخدام الكلمات الأساسية العالمية:
للوصول إلى متغير عام داخل دالة ، ليست هناك حاجة لاستخدام الكلمات الأساسية العالمية.
مثال 1:


# Python program showing no need to
# use global keyword for accessing
# a global value
  
# global variable
a = 15
b = 10
  
# function to perform addition
def add():
    c = a + b
    print(c)
  
# calling a function
add()
انتاج:

 
25
إذا احتجنا إلى إسناد قيمة جديدة إلى متغير عالمي ، فيمكننا القيام بذلك عن طريق إعلان المتغير على أنه عام.
الرمز 2: بدون كلمة رئيسية عالمية


# Python program showing to modify
# a global value without using global
# keyword
  
a = 15
  
# function to change a global value
def change():
  
    # increment value of a by 5
    a = a + 5 
    print(a)
  
change()
انتاج:

UnboundLocalError: تمت الإشارة إلى المتغير المحلي "a" قبل التعيين
هذا الناتج خطأ لأننا نحاول تعيين قيمة لمتغير في نطاق خارجي. يمكن القيام بذلك باستخدام المتغير الشامل .
كود 3: مع الكلمة الأساسية العالمية


# Python program to modify a global
# value inside a function
  
x = 15
def change():
  
    # using a global keyword
    global x
  
    # increment value of a by 5
    x = x + 5 
    print("Value of x inside a function :", x)
change()
print("Value of x outside a function :", x)
انتاج:

قيمة x داخل دالة: 20
قيمة x خارج دالة: 20
في المثال أعلاه ، نحدد x أولاً ككلمة أساسية عالمية داخل الوظيفة change(). ثم تزداد قيمة x بمقدار 5 ، أي. x = x + 5 ومن ثم نحصل على الناتج كـ 20.
كما نرى بتغيير القيمة داخل الدالة change()، ينعكس التغيير أيضًا في القيمة خارج المتغير العام.
 
المتغيرات العامة عبر وحدات Python النمطية:
أفضل طريقة لمشاركة المتغيرات العامة عبر وحدات مختلفة داخل نفس البرنامج هي إنشاء وحدة نمطية خاصة (تسمى غالبًا config أو cfg). استيراد وحدة التكوين في جميع وحدات التطبيق الخاص بك ؛ ثم تصبح الوحدة متاحة كاسم عالمي. يوجد مثيل واحد فقط لكل وحدة وبالتالي تنعكس أي تغييرات يتم إجراؤها على كائن الوحدة في كل مكان. على سبيل المثال ، مشاركة المتغيرات العامة عبر الوحدات النمطية
Code 1:قم بإنشاء config.pyملف لتخزين المتغيرات العالمية:

x = 0
y = 0
z ="none"
الرمز 2: إنشاء modify.pyملف لتعديل المتغيرات العامة:

import config
config.x = 1
config.y = 2
config.z ="geeksforgeeks"
قمنا هنا بتعديل قيمة x و y و z. تم تحديد هذه المتغيرات في الوحدة config.py، ومن ثم يتعين علينا استيراد configالوحدة ويمكننا استخدامها config.variable_nameللوصول إلى هذه المتغيرات.
الرمز 3: إنشاء main.pyملف لتعديل المتغيرات العامة:

import config
import modify
print(config.x)
print(config.y)
print(config.z)
انتاج:

1
2
geeksforgeeks
عام في دوال متداخلة
من أجل استخدام دوال عمومية داخل دوال متداخلة ، علينا أن نعلن عن متغير باستخدام كلمة أساسية عالمية داخل دالة متداخلة


# Python program showing a use of
# global in nested function
  
def add():
     x = 15
       
     def change():
         global x
         x = 20
     print("Before making changing: ", x)
     print("Making change")
     change()
     print("After making change: ", x)
  
add()
print("value of x",x)
انتاج:

قبل التغيير: 15
إحداث تغير
بعد إجراء التغيير: 15
قيمة x 20
في المثال أعلاه قبل إجراء التغيير وبعده () ، xيأخذ المتغير قيمة المتغير المحلي ، أي x = 15. خارج الوظيفة ، سيأخذ add()المتغير القيمة المحددة في الوظيفة ، أي x = 20. لأننا استخدمنا الكلمة الأساسية العالمية في لإنشاء متغير عام داخل دالة change () (النطاق المحلي).xchange()x

