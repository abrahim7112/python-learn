
أنواع وراثة بايثون
مستوى الصعوبة: أساسي
آخر تحديث: 25 سبتمبر 2020
يتم تعريف الوراثة على أنها قدرة فئة واحدة على اشتقاق أو وراثة الخصائص من فئة أخرى واستخدامها عند الحاجة. يوفر الوراثة الخصائص التالية: 
 

إنه يمثل علاقات العالم الحقيقي بشكل جيد. 
يوفر إمكانية إعادة استخدام التعليمات البرمجية. لا يتعين علينا كتابة نفس الرمز مرارًا وتكرارًا. كما أنه يسمح لنا بإضافة المزيد من الميزات إلى الفصل دون تعديله. 
إنها متعدية بطبيعتها ، مما يعني أنه إذا ورثت الفئة B من فئة أخرى A ، فإن جميع الفئات الفرعية لـ B سترث تلقائيًا من الفئة A. 
 
مثال:
 


# A Python program to demonstrate
# inheritance 
 
 
# Base class or Parent class
class Child:
 
    # Constructor
    def __init__(self, name):
        self.name = name
 
    # To get name
    def getName(self):
        return self.name
 
    # To check if this person is student
    def isStudent(self):
        return False
 
# Derived class or Child class
class Student(Child):
 
    # True is returned
    def isStudent(self):
        return True
 
  
# Driver code
# An Object of Child
std = Child("Ram")
print(std.getName(), std.isStudent())
 
# An Object of Student
std = Student("Shivam")
print(std.getName(), std.isStudent())
انتاج:
 

رام خطأ
شيفام صحيح


 

أنواع الوراثة في بايثون
تعتمد أنواع الميراث على عدد فصول الأطفال والوالدين المعنية. هناك أربعة أنواع من الوراثة في بايثون:
 

الميراث الفردي: الوراثة المنفردة تمكن فئة مشتقة من وراثة الخصائص من فئة أصل واحد ، وبالتالي تمكين إعادة استخدام الكود وإضافة ميزات جديدة إلى الكود الحالي.
 

وراثة واحدة

مثال:


# Python program to demonstrate
# single inheritance
 
 
# Base class
class Parent:
     def func1(self):
          print("This function is in parent class.")
 
# Derived class
class Child(Parent):
     def func2(self):
          print("This function is in child class.")
 
# Driver's code
object = Child()
object.func1()
object.func2()
انتاج:


هذه الوظيفة في فئة الأصل.
هذه الوظيفة في فئة الأطفال.
 

الوراثة المتعددة: عندما يمكن اشتقاق فئة من أكثر من فئة أساسية واحدة ، فإن هذا النوع من الوراثة يسمى الميراث المتعدد. في الوراثة المتعددة ، يتم توريث جميع ميزات الفئات الأساسية في الفئة المشتقة. 
 

الميراث المتعدد 1

مثال:


# Python program to demonstrate
# multiple inheritance
 
 
# Base class1
class Mother:
    mothername = ""
    def mother(self):
        print(self.mothername)
 
# Base class2
class Father:
    fathername = ""
    def father(self):
        print(self.fathername)
 
# Derived class
class Son(Mother, Father):
    def parents(self):
        print("Father :", self.fathername)
        print("Mother :", self.mothername)
 
# Driver's code
s1 = Son()
s1.fathername = "RAM"
s1.mothername = "SITA"
s1.parents()
انتاج:

الأب: رام
الأم: سيتا
الوراثة متعددة المستويات في الوراثة 
متعددة المستويات ، يتم توريث ميزات الفئة الأساسية والفئة المشتقة إلى الفئة المشتقة الجديدة. هذا مشابه لعلاقة تمثل الطفل والجد. 
 

الميراث متعدد المستويات 1

مثال:


# Python program to demonstrate
# multilevel inheritance
 
# Base class
class Grandfather:
 
    def __init__(self, grandfathername):
        self.grandfathername = grandfathername
 
# Intermediate class
class Father(Grandfather):
    def __init__(self, fathername, grandfathername):
        self.fathername = fathername
 
        # invoking constructor of Grandfather class
        Grandfather.__init__(self, grandfathername)
 
# Derived class
class Son(Father):
    def __init__(self,sonname, fathername, grandfathername):
        self.sonname = sonname
 
        # invoking constructor of Father class
        Father.__init__(self, fathername, grandfathername)
 
    def print_name(self):
        print('Grandfather name :', self.grandfathername)
        print("Father name :", self.fathername)
        print("Son name :", self.sonname)
 
#  Driver code
s1 = Son('Prince', 'Rampal', 'Lal mani')
print(s1.grandfathername)
s1.print_name()
انتاج:

لال ماني
اسم الجد: لال ماني
اسم الأب: رامبال
اسم الابن: الأمير
الميراث الهرمي: عندما يتم إنشاء أكثر من فئة مشتقة من قاعدة واحدة ، يُطلق على هذا النوع من الميراث اسم الميراث الهرمي. في هذا البرنامج ، لدينا فئة أصل (أساسية) وفصول (مشتقة) من الأطفال.
 

الميراث الهرمي 1

مثال:


# Python program to demonstrate
# Hierarchical inheritance
 
 
# Base class
class Parent:
      def func1(self):
          print("This function is in parent class.")
 
# Derived class1
class Child1(Parent):
      def func2(self):
          print("This function is in child 1.")
 
# Derivied class2
class Child2(Parent):
      def func3(self):
          print("This function is in child 2.")
  
# Driver's code
object1 = Child1()
object2 = Child2()
object1.func1()
object1.func2()
object2.func1()
object2.func3()
انتاج:

هذه الوظيفة في فئة الأصل.
هذه الوظيفة موجودة في الطفل 1.
هذه الوظيفة في فئة الأصل.
هذه الوظيفة موجودة في الطفل 2.


الوراثة الهجينة: الوراثة التي تتكون من أنواع متعددة من الوراثة تسمى الوراثة الهجينة.
 

مثال:


# Python program to demonstrate
# hybrid inheritance
 
 
class School:
     def func1(self):
         print("This function is in school.")
  
class Student1(School):
     def func2(self):
         print("This function is in student 1. ")
  
class Student2(School):
     def func3(self):
         print("This function is in student 2.")
  
class Student3(Student1, School):
     def func4(self):
         print("This function is in student 3.")
  
# Driver's code
object = Student3()
object.func1()
object.func2()
 

انتاج:

هذه الوظيفة في المدرسة.
هذه الوظيفة موجودة في الطالب 1.
 
