
بايثون | المجموعة 3 (سلاسل ، قوائم ، مجموعات ، تكرارات)
مستوى الصعوبة: سهل
آخر تحديث: ٢٨ يونيو ٢٠٢١
في المقالة السابقة ، قرأنا عن أساسيات بايثون. الآن ، نواصل مع بعض مفاهيم البايثون.

سلاسل في بايثون 
السلسلة هي سلسلة من الأحرف. يمكن الإعلان عنها بلغة بيثون باستخدام علامات الاقتباس المزدوجة. السلاسل غير قابلة للتغيير ، أي لا يمكن تغييرها.


# Assigning string to a variable
a = "This is a string"
print (a)
القوائم في قوائم Python 
هي واحدة من أقوى الأدوات في Python. إنها تشبه المصفوفات المعلنة بلغات أخرى. لكن أقوى شيء هو أن هذه القائمة لا يجب أن تكون متجانسة دائمًا. يمكن أن تحتوي القائمة الواحدة على سلاسل وأعداد صحيحة وكائنات. يمكن أيضًا استخدام القوائم لتنفيذ التكديس وقوائم الانتظار. القوائم قابلة للتغيير ، أي يمكن تغييرها بمجرد الإعلان عنها.


# Declaring a list
L = [1, "a" , "string" , 1+2]
print L
L.append(6)
print L
L.pop()
print L
print L[1]
الخرج هو:  

[1، "a"، "string"، 3]
[1، "a"، "string"، 3، 6]
[1، "a"، "string"، 3]
أ
الصفوف في بايثون 
المجموعة هي سلسلة من كائنات بايثون غير القابلة للتغيير. تتشابه المجموعات تمامًا مع القوائم باستثناء أنه لا يمكن تغيير المجموعات بمجرد الإعلان عنها. عادةً ما تكون المجموعات أسرع من القوائم.


tup = (1, "a", "string", 1+2)
print(tup)
print(tup[1])
الخرج هو: 

(1، "a"، "string"، 3)
أ
يمكن إجراء التكرارات في Python 
التكرارات أو التكرار الحلقي في Python بواسطة حلقات "for" و "while". بصرف النظر عن التكرار على حالة معينة ، يمكننا أيضًا التكرار على السلاسل والقوائم والمجموعات.
مثال 1: تكرار بواسطة while loop لشرط


i = 1
while (i < 10):
    print(i)
    i += 1
الخرج هو: 

1
2
3
4
5
6
7
8
9
مثال 2: التكرار بواسطة حلقة for على سلسلة


s = "Hello World"
for i in s :
    print (i)
الخرج هو: 

ح
ه
ل
ل
ا
 
دبليو
ا
ص
ل
د
مثال 3: التكرار بواسطة حلقة for في القائمة


L = [1, 4, 5, 7, 8, 9]
for  i in L:
    print (i)
الخرج هو: 

1
4
5
7
8
9
مثال 4: التكرار بواسطة حلقة for للنطاق


for i in range(0, 10):
    print (i)
الخرج هو: 

0
1
2
3
4
5
6
7
8
9
https://www.youtube.com/watch؟v=pCoB45

 

المادة المقبلة - Python: القاموس والكلمات الرئيسية
اختبار  حول أنواع البيانات في بايثون
 
>>>>>>>>>>>>>>>>>>>>>>>
سلسلة بايثون
مستوى الصعوبة: سهل
آخر تحديث: 21 أكتوبر 2021
في Python ، السلاسل عبارة عن مصفوفات من البايت تمثل أحرف Unicode. ومع ذلك ، لا تحتوي Python على نوع بيانات حرف ، فالحرف الفردي هو مجرد سلسلة بطول 1. يمكن استخدام الأقواس المربعة للوصول إلى عناصر السلسلة.

خلق سلسلة
يمكن إنشاء الجمل في Python باستخدام علامات الاقتباس المفردة أو علامات الاقتباس المزدوجة أو حتى علامات الاقتباس الثلاثية. 


# Python Program for
# Creation of String
 
# Creating a String
# with single Quotes
String1 = 'Welcome to the Geeks World'
print("String with the use of Single Quotes: ")
print(String1)
 
# Creating a String
# with double Quotes
String1 = "I'm a Geek"
print("\nString with the use of Double Quotes: ")
print(String1)
 
# Creating a String
# with triple Quotes
String1 = '''I'm a Geek and I live in a world of "Geeks"'''
print("\nString with the use of Triple Quotes: ")
print(String1)
 
# Creating String with triple
# Quotes allows multiple lines
String1 = '''Geeks
            For
            Life'''
print("\nCreating a multiline String: ")
print(String1)
انتاج: 

سلسلة باستخدام اقتباسات مفردة:
مرحبًا بكم في عالم Geeks World

سلسلة باستخدام علامات الاقتباس المزدوجة:
أنا المهوس

سلسلة باستخدام الاقتباسات الثلاثية:
أنا مهووس وأعيش في عالم "المهوسون"

إنشاء سلسلة متعددة الأسطر:
المهوسون
            ل
            حياة
الوصول إلى الشخصيات في بايثون
في بايثون ، يمكن الوصول إلى الأحرف الفردية لسلسلة ما باستخدام طريقة الفهرسة. تسمح الفهرسة لمراجع العنوان السلبية بالوصول إلى الأحرف من الجزء الخلفي من السلسلة ، على سبيل المثال يشير -1 إلى الحرف الأخير ، ويشير -2 إلى الحرف الأخير الثاني ، وهكذا. 

أثناء الوصول إلى فهرس خارج النطاق سيؤدي إلى حدوث خطأ في الفهرس . يُسمح فقط بتمرير الأعداد الصحيحة كفهرس أو عائم أو أنواع أخرى من شأنها أن تسبب خطأ TypeError . 

سلاسل


# Python Program to Access
# characters of String
 
String1 = "GeeksForGeeks"
print("Initial String: ")
print(String1)
 
# Printing First character
print("\nFirst character of String is: ")
print(String1[0])
 
# Printing Last character
print("\nLast character of String is: ")
print(String1[-1])
انتاج: 

سلسلة أولية:
المهوسون

الحرف الأول من String هو:
جي

آخر حرف في السلسلة هو:
س
سلسلة تشريح
للوصول إلى مجموعة من الأحرف في السلسلة ، يتم استخدام طريقة التقطيع. يتم إجراء التقطيع في سلسلة باستخدام عامل التشغيل Slicing (نقطتان). 


# Python Program to
# demonstrate String slicing
 
# Creating a String
String1 = "GeeksForGeeks"
print("Initial String: ")
print(String1)
 
# Printing 3rd to 12th character
print("\nSlicing characters from 3-12: ")
print(String1[3:12])
 
# Printing characters between
# 3rd and 2nd last character
print("\nSlicing characters between " +
    "3rd and 2nd last character: ")
print(String1[3:-2])
انتاج: 

سلسلة أولية:
المهوسون

تشريح الشخصيات من 3 إلى 12:
ksForGeek

تشريح الأحرف بين الحرفين الثالث والثاني:
ksForGee
حذف / تحديث من سلسلة
في Python ، لا يُسمح بتحديث أو حذف الأحرف من سلسلة. سيؤدي هذا إلى حدوث خطأ لأن تعيين العنصر أو حذف العنصر من سلسلة غير مدعوم. على الرغم من أن حذف السلسلة بأكملها ممكن باستخدام كلمة del مضمنة. هذا لأن السلاسل النصية غير قابلة للتغيير ، وبالتالي لا يمكن تغيير عناصر السلسلة بمجرد تعيينها. يمكن إعادة تعيين السلاسل الجديدة فقط إلى نفس الاسم. 

تحديث شخصية: 

# Python Program to Update
# character of a String
 
String1 = "Hello, I'm a Geek"
print("Initial String: ")
print(String1)
 
# Updating a character
# of the String
String1[2] = 'p'
print("\nUpdating character at 2nd Index: ")
print(String1)
خطأ: 

Traceback (آخر مكالمة أخيرة): 
ملف "/home/360bb1830c83a918fc78aa8979195653.py" ، السطر 10 ، في 
String1 [2] = 'p' 
TypeError: لا يدعم الكائن 'str' تعيين العنصر

تحديث السلسلة بأكملها:

# Python Program to Update
# entire String
 
String1 = "Hello, I'm a Geek"
print("Initial String: ")
print(String1)
 
# Updating a String
String1 = "Welcome to the Geek World"
print("\nUpdated String: ")
print(String1)
انتاج: 

سلسلة أولية:
مرحبًا ، أنا مهووس

السلسلة المحدثة:
مرحبًا بكم في عالم المهوسين
حذف الحرف: 

# Python Program to Delete
# characters from a String
 
String1 = "Hello, I'm a Geek"
print("Initial String: ")
print(String1)
 
# Deleting a character
# of the String
del String1[2]
print("\nDeleting character at 2nd Index: ")
print(String1)
خطأ: 

Traceback (آخر مكالمة أخيرة): 
ملف "/home/499e96a61e19944e7e45b7a6e1276742.py" ، السطر 10 ، في 
del String1 [2] 
TypeError: الكائن "str" ​​لا يدعم حذف العنصر

حذف سلسلة كاملة:
يمكن حذف السلسلة بأكملها باستخدام كلمة del. علاوة على ذلك ، إذا حاولنا طباعة السلسلة ، فسوف ينتج عن ذلك خطأ لأن String محذوفة وغير متاحة للطباعة.  


# Python Program to Delete
# entire String
 
String1 = "Hello, I'm a Geek"
print("Initial String: ")
print(String1)
 
# Deleting a String
# with the use of del
del String1
print("\nDeleting entire String: ")
print(String1)
خطأ: 

Traceback (آخر مكالمة أخيرة): 
الملف "/home/e4b8f2170f140da99d2fe57d9d8c6a94.py" ، السطر 12 ، في 
الطباعة (String1) 
NameError: الاسم "String1" غير محدد 

تسلسل الهروب في بايثون
أثناء طباعة سلاسل بعلامات اقتباس مفردة ومزدوجة يتسبب ذلك في حدوث خطأ في بناء الجملة لأن String تحتوي بالفعل على علامات اقتباس مفردة ومزدوجة وبالتالي لا يمكن طباعتها باستخدام أي منهما. ومن ثم ، لطباعة مثل هذه السلسلة ، يتم استخدام علامات الاقتباس الثلاثية أو استخدام تسلسلات Escape لطباعة مثل هذه السلاسل. 

تبدأ تسلسلات الهروب بشرطة مائلة للخلف ويمكن تفسيرها بشكل مختلف. إذا تم استخدام علامات الاقتباس المفردة لتمثيل سلسلة ، فيجب عندئذٍ تخطي جميع علامات الاقتباس الفردية الموجودة في السلسلة ويتم إجراء نفس الشيء مع علامات الاقتباس المزدوجة. 


# Python Program for
# Escape Sequencing
# of String
 
# Initial String
String1 = '''I'm a "Geek"'''
print("Initial String with use of Triple Quotes: ")
print(String1)
 
# Escaping Single Quote
String1 = 'I\'m a "Geek"'
print("\nEscaping Single Quote: ")
print(String1)
 
# Escaping Double Quotes
String1 = "I'm a \"Geek\""
print("\nEscaping Double Quotes: ")
print(String1)
 
# Printing Paths with the
# use of Escape Sequences
String1 = "C:\\Python\\Geeks\\"
print("\nEscaping Backslashes: ")
print(String1)
انتاج: 

سلسلة أولية مع اقتباسات ثلاثية:
أنا المهوس"

الهروب من اقتباس واحد:
أنا المهوس"

الهروب من الاقتباسات المزدوجة:
أنا المهوس"

الهروب من الخطوط المائلة العكسية:
ج: \ Python \ Geeks \
لتجاهل تسلسل الهروب في سلسلة أو r أو R ، فهذا يعني أن السلسلة عبارة عن سلسلة أولية وأن تسلسل الهروب بداخلها يجب تجاهله.


# Printing Geeks in HEX
String1 = "This is \x47\x65\x65\x6b\x73 in \x48\x45\x58"
print("\nPrinting in HEX with the use of Escape Sequences: ")
print(String1)
 
# Using raw String to
# ignore Escape Sequences
String1 = r"This is \x47\x65\x65\x6b\x73 in \x48\x45\x58"
print("\nPrinting Raw String in HEX Format: ")
print(String1)
انتاج:  

الطباعة في HEX باستخدام Escape Sequences:
هذا هو المهوسون في HEX

طباعة سلسلة خام بتنسيق HEX:
هذا هو \ x47 \ x65 \ x65 \ x6b \ x73 في \ x48 \ x45 \ x58
تنسيق السلاسل
يمكن تنسيق السلاسل النصية في Python باستخدام طريقة format () التي تعد أداة قوية ومتعددة الاستخدامات لتنسيق السلاسل النصية. يحتوي أسلوب التنسيق في String على أقواس معقوفة {} كعناصر نائبة يمكنها الاحتفاظ بالمتغيرات وفقًا للموضع أو الكلمة الأساسية لتحديد الترتيب.


# Python Program for
# Formatting of Strings
 
# Default order
String1 = "{} {} {}".format('Geeks', 'For', 'Life')
print("Print String in default order: ")
print(String1)
 
# Positional Formatting
String1 = "{1} {0} {2}".format('Geeks', 'For', 'Life')
print("\nPrint String in Positional order: ")
print(String1)
 
# Keyword Formatting
String1 = "{l} {f} {g}".format(g='Geeks', f='For', l='Life')
print("\nPrint String in order of Keywords: ")
print(String1)
انتاج: 

طباعة السلسلة بالترتيب الافتراضي:
المهوسون من أجل الحياة

سلسلة طباعة بترتيب موضعي:
من أجل Geeks Life

سلسلة طباعة بترتيب الكلمات الرئيسية:
الحياة للمهوسين
يمكن تقريب الأعداد الصحيحة مثل ثنائي ، وسداسي عشري ، وما إلى ذلك ، والعوامات أو عرضها في شكل الأس باستخدام محددات التنسيق. 


# Formatting of Integers
String1 = "{0:b}".format(16)
print("\nBinary representation of 16 is ")
print(String1)
 
# Formatting of Floats
String1 = "{0:e}".format(165.6458)
print("\nExponent representation of 165.6458 is ")
print(String1)
 
# Rounding off Integers
String1 = "{0:.2f}".format(1/6)
print("\none-sixth is : ")
print(String1)
انتاج: 

التمثيل الثنائي 16 هو
10000

تمثيل الأس لـ 165.6458 هو
1.656458e + 02

السدس هو:
0.17
يمكن ضبط السلسلة () أو الوسط (^) باستخدام محددات التنسيق ، مفصولة بنقطتين (:).  


# String alignment
String1 = "|{:<10}|{:^10}|{:>10}|".format('Geeks', 'for', 'Geeks')
print("\nLeft, center and right alignment with Formatting: ")
print(String1)
 
# To demonstrate aligning of spaces
String1 = "\n{0:^16} was founded in {1:<4}!".format("GeeksforGeeks", 2009)
print(String1)
انتاج: 

محاذاة إلى اليسار والوسط واليمين مع التنسيق:
| المهوسون | لـ | المهوسون |

 تأسست GeeksforGeeks في عام 2009!
تم إجراء تنسيق النمط القديم بدون استخدام أسلوب التنسيق باستخدام عامل التشغيل  ٪


# Python Program for
# Old Style Formatting
# of Integers
 
Integer1 = 12.3456789
print("Formatting in 3.2f format: ")
print('The value of Integer1 is %3.2f' % Integer1)
print("\nFormatting in 3.4f format: ")
print('The value of Integer1 is %3.4f' % Integer1)
انتاج: 

التنسيق في شكل 3.2f:
قيمة عدد صحيح 1 هي 12.35

التنسيق بتنسيق 3.4f:
قيمة عدد صحيح 1 هي 12.3457
عمليات سلسلة مفيدة  

العوامل المنطقية في السلسلة
تنسيق السلسلة باستخدام٪
فئة قالب السلسلة
انقسام سلسلة
دوكسترينغ بايثون
تشريح السلسلة
البحث عن جميع الأحرف المكررة في السلسلة
سلسلة عكسية في بايثون (5 طرق مختلفة)
برنامج Python للتحقق مما إذا كانت السلسلة متناظرة أم لا
ثوابت السلسلة 
وظيفة مدمجة	وصف
سلسلة .ascii_letters	تسلسل ثوابت أسكي صغير وحرف أسكي.
السلسلة	تسلسل الحروف الصغيرة
string.ascii_uppercase	تسلسل الأحرف الكبيرة
سلسلة	رقم في سلاسل
سلسلة	هيكساديجيت في سلاسل
سلسلة. رسائل	تسلسل الأحرف الصغيرة والكبيرة
سلسلة	يجب أن تحتوي السلسلة على أحرف صغيرة.
string.octdigits	Octadigit في سلسلة
سلسلة	أحرف ASCII التي تحتوي على علامات ترقيم.
السلسلة	سلسلة من الأحرف التي يمكن طباعتها
String.endswith ()	ترجع صواب إذا كانت السلسلة تنتهي بلاحقة معينة وإلا ترجع خطأ
String.startswith ()	ترجع صواب إذا بدأت السلسلة بالبادئة المحددة وإلا فإنها ترجع خطأ
String.isdigit ()	لعرض "صحيح" إذا كانت جميع الأحرف في السلسلة أرقامًا ، وإلا فإنها ترجع "خطأ".
String.isalpha ()	ترجع "True" إذا كانت جميع الأحرف في السلسلة أبجدية ، وإلا فإنها ترجع "False".
سلسلة. isdecimal ()	إرجاع صحيح إذا كانت جميع الأحرف في سلسلة عشرية.
str.format ()	إحدى طرق تنسيق السلسلة في Python3 ، والتي تسمح ببدائل متعددة وتنسيق القيمة.
String.index	تُرجع موضع التواجد الأول لسلسلة فرعية في سلسلة
السلسلة	يجب أن تحتوي السلسلة على أحرف كبيرة.
سلسلة. مسافة بيضاء	سلسلة تحتوي على جميع الأحرف التي تعتبر مسافة بيضاء.
string.swapcase ()	يقوم الأسلوب بتحويل جميع الأحرف الكبيرة إلى أحرف صغيرة والعكس صحيح للسلسلة المحددة وإرجاعها
يحل محل()	تقوم بإرجاع نسخة من السلسلة حيث يتم استبدال كل تكرارات سلسلة فرعية بسلسلة فرعية أخرى.
وظائف السلسلة المهملة
وظيفة مدمجة	وصف
سلسلة. عشري	إرجاع صحيح إذا كانت جميع الأحرف في سلسلة عشرية
سلسلة	إرجاع صحيح إذا كانت جميع الأحرف في سلسلة معينة أبجدية رقمية.
السلسلة	إرجاع True إذا كانت السلسلة عبارة عن سلسلة مغلفة للعنوان
تقسيم السلسلة	يقسم السلسلة عند التواجد الأول للفاصل ويعيد مجموعة.
سلسلة. المعرف	تحقق مما إذا كانت السلسلة معرّفًا صالحًا أم لا.
String.len	تُرجع طول السلسلة.
String.rindex	تُرجع أعلى فهرس للسلسلة الفرعية داخل السلسلة إذا تم العثور على سلسلة فرعية.
سلسلة. ماكس	تُرجع أعلى حرف أبجدي في سلسلة.
String.min	تُرجع الحد الأدنى من الأحرف الأبجدية في سلسلة.
String.splitlines	ترجع قائمة الأسطر في السلسلة.
السلسلة	إرجاع كلمة بحرفها الأول بحرف كبير.
السلسلة	قم بتوسيع علامات التبويب في سلسلة مع استبدالها بمسافة واحدة أو أكثر
سلسلة البحث	إرجاع أدنى فهرسة سلسلة فرعية.
سلسلة. rfind	العثور على أعلى مؤشر.
سلسلة	إرجاع عدد التكرارات (غير المتداخلة) لسلسلة فرعية فرعية في السلسلة
سلسلة	قم بإرجاع نسخة من s ، ولكن بالأحرف الكبيرة ، تم تحويل الأحرف إلى حالة صغيرة.
سلسلة	قم بإرجاع قائمة بكلمات السلسلة ، إذا كانت الوسيطة الثانية الاختيارية sep غير موجودة أو لا شيء
string.rsplit ()	قم بإرجاع قائمة بكلمات السلسلة ، ومسحها من النهاية.
قسم ()	الطريقة تقسم السلسلة المحددة إلى ثلاثة أجزاء
سلسلة	قم بإرجاع قائمة بكلمات السلسلة عند استخدامها مع وسيطين فقط.
السلسلة	اربط قائمة أو مجموعة كلمات مع تكرارات متداخلة لفصل.
string.strip ()	تقوم بإرجاع نسخة من السلسلة مع إزالة كل من المسافات البيضاء البادئة واللاحقة
السلسلة	أعد نسخة من السلسلة مع إزالة المسافات البيضاء البادئة.
سلسلة. rstrip	أعد نسخة من السلسلة مع إزالة المسافات البيضاء اللاحقة.
سلسلة. swapcase	لتحويل الأحرف الصغيرة إلى الأحرف الكبيرة والعكس صحيح.
سلسلة	ترجمة الأحرف باستخدام الجدول
السلسلة	تم تحويل الأحرف الصغيرة إلى الأحرف الكبيرة.
سلسلة	ضبط اليسار في حقل عرض معين.
سلسلة. rjust	ضبط لليمين في حقل عرض معين.
string.center ()	ضبط الوسط في حقل عرض معين.
سلسلة زفيل	ضع سلسلة رقمية على اليسار بأرقام صفرية حتى يتم الوصول إلى العرض المحدد.
السلسلة	إعادة نسخة من السلسلة مع استبدال جميع تكرارات السلسلة الفرعية القديمة بالجديدة.
string.casefold ()	إرجاع السلسلة بأحرف صغيرة والتي يمكن استخدامها للمقارنات بدون حالة.
السلسلة	يشفر السلسلة في أي ترميز تدعمه Python. الترميز الافتراضي هو utf-8.
سلسلة. ماكترانس	إرجاع جدول ترجمة يمكن استخدامه لـ str.translate ()
المقالات الحديثة عن Python String 
https://youtu.be/mvDQuegHVXg

المزيد من مقاطع الفيديو حول سلاسل Python:
طرق  
Python String - أساليب سلسلة Python للجزء 2 - الجزء 3  
العمليات المنطقية والانقسام في سلاسل 

برامج سلاسل بايثون  

الأوتار - المجموعة 1 ، المجموعة 2
طرق السلسلة - المجموعة 1 ، المجموعة 2 ، المجموعة 3
التعبيرات العادية (بحث ومطابقة وبحث عن الكل)
طريقة Python String Title
تبديل الفواصل والنقاط في سلسلة
برنامج لتحويل سلسلة إلى قائمة
عد وعرض أحرف العلة في سلسلة
برنامج Python للتحقق من صحة كلمة المرور
برنامج Python لحساب عدد حروف العلة باستخدام مجموعات في سلسلة معينة
تحقق من وجود URL في سلسلة
تحقق من وجود سلسلة فرعية في سلسلة معينة
تحقق مما إذا كانت هناك سلسلتان هما الجناس الناقص أم لا
دالة الخريطة والقاموس في بايثون لجمع قيم ASCII
وظيفة الخريطة وتعبير Lambda في Python لاستبدال الأحرف
SequenceMatcher في Python لأطول سلسلة فرعية مشتركة
اطبع الأحرف الأولى من الاسم مع اسم العائلة بالكامل
الكلمات الأكثر شيوعًا من مجموعة البيانات في بايثون
البحث عن جميع التطابقات القريبة من سلسلة الإدخال من القائمة
تحقق مما إذا كان هناك K متتالية 1 في رقم ثنائي
لامدا والتصفية في بايثون
سلسلة متسلسلة بأحرف غير شائعة في Python
تحقق مما إذا كان كلا نصفي السلسلة لهما نفس مجموعة الأحرف في Python
ابحث عن أول كلمة مكررة في سلسلة في Python
ثاني أكثر الكلمات تكرارا في تسلسل بايثون
K'th حرف غير مكرر في بايثون 
عكس الكلمات في سلسلة معينة في بايثون
اطبع الرقم بفاصلات على هيئة 1000 فاصل في بايثون
مطابقة البادئة في Python باستخدام وحدة pytrie
Python Regex لاستخراج أقصى قيمة رقمية من سلسلة
أزواج من الأوتار الكاملة في مجموعتين
إزالة جميع الكلمات المكررة من جملة معينة
ترتيب كلمات الجملة بترتيب تصاعدي
اعكس كل كلمة في جملة
كود Python لطباعة الأحرف المشتركة من سلسلتين بترتيب أبجدي
برنامج Python لتقسيم سلسلة والانضمام إليها
كود Python لنقل المسافات إلى مقدمة السلسلة في اجتياز فردي
تشغيل طول الترميز في بايثون
قم بإزالة جميع التكرارات من سلسلة معينة في Python
طرق زيادة الحرف في بايثون
مطابقة البادئة في Python باستخدام وحدة pytrie
اطبع الرقم بفاصلات على هيئة 1000 فاصل في بايثون
عكس الكلمات في سلسلة معينة في بايثون
نفذ سلسلة من التعليمات البرمجية في بايثون
String slicing in Python للتحقق مما إذا كانت السلسلة يمكن أن تصبح فارغة عن طريق الحذف المتكرر
طرق طباعة أحرف الهروب في بايثون
تشريح السلسلة في Python لتدوير سلسلة
عد تكرارات كلمة في السلسلة
ابحث عن الكلمات الأكثر شيوعًا من مجموعة البيانات في Python
بايثون | اطبع الأحرف الأولى من الاسم مع اسم العائلة بالكامل
وظيفة Zip في Python للتغيير إلى مجموعة أحرف جديدة
Python String isnumeric () وتطبيقه
رتب الكلمات بترتيب معجمي في بايثون
ابحث عن العدد الذي يحدث لعدد فردي من المرات باستخدام تعبير Lambda وقم بتقليل الوظيفة
طريقة Python String Title
ترتيب كلمات الجملة بترتيب تصاعدي
تحويل قائمة الأحرف إلى سلسلة
طريقة Python groupby لإزالة جميع التكرارات المتتالية
طريقة Python groupby لإزالة جميع التكرارات المتتالية
برنامج Python لإزالة الحرف الأول من سلسلة
استبدال السلاسل بأرقام في Python لتحليل البيانات
سلاسل حرفية منسقة (سلاسل f) في بايثون
دوكسترينغ بايثون
التقليب لسلسلة معينة باستخدام وظيفة يحمل في ثناياه عوامل
ابحث عن معدل تكرار كل كلمة في سلسلة في Python
برنامج لقبول السلاسل التي تحتوي على جميع أحرف العلة
عد عدد الأحرف المطابقة في زوج من السلسلة
عد كل البادئات في سلسلة معطاة بأكبر تردد
برنامج للتحقق مما إذا كانت السلسلة تحتوي على أي حرف خاص
توليد سلاسل عشوائية حتى يتم إنشاء سلسلة معينة
برنامج Python لحساب الأحرف الكبيرة والصغيرة دون استخدام وظائف داخلية

>>>>>>>>>>>>>>>>>>>>>>>
قوائم بايثون
مستوى الصعوبة: سهل
آخر تحديث: ٥ يناير ٢٠٢٢
القوائم هي مثل المصفوفات ذات الحجم الديناميكي ، معلنة بلغات أخرى (متجه في C ++ و ArrayList في Java). لا يجب أن تكون القوائم متجانسة دائمًا مما يجعلها أقوى أداة في Python . قد تحتوي قائمة واحدة على أنواع البيانات مثل الأعداد الصحيحة والسلاسل النصية وكذلك الكائنات. القوائم قابلة للتغيير ، وبالتالي يمكن تغييرها حتى بعد إنشائها.

القائمة في بايثون مرتبة ولها عدد محدد. تتم فهرسة العناصر الموجودة في القائمة وفقًا لتسلسل محدد ويتم فهرسة القائمة بحيث يكون الرقم 0 هو الفهرس الأول. لكل عنصر في القائمة مكانه المحدد في القائمة ، مما يسمح بتكرار العناصر في القائمة ، بحيث يكون لكل عنصر مكانه الخاص ومصداقيته.

ملاحظة - القوائم هي أداة مفيدة للحفاظ على تسلسل البيانات وزيادة التكرار عليها.

قائمة المحتويات: 

إنشاء قائمة
معرفة حجم القائمة
إضافة عناصر إلى قائمة: 
باستخدام طريقة append ()
باستخدام طريقة insert ()
باستخدام طريقة () extension
الوصول إلى العناصر من القائمة
إزالة العناصر من القائمة: 
باستخدام طريقة الإزالة ()
باستخدام طريقة pop ()
تشريح قائمة
قائمة الفهم
العمليات في القائمة
طرق القائمة
إنشاء قائمة
يمكن إنشاء القوائم في Python بمجرد وضع التسلسل داخل الأقواس المربعة []. بخلاف المجموعات ، لا تحتاج القائمة إلى وظيفة مضمنة لإنشاء قائمة. 

ملاحظة - بخلاف المجموعات ، قد تحتوي القائمة على عناصر قابلة للتغيير.  


# Python program to demonstrate
# Creation of List
 
# Creating a List
List = []
print("Blank List: ")
print(List)
 
# Creating a List of numbers
List = [10, 20, 14]
print("\nList of numbers: ")
print(List)
 
# Creating a List of strings and accessing
# using index
List = ["Geeks", "For", "Geeks"]
print("\nList Items: ")
print(List[0])
print(List[2])
 
# Creating a Multi-Dimensional List
# (By Nesting a list inside a List)
List = [['Geeks', 'For'], ['Geeks']]
print("\nMulti-Dimensional List: ")
print(List)
انتاج: 
قائمة فارغة:
[]

قائمة الأرقام:
[10 ، 20 ، 14]

قائمة المواد
المهوسون
المهوسون

قائمة متعددة الأبعاد:
[['Geeks'، 'For']، ['Geeks']]
 

إنشاء قائمة تحتوي على عدة عناصر مميزة أو مكررة
قد تحتوي القائمة على قيم مكررة مع مواضعها المميزة ، وبالتالي ، يمكن تمرير عدة قيم مميزة أو مكررة كتسلسل في وقت إنشاء القائمة.


# Creating a List with
# the use of Numbers
# (Having duplicate values)
List = [1, 2, 4, 4, 3, 3, 3, 6, 5]
print("\nList with the use of Numbers: ")
print(List)
 
# Creating a List with
# mixed type of values
# (Having numbers and strings)
List = [1, 2, 'Geeks', 4, 'For', 6, 'Geeks']
print("\nList with the use of Mixed Values: ")
print(List)
انتاج: 
قائمة باستخدام الأرقام:
[1 ، 2 ، 4 ، 4 ، 3 ، 3 ، 3 ، 6 ، 5]

قائمة باستخدام القيم المختلطة:
[1، 2، "Geeks"، 4، "For"، 6، "Geeks"]
 

معرفة حجم القائمة

# Creating a List
List1 = []
print(len(List1))
 
# Creating a List of numbers
List2 = [10, 20, 14]
print(len(List2))
انتاج: 
0
3
 

إضافة عناصر إلى قائمة
باستخدام طريقة append ()
يمكن إضافة العناصر إلى القائمة باستخدام وظيفة append () المضمنة. يمكن إضافة عنصر واحد فقط في المرة الواحدة إلى القائمة باستخدام طريقة append () ، ولإضافة عناصر متعددة باستخدام طريقة append () ، يتم استخدام الحلقات. يمكن أيضًا إضافة المجموعات إلى القائمة باستخدام طريقة الإلحاق لأن المجموعات غير قابلة للتغيير. بخلاف المجموعات ، يمكن أيضًا إضافة القوائم إلى القائمة الحالية باستخدام طريقة append ().


# Python program to demonstrate
# Addition of elements in a List
 
# Creating a List
List = []
print("Initial blank List: ")
print(List)
 
# Addition of Elements
# in the List
List.append(1)
List.append(2)
List.append(4)
print("\nList after Addition of Three elements: ")
print(List)
 
# Adding elements to the List
# using Iterator
for i in range(1, 4):
    List.append(i)
print("\nList after Addition of elements from 1-3: ")
print(List)
 
# Adding Tuples to the List
List.append((5, 6))
print("\nList after Addition of a Tuple: ")
print(List)
 
# Addition of List to a List
List2 = ['For', 'Geeks']
List.append(List2)
print("\nList after Addition of a List: ")
print(List)
انتاج: 
قائمة أولية فارغة:
[]

قائمة بعد إضافة ثلاثة عناصر:
[1، 2، 4]

قائمة بعد إضافة العناصر من 1-3:
[1 ، 2 ، 4 ، 1 ، 2 ، 3]

قائمة بعد إضافة Tuple:
[1 ، 2 ، 4 ، 1 ، 2 ، 3 ، (5 ، 6)]

القائمة بعد إضافة قائمة:
[1 ، 2 ، 4 ، 1 ، 2 ، 3 ، (5 ، 6) ، ['For' ، 'Geeks']]
 

باستخدام طريقة insert ()
تعمل طريقة append () فقط لإضافة العناصر في نهاية القائمة ، ولإضافة العناصر في الموضع المطلوب ، يتم استخدام طريقة insert (). بخلاف append () الذي يأخذ وسيطة واحدة فقط ، تتطلب طريقة insert () وسيطتين (موضع ، قيمة). 


# Python program to demonstrate
# Addition of elements in a List
  
# Creating a List
List = [1,2,3,4]
print("Initial List: ")
print(List)
 
# Addition of Element at
# specific Position
# (using Insert Method)
List.insert(3, 12)
List.insert(0, 'Geeks')
print("\nList after performing Insert Operation: ")
print(List)
انتاج: 
القائمة الأولية:
[1 ، 2 ، 3 ، 4]

قائمة بعد إجراء عملية الإدراج:
["المهوسون" ، 1 ، 2 ، 3 ، 12 ، 4]
 

باستخدام طريقة () extension
بخلاف أساليب الإلحاق () والإدراج () ، هناك طريقة أخرى لإضافة العناصر ، الامتداد () ، يتم استخدام هذه الطريقة لإضافة عناصر متعددة في نفس الوقت في نهاية القائمة.

ملاحظة - يمكن أن تضيف أساليب الإلحاق () و extension () العناصر فقط في النهاية.


# Python program to demonstrate
# Addition of elements in a List
 
# Creating a List
List = [1, 2, 3, 4]
print("Initial List: ")
print(List)
 
# Addition of multiple elements
# to the List at the end
# (using Extend Method)
List.extend([8, 'Geeks', 'Always'])
print("\nList after performing Extend Operation: ")
print(List)
انتاج: 
القائمة الأولية:
[1 ، 2 ، 3 ، 4]

قائمة بعد تنفيذ عملية التمديد:
[1 ، 2 ، 3 ، 4 ، 8 ، "المهوسون" ، "دائمًا"]
 

الوصول إلى العناصر من القائمة
من أجل الوصول إلى عناصر القائمة ، يرجى الرجوع إلى رقم الفهرس. استخدم عامل تشغيل الفهرس [] للوصول إلى عنصر في قائمة. يجب أن يكون الفهرس عددًا صحيحًا. يتم الوصول إلى القوائم المتداخلة باستخدام الفهرسة المتداخلة. 


# Python program to demonstrate
# accessing of element from list
 
# Creating a List with
# the use of multiple values
List = ["Geeks", "For", "Geeks"]
 
# accessing a element from the
# list using index number
print("Accessing a element from the list")
print(List[0])
print(List[2])
 
# Creating a Multi-Dimensional List
# (By Nesting a list inside a List)
List = [['Geeks', 'For'], ['Geeks']]
 
# accessing an element from the
# Multi-Dimensional List using
# index number
print("Accessing a element from a Multi-Dimensional list")
print(List[0][1])
print(List[1][0])
انتاج: 
الوصول إلى عنصر من القائمة
المهوسون
المهوسون
الوصول إلى عنصر من قائمة متعددة الأبعاد
ل
المهوسون
 

الفهرسة السلبية
في Python ، تمثل فهارس التسلسل السالب مواضع من نهاية المصفوفة. بدلاً من الاضطرار إلى حساب الإزاحة كما في القائمة [len (List) -3] ، يكفي فقط كتابة قائمة [-3]. الفهرسة السلبية تعني البدء من النهاية ، -1 تشير إلى العنصر الأخير ، -2 تشير إلى العنصر الأخير الثاني ، إلخ.


List = [1, 2, 'Geeks', 4, 'For', 6, 'Geeks']
 
# accessing an element using
# negative indexing
print("Accessing element using negative indexing")
 
# print the last element of list
print(List[-1])
 
# print the third last element of list
print(List[-3])
انتاج: 
الوصول إلى العنصر باستخدام الفهرسة السلبية
المهوسون
ل
 

إزالة العناصر من القائمة
باستخدام طريقة الإزالة ()
يمكن إزالة العناصر من القائمة باستخدام وظيفة الإزالة المضمنة () ولكن يظهر خطأ إذا لم يكن العنصر موجودًا في القائمة. تزيل طريقة Remove () عنصرًا واحدًا فقط في كل مرة ، ولإزالة مجموعة من العناصر ، يتم استخدام المكرر. طريقة الإزالة () تزيل العنصر المحدد.

ملاحظة - طريقة الإزالة في القائمة ستزيل التواجد الأول فقط للعنصر الذي تم البحث عنه.


# Python program to demonstrate
# Removal of elements in a List
 
# Creating a List
List = [1, 2, 3, 4, 5, 6,
        7, 8, 9, 10, 11, 12]
print("Initial List: ")
print(List)
 
# Removing elements from List
# using Remove() method
List.remove(5)
List.remove(6)
print("\nList after Removal of two elements: ")
print(List)
 
# Removing elements from List
# using iterator method
for i in range(1, 5):
    List.remove(i)
print("\nList after Removing a range of elements: ")
print(List)
انتاج: 
القائمة الأولية:
[1 ، 2 ، 3 ، 4 ، 5 ، 6 ، 7 ، 8 ، 9 ، 10 ، 11 ، 12]

قائمة بعد إزالة عنصرين:
[1 ، 2 ، 3 ، 4 ، 7 ، 8 ، 9 ، 10 ، 11 ، 12]

ضع قائمة بعد إزالة مجموعة من العناصر:
[7 ، 8 ، 9 ، 10 ، 11 ، 12]
 

باستخدام طريقة pop ()
يمكن أيضًا استخدام وظيفة Pop () لإزالة عنصر من القائمة وإعادته ، ولكن بشكل افتراضي يزيل العنصر الأخير فقط من القائمة ، لإزالة عنصر من موضع معين في القائمة ، يتم تمرير فهرس العنصر كحجة لطريقة البوب ​​().


List = [1,2,3,4,5]
 
# Removing element from the
# Set using the pop() method
List.pop()
print("\nList after popping an element: ")
print(List)
 
# Removing element at a
# specific location from the
# Set using the pop() method
List.pop(2)
print("\nList after popping a specific element: ")
print(List)
انتاج: 
قائمة بعد ظهور عنصر:
[1 ، 2 ، 3 ، 4]

قائمة بعد ظهور عنصر معين:
[1، 2، 4]
 

تشريح قائمة
في قائمة Python ، توجد طرق متعددة لطباعة القائمة بأكملها بكل العناصر ، ولكن لطباعة نطاق محدد من العناصر من القائمة ، نستخدم عملية Slice . يتم تنفيذ عملية الشرائح على القوائم باستخدام نقطتين (:). لطباعة العناصر من البداية إلى النطاق ، استخدم [: الفهرس] ، لطباعة العناصر من الاستخدام النهائي [: -الفهرس] ، لطباعة العناصر من فهرس معين حتى النهاية ، استخدم [الفهرس:] ، لطباعة العناصر داخل النطاق ، استخدم [Start Index: End Index] ولطباعة القائمة بأكملها باستخدام عملية التقطيع ، استخدم [:]. علاوة على ذلك ، لطباعة القائمة بأكملها بترتيب عكسي ، استخدم [:: - 1].

ملاحظة - لطباعة عناصر القائمة من النهاية الخلفية ، استخدم الفهارس السلبية. 

تشريح قائمة بيثون


# Python program to demonstrate
# Removal of elements in a List
 
# Creating a List
List = ['G', 'E', 'E', 'K', 'S', 'F',
        'O', 'R', 'G', 'E', 'E', 'K', 'S']
print("Initial List: ")
print(List)
 
# Print elements of a range
# using Slice operation
Sliced_List = List[3:8]
print("\nSlicing elements in a range 3-8: ")
print(Sliced_List)
 
# Print elements from a
# pre-defined point to end
Sliced_List = List[5:]
print("\nElements sliced from 5th "
      "element till the end: ")
print(Sliced_List)
 
# Printing elements from
# beginning till end
Sliced_List = List[:]
print("\nPrinting all elements using slice operation: ")
print(Sliced_List)
انتاج: 
القائمة الأولية:
['G'، 'E'، 'E'، 'K'، 'S'، 'F'، 'O'، 'R'، 'G'، 'E'، 'E'، 'K'، ' س']

عناصر التقطيع في نطاق 3-8:
['K'، 'S'، 'F'، 'O'، 'R']

العناصر المقطعة من العنصر الخامس حتى النهاية:
['F'، 'O'، 'R'، 'G'، 'E'، 'E'، 'K'، 'S']

طباعة جميع العناصر باستخدام عملية الشريحة:
['G'، 'E'، 'E'، 'K'، 'S'، 'F'، 'O'، 'R'، 'G'، 'E'، 'E'، 'K'، ' س']
 

تشريح قائمة الفهرس السلبي

# Creating a List
List = ['G', 'E', 'E', 'K', 'S', 'F',
        'O', 'R', 'G', 'E', 'E', 'K', 'S']
print("Initial List: ")
print(List)
 
# Print elements from beginning
# to a pre-defined point using Slice
Sliced_List = List[:-6]
print("\nElements sliced till 6th element from last: ")
print(Sliced_List)
 
# Print elements of a range
# using negative index List slicing
Sliced_List = List[-6:-1]
print("\nElements sliced from index -6 to -1")
print(Sliced_List)
 
# Printing elements in reverse
# using Slice operation
Sliced_List = List[::-1]
print("\nPrinting List in reverse: ")
print(Sliced_List)
انتاج: 
القائمة الأولية:
['G'، 'E'، 'E'، 'K'، 'S'، 'F'، 'O'، 'R'، 'G'، 'E'، 'E'، 'K'، ' س']

العناصر المقطعة حتى العنصر السادس من الأخير:
['G'، 'E'، 'E'، 'K'، 'S'، 'F'، 'O']

العناصر مقطعة من الفهرس -6 إلى -1
['R'، 'G'، 'E'، 'E'، 'K']

قائمة الطباعة في الاتجاه المعاكس:
['S'، 'K'، 'E'، 'E'، 'G'، 'R'، 'O'، 'F'، 'S'، 'K'، 'E'، 'E'، ' G ']
 

قائمة الفهم
يتم استخدام List comprehensions لإنشاء قوائم جديدة من متكررات أخرى مثل المجموعات ، والسلاسل النصية ، والمصفوفات ، والقوائم ، وما إلى ذلك.
يتكون فهم القائمة من أقواس تحتوي على التعبير ، والتي يتم تنفيذها لكل عنصر مع حلقة for للتكرار فوق كل عنصر. 

بناء الجملة:

newList = [تعبير (عنصر) للعنصر في شرط if oldList]

مثال: 


# Python program to demonstrate list
# comprehension in Python
 
# below list contains square of all
# odd numbers from range 1 to 10
odd_square = [x ** 2 for x in range(1, 11) if x % 2 == 1]
print(odd_square)
انتاج:

[1 ، 9 ، 25 ، 49 ، 81]
لفهم أفضل ، الكود أعلاه مشابه لـ - 


# for understanding, above generation is same as,
odd_square = []
 
for x in range(1, 11):
    if x % 2 == 1:
        odd_square.append(x**2)
 
print(odd_square)
انتاج:

[1 ، 9 ، 25 ، 49 ، 81]
راجع المقالات أدناه للحصول على معلومات مفصلة حول List Comprehension.

فهم قائمة بايثون وتقطيعها
قائمة شاملة متداخلة في بايثون
قائمة الفهم والنظام () في بايثون
العمليات في القائمة
البحث عن طول القائمة
كرر قائمة في بايثون
تسلسل قائمتين في بايثون
قائمة اختبار العضوية
طرق القائمة
دور	وصف
ألحق()	أضف عنصرًا إلى نهاية القائمة
تمديد()	أضف جميع عناصر القائمة إلى قائمة أخرى
إدراج()	أدخل عنصرًا في الفهرس المحدد
إزالة()	يزيل عنصر من القائمة
بوب ()	يزيل ويعيد عنصر في الفهرس المحدد
صافي()	يزيل كافة العناصر من القائمة
فهرس()	تُرجع فهرس العنصر المطابق الأول
عدد()	إرجاع عدد العناصر التي تم تمريرها كوسيطة
فرز()	فرز العناصر في قائمة بترتيب تصاعدي
يعكس()	عكس ترتيب العناصر في القائمة
ينسخ()	إرجاع نسخة من القائمة
وظائف مدمجة مع القائمة
دور	وصف
خفض()	تطبيق دالة معينة تم تمريرها في وسيطتها على جميع عناصر القائمة وتخزين النتيجة الوسيطة وإرجاع قيمة التجميع النهائية فقط
مجموع()	تلخيص الأرقام الموجودة في القائمة
أمر ()	تُرجع عددًا صحيحًا يمثل نقطة رمز Unicode لحرف Unicode المحدد
cmp ()	تقوم هذه الوظيفة بإرجاع 1 إذا كانت القائمة الأولى "أكبر" من القائمة الثانية
الأعلى()	إرجاع العنصر الأقصى لقائمة معينة
دقيقة ()	إرجاع عنصر الحد الأدنى من قائمة معينة
الكل()	إرجاع صحيح إذا كانت كل العناصر صحيحة أو إذا كانت القائمة فارغة
أي()	إرجاع صحيح إذا كان أي عنصر من عناصر القائمة صحيحًا. إذا كانت القائمة فارغة ، فارجع خطأ
لين ()	يُرجع طول القائمة أو حجم القائمة
عد ()	إرجاع كائن تعداد القائمة
جمع()	تطبيق دالة معينة تم تمريرها في وسيطتها على جميع عناصر القائمة بإرجاع قائمة تحتوي على النتائج الوسيطة
منقي()	يختبر ما إذا كان كل عنصر في القائمة صحيحًا أم لا
خريطة()	يُرجع قائمة بالنتائج بعد تطبيق الوظيفة المحددة على كل عنصر من عنصر تكراري معين
لامدا ()	يمكن أن تحتوي هذه الوظيفة على أي عدد من الوسيطات ولكن تعبير واحد فقط يتم تقييمه وإرجاعه.
المقالات الأخيرة في القوائم
المزيد من مقاطع الفيديو على قوائم Python: قائمة Python - المجموعة 2

المزيد عن قائمة بايثون -
إنشاء قائمة ثلاثية الأبعاد
كرر قائمة في بايثون
كرر على قوائم متعددة في وقت واحد
العمل الداخلي للقائمة في بايثون
تقطيع بايثون
Python List Comprehensions مقابل Generator Expressions
طرق القائمة في Python - المجموعة 1 المجموعة 2
تعبير لامدا ووظيفة التصفية
روابط مفيدة: 

المقالات الأخيرة على قائمة بايثون
دروس بايثون
برامج إخراج Python في القائمة: المجموعة 6 ، المجموعة 11 ، المجموعة 12 ، المجموعة 13
أسئلة متعددة الخيارات