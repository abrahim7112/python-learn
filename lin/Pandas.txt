
دروس الباندا
مستوى الصعوبة: سهل
آخر تحديث: 29 فبراير 2020
Pandas هي مكتبة مفتوحة المصدر تم إنشاؤها فوق مكتبة NumPy. إنها حزمة Python التي توفر هياكل وعمليات بيانات متنوعة لمعالجة البيانات الرقمية والسلاسل الزمنية. إنه شائع بشكل أساسي لاستيراد البيانات وتحليلها بشكل أسهل. Pandas سريع وله أداء عالي وإنتاجية للمستخدمين.

الباندا- تعليمي
سيساعد برنامج Pandas التعليمي هذا في تعلم Pandas من الأساسيات لتعزيز عمليات تحليل البيانات ، بما في ذلك جميع الوظائف الضرورية الموضحة بالتفصيل.

جدول المحتويات

مقدمة
خلق الأشياء
عرض البيانات
اختيار
التلاعب بالبيانات
تجميع البيانات
الدمج والانضمام والتسلسل
العمل مع التاريخ والوقت
العمل مع بيانات النص
العمل مع ملفات CSV و Excel
عمليات
التصور
التطبيقات والمشاريع
متنوع
الباندا تدرب على المشاكل مع الحلول!
المقالات الأخيرة عن بايثون الباندا!

مقدمة
مقدمة عن الباندا في بايثون
كيفية تثبيت Python Pandas على نظامي التشغيل Windows و Linux؟
كيفية استخدام Jupyter Notebook - دليل نهائي
خلق الأشياء
بايثون | Pandas DataFrame
إنشاء Pandas DataFrame
بايثون | سلسلة الباندا
إنشاء سلسلة الباندا
عرض البيانات
اعرض الصفوف العلوية للإطار
اعرض الصفوف السفلية للإطار
عرض التفاصيل الإحصائية الأساسية
تحويل الباندا DataFrame إلى صفيف numpy
تحويل سلسلة الباندا إلى صفيف numpy
تحويل كائن سلسلة أو إطار بيانات إلى مصفوفة Numpy باستخدام .as_matrix ().
اختيار
التعامل مع الصفوف والأعمدة في Pandas DataFrame
كيفية تحديد عدة أعمدة في إطار بيانات الباندا
بايثون | Pandas استخراج الصفوف باستخدام .loc []
بايثون | استخراج الصفوف باستخدام Pandas .iloc []
فهرسة واختيار البيانات مع الباندا
الفهرسة المنطقية في الباندا
تقنية التقطيع القائمة على الملصق والصحيح باستخدام DataFrame.ix []
👉🏽 المقالات الأخيرة عن فهرسة الباندا

التلاعب بالبيانات
إضافة عمود جديد إلى DataFrame الموجود في Pandas
بايثون | احذف الصفوف / الأعمدة من DataFrame
اقتطاع DataFrame قبل وبعد بعض قيم الفهرس
اقتطاع سلسلة قبل وبعد بعض قيم الفهرس
التكرار على الصفوف والأعمدة في Pandas DataFrame
العمل مع البيانات المفقودة في الباندا
يفرز إطار بيانات في Pandas | مجموعة 1
يفرز إطار بيانات في Pandas | مجموعة 2
تجميع البيانات
مجموعة الباندا
صفوف التجمع في الباندا
الجمع بين عدة أعمدة في Pandas groupby مع القاموس
الدمج والانضمام والتسلسل
بايثون | دمج الباندا والانضمام والتسلسل
سلاسل متسلسلة
إلحاق صفوف بإطار البيانات
اربط سلسلتين أو أكثر
قم بإلحاق واحد أو مجموعة من المؤشرات
اجمع بين سلسلتين في سلسلة واحدة
أضف صفًا في الأعلى في Pandas DataFrame
انضم إلى جميع العناصر الموجودة في القائمة في سلسلة
انضم إلى عمودين نصيين في عمود واحد في Pandas
العمل مع التاريخ والوقت
بايثون | العمل مع التاريخ والوقت باستخدام الباندا
الطابع الزمني باستخدام الباندا
الوقت الحالي باستخدام الباندا
تحويل الطابع الزمني إلى تنسيق ISO
احصل على كائن التاريخ والوقت باستخدام Pandas
استبدل قيم الأعضاء للطابع الزمني المحدد
تحويل سلسلة Date time إلى Python Date time object باستخدام Pandas
احصل على فهرس تاريخ وتاريخ ثابت باستخدام Pandas

<<<<<<<<<<<<<<<<<<<<<
مقدمة عن الباندا في بايثون
مستوى الصعوبة: أساسي
آخر تحديث: 09 ديسمبر 2021
Pandas هي مكتبة مفتوحة المصدر تم إنشاؤها أساسًا للعمل مع البيانات العلائقية أو المصنفة بسهولة وبشكل حدسي. يوفر العديد من هياكل البيانات والعمليات لمعالجة البيانات العددية والسلاسل الزمنية. تم بناء هذه المكتبة أعلى مكتبة NumPy. Pandas سريع وله أداء عالي وإنتاجية للمستخدمين.

جدول المحتويات  :

تاريخ
مزايا
ابدء 
مسلسل
داتافريم
لماذا يتم استخدام الباندا لعلوم البيانات
تاريخ
تم تطوير Pandas في البداية بواسطة Wes McKinney في عام 2008 أثناء عمله في AQR Capital Management. أقنع AQR بالسماح له بفتح مصدر الباندا. انضمت موظفة أخرى في AQR ، وهي Chang She ، لتصبح المساهم الرئيسي الثاني في المكتبة في عام 2012. وبمرور الوقت تم إصدار العديد من إصدارات الباندا. أحدث إصدار من الباندا هو 1.3.4

مزايا 
سريع وفعال في معالجة البيانات وتحليلها.
يمكن تحميل البيانات من كائنات الملفات المختلفة.
سهولة معالجة البيانات المفقودة (الممثلة كـ NaN) في بيانات الفاصلة العائمة وكذلك بيانات الفاصلة غير العائمة
تغيير الحجم: يمكن إدراج الأعمدة وحذفها من DataFrame والكائنات ذات الأبعاد الأعلى
دمج مجموعة البيانات والانضمام إليها.
إعادة تشكيل مرنة وتمحور مجموعات البيانات
يوفر وظائف السلاسل الزمنية.
مجموعة قوية حسب الوظيفة لأداء عمليات الانقسام والتطبيق والجمع على مجموعات البيانات.
ابدء
بعد تثبيت الباندا في النظام ، تحتاج إلى استيراد المكتبة. يتم استيراد هذه الوحدة بشكل عام على النحو التالي:

استيراد الباندا كما pd
هنا ، يشار إلى pd باسم مستعار لباندا. ومع ذلك ، ليس من الضروري استيراد المكتبة باستخدام الاسم المستعار ، فهي تساعد فقط في كتابة رمز أقل في كل مرة يتم فيها استدعاء طريقة أو خاصية. 

توفر Pandas بشكل عام هيكلين للبيانات لمعالجة البيانات ، وهما: 

مسلسل
داتافريم
مسلسل:
سلسلة Pandas عبارة عن مصفوفة ذات بعد واحد قادرة على الاحتفاظ بالبيانات من أي نوع (عدد صحيح ، سلسلة ، عدد عشري ، كائنات بيثون ، إلخ). تسمى تسميات المحور بشكل جماعي الفهارس. سلسلة Pandas ليست سوى عمود في ورقة Excel. لا يلزم أن تكون الملصقات فريدة ولكن يجب أن تكون من النوع القابل للتجزئة. يدعم الكائن كلاً من الفهرسة المعتمدة على التصنيف والأعداد الصحيحة ويوفر مجموعة من الأساليب لإجراء العمليات التي تتضمن الفهرس.

سلسلة الباندا

ملاحظة: لمزيد من المعلومات ، راجع Python | سلسلة الباندا 

إنشاء سلسلة
في العالم الحقيقي ، سيتم إنشاء سلسلة Pandas عن طريق تحميل مجموعات البيانات من التخزين الحالي ، ويمكن أن يكون التخزين عبارة عن قاعدة بيانات SQL ، ملف CSV ، ملف Excel. يمكن إنشاء سلسلة Pandas من القوائم والقاموس ومن قيمة عددية وما إلى ذلك.

مثال:

import pandas as pd
import numpy as np
 
 
# Creating empty series
ser = pd.Series()
   
print(ser)
 
# simple array
data = np.array(['g', 'e', 'e', 'k', 's'])
   
ser = pd.Series(data)
print(ser)
انتاج:

سلسلة ([] ، نوع dtype: float64)
0 غ
1 هـ
2 هـ
3 ك
4 ق
نوع dtype: كائن
ملاحظة: لمزيد من المعلومات ، راجع إنشاء سلسلة Pandas

داتافريم
Pandas DataFrame عبارة عن بنية بيانات جدولية غير متجانسة ذات أبعاد ثنائية الحجم قابلة للتغيير مع محاور مسماة (صفوف وأعمدة). إطار البيانات عبارة عن هيكل بيانات ثنائي الأبعاد ، أي تتم محاذاة البيانات بطريقة جدولية في صفوف وأعمدة. يتكون Pandas DataFrame من ثلاثة مكونات رئيسية هي البيانات والصفوف والأعمدة.

الباندا- dataframe

ملاحظة: لمزيد من المعلومات ، راجع Python | Pandas DataFrame 

إنشاء DataFrame:
في العالم الحقيقي ، سيتم إنشاء Pandas DataFrame عن طريق تحميل مجموعات البيانات من التخزين الحالي ، ويمكن أن يكون التخزين عبارة عن قاعدة بيانات SQL ، ملف CSV ، ملف Excel. يمكن إنشاء Pandas DataFrame من القوائم والقاموس ومن قائمة القواميس ، إلخ.

مثال:

import pandas as pd
   
# Calling DataFrame constructor
df = pd.DataFrame()
print(df)
 
# list of strings
lst = ['Geeks', 'For', 'Geeks', 'is', 
            'portal', 'for', 'Geeks']
   
# Calling DataFrame constructor on list
df = pd.DataFrame(lst)
print(df)
انتاج:

DataFrame فارغ
الأعمدة: []
فهرس: []
        0
0 المهوسون
1 من أجل
2 المهوسون
3 هو
4 بوابة
5 من أجل
6 المهوسون
ملاحظة: لمزيد من المعلومات ، راجع تكوين Pandas DataFrame 

لماذا يتم استخدام الباندا لعلوم البيانات
تُستخدم الباندا عمومًا لعلوم البيانات ولكن هل تساءلت عن السبب؟ وذلك لأن حيوانات الباندا تستخدم جنبًا إلى جنب مع المكتبات الأخرى المستخدمة في علم البيانات. إنه مبني على الجزء العلوي من مكتبة NumPy مما يعني أنه يتم استخدام أو نسخ الكثير من هياكل NumPy في Pandas. غالبًا ما تُستخدم البيانات التي تنتجها Pandas كمدخلات لوظائف التخطيط في Matplotlib ، والتحليل الإحصائي في SciPy ، وخوارزميات التعلم الآلي في Scikit- Learn .
يمكن تشغيل برنامج Pandas من أي محرر نصوص ، لكن يوصى باستخدام Jupyter Notebook لهذا باعتباره Jupyter نظرًا لإمكانية تنفيذ التعليمات البرمجية في خلية معينة بدلاً من تنفيذ الملف بأكمله. يوفر Jupyter أيضًا طريقة سهلة لتصور إطارات بيانات الباندا والمؤامرات.

ملاحظة: لمزيد من المعلومات حول Jupyter Notebook ، راجع كيفية استخدام Jupyter Notebook - دليل نهائي 



<<<<<<<<<<<<<<<<<<<<<
كيفية تثبيت Python Pandas على نظامي التشغيل Windows و Linux؟
مستوى الصعوبة: سهل
آخر تحديث: 27 فبراير 2020
Pandas in Python هي حزمة تمت كتابتها لتحليل البيانات ومعالجتها. تقدم Pandas عمليات وهياكل بيانات مختلفة لإجراء معالجات رقمية للبيانات والسلاسل الزمنية. Pandas هي مكتبة مفتوحة المصدر مبنية على مكتبات Numpy. تشتهر مكتبة Pandas بإنتاجيتها العالية وأدائها العالي. تحظى Pandas بشعبية لأنها تجعل استيراد البيانات وتحليلها أسهل بكثير.

يمكن كتابة برامج Pandas على أي محرر نص عادي مثل notepad أو notepad ++ أو أي شيء من هذا القبيل وحفظه بامتداد .py . بادئ ذي بدء ، كتابة أكواد Pandas وإجراء العديد من العمليات المفيدة والمثيرة للاهتمام ، يجب تثبيت Python على نظامهم. يمكن القيام بذلك باتباع التعليمات خطوة بخطوة الواردة أدناه:

ماذا لو كانت لغة بايثون موجودة بالفعل؟ دعونا تحقق
للتحقق مما إذا كان جهازك مثبتًا مسبقًا مع Python أم لا ، ما عليك سوى الانتقال إلى سطر الأوامر (ابحث عن cmd في مربع الحوار Run ( + R ).
الآن قم بتشغيل الأمر التالي:

بيثون - الإصدار
إذا تم تثبيت Python بالفعل ، فسيتم إنشاء رسالة مع توفر إصدار Python.
python-version-check-windows

لتثبيت Python ، يرجى زيارة: كيفية تثبيت Python على نظامي التشغيل Windows أو Linux ؟

تحميل وتثبيت Pandas
يمكن تثبيت Pandas بعدة طرق على نظامي التشغيل Windows و Linux. طرق مختلفة مختلفة مذكورة أدناه:

شبابيك
يمكن تثبيت Python Pandas على نظام Windows بطريقتين:

باستخدام النقطة
باستخدام اناكوندا
قم بتثبيت Pandas باستخدام Pip
PIP هو نظام إدارة حزم يستخدم لتثبيت وإدارة حزم البرامج / المكتبات المكتوبة بلغة Python. يتم تخزين هذه الملفات في "مستودع على الإنترنت" كبير يسمى Python Package Index (PyPI).
يمكن تثبيت Pandas باستخدام PIP باستخدام الأمر التالي:

نقطة تثبيت الباندا
تركيب PIP-Pandas-02

قم بتثبيت Pandas باستخدام Anaconda
Anaconda هو برنامج مفتوح المصدر يحتوي على Jupyter و spyder وما إلى ذلك والتي تستخدم لمعالجة البيانات الكبيرة وتحليلات البيانات والحوسبة العلمية الثقيلة. إذا لم يكن نظامك مجهزًا مسبقًا بـ Anaconda Navigator ، فيمكنك معرفة كيفية تثبيت Anaconda Navigator على نظامي التشغيل Windows أو Linux ؟
 
خطوات تثبيت Pandas باستخدام Anaconda Navigator:
 
الخطوة 1: ابحث عن Anaconda Navigator في قائمة ابدأ وافتحه.
اناكوندا نافيجيتور 011
 
الخطوة 2: انقر فوق علامة التبويب "البيئة " ثم انقر فوق الزر " إنشاء " لإنشاء بيئة Pandas جديدة.
تركيب اناكوندا-بانداس -01
 
الخطوه 3:أعط اسمًا لبيئتك ، مثل Pandas ثم اختر إصدار python للتشغيل في البيئة. انقر الآن على الزر " إنشاء " لإنشاء Pandas Environment.
تركيب اناكوندا الباندا 13
 
الخطوة 4: انقر الآن على Pandas Environment التي تم إنشاؤها لتنشيطها.
تركيب اناكوندا-بانداس 14
 
الخطوة 5: في القائمة أعلاه أسماء الحزم ، حدد الكل لتصفية جميع الحزم.
تركيب اناكوندا-بانداس -15
 
الخطوة 6: الآن في شريط البحث ، ابحث عن " Pandas ". حدد حزمة Pandas للتثبيت.
تركيب اناكوندا-بانداس -16
 
الخطوة 7: الآن انقر بزر الماوس الأيمن فوق مربع الاختيار الموجود قبل اسم الحزمة ثم انتقل إلى "وضع علامة لتثبيت إصدار معين ". الآن حدد الإصدار الذي تريد تثبيته.
تركيب اناكوندا-بانداس -17
 
الخطوة 8: انقر فوق الزر " تطبيق " لتثبيت حزمة Pandas.
اناكوندا-تركيب-بانداس -18
 
الخطوة 9: قم بإنهاء عملية التثبيت بالنقر فوق الزر " تطبيق ".
Anaconda-Installation-Pandas-19
 
الخطوة 10: الآن لفتح Pandas Environment ، انقر فوق Green Arrow على يمين اسم الحزمة وحدد وحدة التحكم التي تريد أن تبدأ بها برمجة Pandas.
Anaconda-Installation-Pandas-19
 
نافذة Pandas الطرفية:
تركيب اناكوندا-بانداس -10

لينكس
لتثبيت Pandas على Linux ، ما عليك سوى كتابة الأمر التالي في Terminal Window واضغط على Enter. سيقوم Linux تلقائيًا بتنزيل الحزم والملفات المطلوبة وتثبيتها لتشغيل Pandas Environment في Python:

pip3 تثبيت الباندا
pip3 install pandas 

<<<<<<<<<<<<<<<<<<<<<
بايثون | Pandas DataFrame
تاريخ التحديث الأخير: ١٠ يناير ٢٠١٩
Pandas DataFrame عبارة عن بنية بيانات جدولية غير متجانسة ذات أبعاد ثنائية الحجم قابلة للتغيير مع محاور مسماة (صفوف وأعمدة). إطار البيانات عبارة عن هيكل بيانات ثنائي الأبعاد ، أي تتم محاذاة البيانات بطريقة جدولية في صفوف وأعمدة. يتكون Pandas DataFrame من ثلاثة مكونات رئيسية هي البيانات والصفوف والأعمدة .



سوف نحصل على نظرة ثاقبة حول كل هذه العمليات الأساسية التي يمكن إجراؤها على Pandas DataFrame:

إنشاء DataFrame
التعامل مع الصفوف والأعمدة
فهرسة واختيار البيانات
العمل مع البيانات المفقودة
التكرار على الصفوف والأعمدة
إنشاء Pandas DataFrame
في العالم الحقيقي ، سيتم إنشاء Pandas DataFrame عن طريق تحميل مجموعات البيانات من التخزين الحالي ، ويمكن أن يكون التخزين عبارة عن قاعدة بيانات SQL وملف CSV وملف Excel. يمكن إنشاء Pandas DataFrame من القوائم والقاموس ومن قائمة القاموس وما إلى ذلك. يمكن إنشاء إطار البيانات بطرق مختلفة فيما يلي بعض الطرق التي ننشئ بها إطار بيانات:

إنشاء إطار بيانات باستخدام القائمة : يمكن إنشاء إطار البيانات باستخدام قائمة واحدة أو قائمة قوائم.

# import pandas as pd
import pandas as pd
 
# list of strings
lst = ['Geeks', 'For', 'Geeks', 'is', 
            'portal', 'for', 'Geeks']
 
# Calling DataFrame constructor on list
df = pd.DataFrame(lst)
print(df)
تشغيل على IDE
الإخراج:

 
إنشاء DataFrame من ديكت من ndarray / القوائم : لإنشاء إطار بيانات من قائمة / قائمة narray ، يجب أن يكون كل إطار Narray بنفس الطول. إذا تم تمرير الفهرس ، فيجب أن يكون مؤشر الطول مساويًا لطول المصفوفات. إذا لم يتم تمرير أي فهرس ، فسيكون الفهرس بشكل افتراضي النطاق (n) حيث n هو طول الصفيف.

# Python code demonstrate creating 
# DataFrame from dict narray / lists 
# By default addresses.
 
import pandas as pd
 
# intialise data of lists.
data = {'Name':['Tom', 'nick', 'krish', 'jack'],
        'Age':[20, 21, 19, 18]}
 
# Create DataFrame
df = pd.DataFrame(data)
 
# Print the output.
print(df)
تشغيل على IDE
انتاج:


 
لمزيد من التفاصيل ، راجع إنشاء Pandas DataFrame

التعامل مع الصفوف والأعمدة
إطار البيانات عبارة عن هيكل بيانات ثنائي الأبعاد ، أي تتم محاذاة البيانات بطريقة جدولية في صفوف وأعمدة. يمكننا إجراء العمليات الأساسية على الصفوف / الأعمدة مثل التحديد والحذف والإضافة وإعادة التسمية.

اختيار العمود : من أجل تحديد عمود في Pandas DataFrame ، يمكننا إما الوصول إلى الأعمدة عن طريق الاتصال بها باسم أعمدتها.

# Import pandas package
import pandas as pd
 
# Define a dictionary containing employee data
data = {'Name':['Jai', 'Princi', 'Gaurav', 'Anuj'],
        'Age':[27, 24, 22, 32],
        'Address':['Delhi', 'Kanpur', 'Allahabad', 'Kannauj'],
        'Qualification':['Msc', 'MA', 'MCA', 'Phd']}
 
# Convert the dictionary into DataFrame 
df = pd.DataFrame(data)
 
# select two columns
print(df[['Name', 'Qualification']])
تشغيل على IDE
الإخراج: تحديد

 
الصف : توفر Pandas طريقة فريدة لاسترداد الصفوف من إطار البيانات. DataFrame.loc[]الطريقة المستخدمة لاسترداد الصفوف من Pandas DataFrame. يمكن أيضًا تحديد الصفوف عن طريق تمرير موقع عدد صحيح إلى وظيفة iloc [] .

ملاحظة: سنستخدم nba.csvالملف في الأمثلة أدناه.

# importing pandas package
import pandas as pd
 
# making data frame from csv file
data = pd.read_csv("nba.csv", index_col ="Name")
 
# retrieving row by loc method
first = data.loc["Avery Bradley"]
second = data.loc["R.J. Hunter"]
 
 
print(first, "\n\n\n", second)
الإخراج:
كما هو موضح في صورة الإخراج ، تم إرجاع سلسلتين نظرًا لوجود معامل واحد فقط في كلتا المرات.

لمزيد من التفاصيل ، راجع التعامل مع الصفوف والأعمدة
 

فهرسة واختيار البيانات
الفهرسة في الباندا تعني ببساطة اختيار صفوف وأعمدة معينة من البيانات من DataFrame. قد تعني الفهرسة تحديد كل الصفوف وبعض الأعمدة ، وبعض الصفوف وجميع الأعمدة ، أو بعض كل من الصفوف والأعمدة. يمكن أيضًا أن تُعرف الفهرسة باسم تحديد المجموعة الفرعية .

فهرسة إطار البيانات باستخدام عامل الفهرسة []:
يُستخدم عامل الفهرسة للإشارة إلى الأقواس المربعة التي تلي الكائن. تستخدم الفهرسة أيضًا عامل الفهرسة لإجراء التحديدات .loc. .ilocفي عامل الفهرسة هذا ، يجب الرجوع إلى df [].

اختيار أعمدة واحدة
لتحديد عمود واحد ، نقوم ببساطة بوضع اسم العمود بين القوسين

# importing pandas package
import pandas as pd
 
# making data frame from csv file
data = pd.read_csv("nba.csv", index_col ="Name")
 
# retrieving columns by indexing operator
first = data["Age"]
 
 
 
print(first)
الإخراج:

 
فهرسة DataFrame باستخدام .loc[ ]:
تحدد هذه الوظيفة البيانات حسب تسمية الصفوف والأعمدة. يقوم df.locالمفهرس بتحديد البيانات بطريقة مختلفة عن طريقة عامل الفهرسة فقط. يمكنه تحديد مجموعات فرعية من الصفوف أو الأعمدة. يمكنه أيضًا تحديد مجموعات فرعية من الصفوف والأعمدة في وقت واحد.

اختيار صف واحد
من أجل تحديد صف واحد باستخدام .loc[]، نضع تسمية صف واحد في .locدالة.

# importing pandas package
import pandas as pd
 
# making data frame from csv file
data = pd.read_csv("nba.csv", index_col ="Name")
 
# retrieving row by loc method
first = data.loc["Avery Bradley"]
second = data.loc["R.J. Hunter"]
 
 
print(first, "\n\n\n", second)
الإخراج:
كما هو موضح في صورة الإخراج ، تم إرجاع سلسلتين نظرًا لوجود معامل واحد فقط في كلتا المرات.

 
فهرسة DataFrame باستخدام .iloc[ ]:
تتيح لنا هذه الوظيفة استرداد الصفوف والأعمدة حسب الموضع. للقيام بذلك ، سنحتاج إلى تحديد مواضع الصفوف التي نريدها ، ومواضع الأعمدة التي نريدها أيضًا. df.iloc المفهرس مشابه جدًا ولكنه يستخدم df.loc فقط مواقع الأعداد الصحيحة لإجراء التحديدات الخاصة به.

اختيار صف واحد
من أجل تحديد صف واحد باستخدام .iloc[]، يمكننا تمرير عدد صحيح واحد .iloc[]للعمل.

import pandas as pd
 
# making data frame from csv file
data = pd.read_csv("nba.csv", index_col ="Name")
 
 
# retrieving rows by iloc method 
row2 = data.iloc[3] 
 
 
 
print(row2)
الإخراج:

 
لمزيد من التفاصيل الرجوع

فهرسة واختيار البيانات مع الباندا
الفهرسة المنطقية في الباندا
 

العمل مع البيانات المفقودة
يمكن أن تحدث البيانات المفقودة عندما لا يتم توفير معلومات لعنصر واحد أو أكثر أو لوحدة كاملة. البيانات المفقودة هي مشكلة كبيرة جدًا في سيناريو الحياة الواقعية. يمكن أن تشير البيانات المفقودة أيضًا إلى قيم NA (غير متوفرة) في الباندا.

التحقق من القيم المفقودة باستخدام isnull()وnotnull() :
من أجل التحقق من القيم المفقودة في Pandas DataFrame ، نستخدم دالة isnull()و notnull(). تساعد كلتا الوظيفتين في التحقق مما إذا كانت القيمة NaNكذلك أم لا. يمكن أيضًا استخدام هذه الوظيفة في سلسلة Pandas للعثور على القيم الخالية في سلسلة.

# importing pandas as pd
import pandas as pd
 
# importing numpy as np
import numpy as np
 
# dictionary of lists
dict = {'First Score':[100, 90, np.nan, 95],
        'Second Score': [30, 45, 56, np.nan],
        'Third Score':[np.nan, 40, 80, 98]}
 
# creating a dataframe from list
df = pd.DataFrame(dict)
 
# using isnull() function  
df.isnull()
المخرجات:

 
تعبئة القيم المفقودة باستخدام fillna()، replace()ولكيinterpolate() : نملأ القيم الخالية في مجموعات البيانات ،
نستخدم هذه الوظائف ونعمل على استبدال قيم NaN ببعض القيم الخاصة بها . تساعد كل هذه الوظائف في ملء القيم الخالية في مجموعات البيانات الخاصة بإطار البيانات. تُستخدم الدالة Interpolate () أساسًا لملء القيم في إطار البيانات ولكنها تستخدم تقنيات الاستيفاء المختلفة لملء القيم المفقودة بدلاً من ترميز القيمة.fillna()replace()interpolate()NA

# importing pandas as pd
import pandas as pd
 
# importing numpy as np
import numpy as np
 
# dictionary of lists
dict = {'First Score':[100, 90, np.nan, 95],
        'Second Score': [30, 45, 56, np.nan],
        'Third Score':[np.nan, 40, 80, 98]}
 
# creating a dataframe from dictionary
df = pd.DataFrame(dict)
 
# filling missing value using fillna()  
df.fillna(0)
الإخراج:

 
إسقاط القيم المفقودة باستخدام dropna():
لإسقاط القيم الفارغة من إطار البيانات ، استخدمنا dropna()الوظيفة هذه الصفوف / أعمدة مجموعات البيانات ذات القيم الخالية بطرق مختلفة.

# importing pandas as pd
import pandas as pd
 
# importing numpy as np
import numpy as np
 
# dictionary of lists
dict = {'First Score':[100, 90, np.nan, 95],
        'Second Score': [30, np.nan, 45, 56],
        'Third Score':[52, 40, 80, 98],
        'Fourth Score':[np.nan, np.nan, np.nan, 65]}
 
# creating a dataframe from dictionary
df = pd.DataFrame(dict)
   
df

نقوم الآن بإسقاط الصفوف بقيمة نان واحدة على الأقل (قيمة خالية)

# importing pandas as pd
import pandas as pd
 
# importing numpy as np
import numpy as np
 
# dictionary of lists
dict = {'First Score':[100, 90, np.nan, 95],
        'Second Score': [30, np.nan, 45, 56],
        'Third Score':[52, 40, 80, 98],
        'Fourth Score':[np.nan, np.nan, np.nan, 65]}
 
# creating a dataframe from dictionary
df = pd.DataFrame(dict)
 
# using dropna() function  
df.dropna()
الإخراج:

لمزيد من التفاصيل راجع العمل مع البيانات المفقودة في Pandas
 

التكرار على الصفوف والأعمدة
التكرار هو مصطلح عام لأخذ كل عنصر من شيء واحدًا تلو الآخر. يتكون Pandas DataFrame من صفوف وأعمدة ، لذلك ، من أجل التكرار عبر إطار البيانات ، يتعين علينا تكرار إطار بيانات مثل القاموس.

التكرار على الصفوف:
للتكرار على الصفوف ، يمكننا استخدام ثلاث وظائف iteritems()، iterrows()، itertuples() . ستساعد هذه الوظائف الثلاث في التكرار على الصفوف.

# importing pandas as pd
import pandas as pd
  
# dictionary of lists
dict = {'name':["aparna", "pankaj", "sudhir", "Geeku"],
        'degree': ["MBA", "BCA", "M.Tech", "MBA"],
        'score':[90, 40, 80, 98]}
 
# creating a dataframe from a dictionary 
df = pd.DataFrame(dict)
 
print(df)
تشغيل على IDE

نطبق الآن iterrows()وظيفة للحصول على كل عنصر من عناصر الصفوف.

# importing pandas as pd
import pandas as pd
  
# dictionary of lists
dict = {'name':["aparna", "pankaj", "sudhir", "Geeku"],
        'degree': ["MBA", "BCA", "M.Tech", "MBA"],
        'score':[90, 40, 80, 98]}
 
# creating a dataframe from a dictionary 
df = pd.DataFrame(dict)
 
# iterating over rows using iterrows() function 
for i, j in df.iterrows():
    print(i, j)
    print()
تشغيل على IDE
الإخراج:

 
التكرار عبر الأعمدة:
من أجل التكرار على الأعمدة ، نحتاج إلى إنشاء قائمة بأعمدة إطار البيانات ثم التكرار خلال تلك القائمة لسحب أعمدة إطار البيانات.

# importing pandas as pd
import pandas as pd
   
# dictionary of lists
dict = {'name':["aparna", "pankaj", "sudhir", "Geeku"],
        'degree': ["MBA", "BCA", "M.Tech", "MBA"],
        'score':[90, 40, 80, 98]}
  
# creating a dataframe from a dictionary 
df = pd.DataFrame(dict)
 
print(df)
تشغيل على IDE

الآن نقوم بالتكرار من خلال الأعمدة من أجل التكرار خلال الأعمدة ، نقوم أولاً بإنشاء قائمة بأعمدة إطار البيانات ثم التكرار من خلال القائمة.

# creating a list of dataframe columns
columns = list(df)
 
for i in columns:
 
    # printing the third element of the column
    print (df[i][2])
الإخراج:

 
لمزيد من التفاصيل ، راجع التكرار عبر الصفوف والأعمدة في Pandas DataFrame

طرق DataFrame:

دور	وصف
فهرس()	الأسلوب بإرجاع فهرس (تسميات الصفوف) DataFrame
إدراج()	يقوم الأسلوب بإدراج عمود في DataFrame
يضيف()	تقوم الطريقة بإرجاع إضافة إطار البيانات وغيره ، من ناحية العناصر (إضافة عامل ثنائي)
الفرعية()	تقوم الطريقة بإرجاع طرح إطار البيانات وغيره من العناصر (عامل التشغيل الثنائي الفرعي)
مول ()	تقوم الطريقة بإرجاع مضاعفة إطار البيانات والأخرى ، من ناحية العناصر (عامل التشغيل الثنائي mul)
div ()	تقوم الطريقة بإرجاع القسمة العائمة لإطار البيانات وغيره من العناصر (عامل التشغيل الثنائي truediv)
فريدة من نوعها()	تستخرج الطريقة القيم الفريدة في إطار البيانات
نونيك ()	تقوم الطريقة بإرجاع عدد القيم الفريدة في إطار البيانات
عدد_القيمة ()	تحسب الطريقة عدد المرات التي تحدث فيها كل قيمة فريدة داخل السلسلة
أعمدة ()	الأسلوب بإرجاع تسميات الأعمدة DataFrame
محاور ()	تقوم الطريقة بإرجاع قائمة تمثل محاور DataFrame
باطل()	الطريقة تنشئ سلسلة منطقية لاستخراج الصفوف ذات القيم الخالية
غير فارغة()	الطريقة تنشئ سلسلة منطقية لاستخراج الصفوف ذات القيم غير الخالية
ما بين()	تستخرج الطريقة الصفوف حيث تقع قيمة العمود بين نطاق محدد مسبقًا
في داخل()	تستخرج الطريقة الصفوف من DataFrame حيث توجد قيمة عمود في مجموعة محددة مسبقًا
أنواع ()	تقوم الطريقة بإرجاع سلسلة بنوع بيانات كل عمود. فهرس النتيجة هو أعمدة DataFrame الأصلية
أستيب ()	الأسلوب يحول أنواع البيانات في سلسلة
القيم()	تقوم الطريقة بإرجاع تمثيل Numpy لـ DataFrame ، أي سيتم إرجاع القيم الموجودة في DataFrame فقط ، وستتم إزالة تسميات المحاور
Sort_values ​​() - Set1 ، Set2	الأسلوب يفرز إطار البيانات بترتيب تصاعدي أو تنازلي للعمود الذي تم تمريره
Sort_index ()	تقوم الطريقة بفرز القيم في DataFrame بناءً على مواضع الفهرس أو التسميات بدلاً من قيمها ولكن في بعض الأحيان يتم إنشاء إطار البيانات من إطارين أو أكثر من إطارات البيانات ، وبالتالي يمكن تغيير الفهرس لاحقًا باستخدام هذه الطريقة
مكان []	يسترد الأسلوب الصفوف بناءً على تسمية الفهرس
iloc []	الطريقة تسترجع الصفوف بناءً على موضع الفهرس
التاسع []	يسترد الأسلوب صفوف DataFrame بناءً على تسمية الفهرس أو موضع الفهرس. تجمع هذه الطريقة بين أفضل ميزات طريقتي .loc [] و .iloc []
إعادة تسمية ()	يتم استدعاء الأسلوب في DataFrame لتغيير أسماء تسميات الفهرس أو أسماء الأعمدة
أعمدة ()	الطريقة هي سمة بديلة لتغيير اسم كولوم
يسقط()	يتم استخدام الطريقة لحذف الصفوف أو الأعمدة من DataFrame
البوب ​​()	يتم استخدام الطريقة لحذف الصفوف أو الأعمدة من DataFrame
عينة()	الأسلوب يسحب عينة عشوائية من الصفوف أو الأعمدة من DataFrame
nsmallest ()	الأسلوب يسحب الصفوف ذات القيم الأصغر في العمود للخارج
nlargest ()	الأسلوب يسحب الصفوف ذات القيم الأكبر في العمود للخارج
شكل()	تقوم الطريقة بإرجاع مجموعة تمثل أبعاد DataFrame
نديم ()	تقوم الطريقة بإرجاع "عدد صحيح" يمثل عدد المحاور / أبعاد الصفيف.
تُرجع 1 إذا كانت السلسلة ، وإلا تُرجع 2 إذا كانت DataFrame
قطرةنا ()	تسمح الطريقة للمستخدم بتحليل وإفلات الصفوف / الأعمدة بقيم خالية بطرق مختلفة
فيلنا ()	الطريقة تدير وتسمح للمستخدم باستبدال قيم NaN ببعض القيمة الخاصة به
مرتبة()	يمكن ترتيب القيم في سلسلة بالترتيب باستخدام هذه الطريقة
استفسار()	الطريقة عبارة عن بناء جملة بديل يعتمد على سلسلة لاستخراج مجموعة فرعية من DataFrame
ينسخ()	الطريقة تنشئ نسخة مستقلة من كائن الباندا
مكرر ()	الطريقة تنشئ سلسلة منطقية وتستخدمها لاستخراج الصفوف التي تحتوي على قيم مكررة
Drop_duplicates ()	الطريقة هي خيار بديل لتحديد الصفوف المكررة وإزالتها من خلال التصفية
set_index ()	الأسلوب يعين فهرس DataFrame (تسميات الصفوف) باستخدام عمود أو أكثر من الأعمدة الموجودة
reset_index ()	الأسلوب يعيد تعيين فهرس إطار البيانات. تحدد هذه الطريقة قائمة عدد صحيح يتراوح من 0 إلى طول البيانات كفهرس
أين()	تُستخدم الطريقة للتحقق من إطار البيانات لشرط واحد أو أكثر وإرجاع النتيجة وفقًا لذلك. بشكل افتراضي ، يتم ملء الصفوف التي لا تفي بالشرط بقيمة NaN
 
المزيد عن الباندا

بايثون | سلسلة الباندا
بايثون | الباندا تعمل مع بيانات النص
بايثون | الباندا تعمل مع التواريخ والأوقات
بايثون | دمج الباندا والانضمام والتسلسل



<<<<<<<<<<<<<<<<<<<<<
إنشاء Pandas DataFrame
مستوى الصعوبة: سهل
آخر تحديث: 22 يونيو 2021
في العالم الحقيقي ، سيتم إنشاء Pandas DataFrame عن طريق تحميل مجموعات البيانات من التخزين الحالي ، ويمكن أن يكون التخزين عبارة عن قاعدة بيانات SQL وملف CSV وملف Excel. يمكن إنشاء Pandas DataFrame من القوائم والقاموس ومن قائمة القاموس وما إلى ذلك. 
 



إن إطار البيانات عبارة عن بنية بيانات ثنائية الأبعاد ، أي تتم محاذاة البيانات بطريقة جدولية في صفوف وأعمدة. في مجموعات البيانات التي يتم ترتيبها في صفوف وأعمدة ، يمكننا تخزين أي عدد من مجموعات البيانات في إطار بيانات. يمكننا إجراء العديد من العمليات على مجموعات البيانات هذه مثل العمليات الحسابية واختيار الأعمدة / الصفوف وإضافة الأعمدة / الصفوف وما إلى ذلك. 
 



يمكن إنشاء Pandas DataFrame بعدة طرق. دعونا نناقش طرقًا مختلفة لإنشاء إطار بيانات واحدًا تلو الآخر.
إنشاء إطار بيانات فارغ: إطار بيانات 
أساسي ، يمكن إنشاؤه هو إطار بيانات فارغ. يتم إنشاء إطار بيانات فارغ بمجرد استدعاء مُنشئ إطار البيانات. 
 


# import pandas as pd
import pandas as pd
 
# Calling DataFrame constructor
df = pd.DataFrame()
 
print(df)
انتاج : 
 

DataFrame فارغ
الأعمدة: []
فهرس: []
  
إنشاء إطار بيانات باستخدام القائمة : 
يمكن إنشاء إطار البيانات باستخدام قائمة واحدة أو قائمة قوائم. 
 


# import pandas as pd
import pandas as pd
 
# list of strings
lst = ['Geeks', 'For', 'Geeks', 'is',
            'portal', 'for', 'Geeks']
 
# Calling DataFrame constructor on list
df = pd.DataFrame(lst)
print(df)
انتاج: 
 



  
إنشاء DataFrame من قائمة / قوائم ndarray : 
لإنشاء إطار بيانات من قائمة / قائمة narray ، يجب أن يكون كل إطار Narray بنفس الطول. إذا تم تمرير الفهرس ، فيجب أن يكون مؤشر الطول مساويًا لطول المصفوفات. إذا لم يتم تمرير أي فهرس ، فسيكون الفهرس بشكل افتراضي النطاق (n) حيث n هو طول الصفيف. 
 


# Python code demonstrate creating
# DataFrame from dict narray / lists
# By default addresses.
 
import pandas as pd
 
# initialise data of lists.
data = {'Name':['Tom', 'nick', 'krish', 'jack'], 'Age':[20, 21, 19, 18]}
 
# Create DataFrame
df = pd.DataFrame(data)
 
# Print the output.
print(df)
انتاج: 
 



  
إنشاء إطار بيانات الباندا من القوائم باستخدام القاموس : 
يمكن إنشاء إطار بيانات الباندا من القوائم باستخدام القاموس بطرق مختلفة. يمكننا إنشاء إطار بيانات الباندا من القوائم باستخدام القاموس باستخدام pandas.DataFrame. باستخدام هذه الطريقة في Pandas ، يمكننا تحويل قاموس القائمة إلى إطار بيانات.
 


# importing pandas as pd
import pandas as pd
 
# dictionary of lists
dict = {'name':["aparna", "pankaj", "sudhir", "Geeku"],
        'degree': ["MBA", "BCA", "M.Tech", "MBA"],
        'score':[90, 40, 80, 98]}
 
df = pd.DataFrame(dict)
 
print(df)
انتاج: 
 



 
طرق متعددة لإنشاء إطار البيانات: 
 

طرق مختلفة لإنشاء Pandas Dataframe
إنشاء إطار بيانات الباندا من القوائم باستخدام الرمز البريدي
قم بإنشاء Pandas DataFrame من قائمة الإملاء
قم بإنشاء Pandas Dataframe من إملاء قوائم متساوية الطول
إنشاء إطار بيانات باستخدام القائمة
إنشاء إطار بيانات الباندا من القوائم باستخدام القاموس
 
<<<<<<<<<<<<<<<<<<<<<

بايثون | سلسلة الباندا
تاريخ التحديث الأخير: 17 يناير 2019
سلسلة Pandas عبارة عن مصفوفة ذات بعد واحد قادرة على الاحتفاظ بالبيانات من أي نوع (عدد صحيح ، سلسلة ، عدد عشري ، كائنات بيثون ، إلخ). تسمى تسميات المحور بشكل جماعي الفهرس . سلسلة Pandas ليست سوى عمود في ورقة Excel.
لا يلزم أن تكون الملصقات فريدة ولكن يجب أن تكون من النوع القابل للتجزئة. يدعم الكائن كلاً من الفهرسة المعتمدة على التصنيف والأعداد الصحيحة ويوفر مجموعة من الأساليب لإجراء العمليات التي تتضمن الفهرس.

في هذه المقالة ، نستخدم nba.csvملف.

سوف نحصل على لمحة موجزة عن جميع هذه العمليات الأساسية التي يمكن إجراؤها على سلسلة Pandas:

إنشاء سلسلة
الوصول إلى عنصر السلسلة
فهرسة وتحديد البيانات في سلسلة
عملية ثنائية على السلسلة
عملية التحويل في السلسلة
إنشاء سلسلة الباندا
في العالم الحقيقي ، سيتم إنشاء سلسلة Pandas عن طريق تحميل مجموعات البيانات من التخزين الحالي ، ويمكن أن يكون التخزين عبارة عن قاعدة بيانات SQL وملف CSV وملف Excel. يمكن إنشاء سلسلة Pandas من القوائم والقاموس ومن قيمة عددية وما إلى ذلك. يمكن إنشاء سلسلة بطرق مختلفة ، وإليك بعض الطرق التي ننشئ بها سلسلة:

إنشاء سلسلة من المصفوفة: من أجل إنشاء سلسلة من المصفوفة ، علينا استيراد وحدة numpy ويجب استخدام الدالة array ().


# import pandas as pd
import pandas as pd

# import numpy as np
import numpy as np

# simple array
data = np.array(['g','e','e','k','s'])

ser = pd.Series(data)
print(ser)

انتاج :


 
إنشاء سلسلة من القوائم :
من أجل إنشاء سلسلة من القائمة ، يتعين علينا أولاً إنشاء قائمة بعد ذلك يمكننا إنشاء سلسلة من القائمة.


import pandas as pd

# a simple list
list = ['g', 'e', 'e', 'k', 's']
 
# create series form a list
ser = pd.Series(list)
print(ser)

انتاج :


لمزيد من التفاصيل ، راجع إنشاء سلسلة Pandas
 

الوصول إلى عنصر السلسلة
هناك طريقتان يمكننا من خلالهما الوصول إلى عنصر السلسلة ، وهما:

الوصول إلى العنصر من المتسلسلة بالموقع
الوصول إلى العنصر باستخدام الملصق (الفهرس)
الوصول إلى العنصر من السلسلة بالموقع: من أجل الوصول إلى عنصر السلسلة ، يشير إلى رقم الفهرس. استخدم عامل تشغيل الفهرس [] للوصول إلى عنصر في سلسلة. يجب أن يكون الفهرس عددًا صحيحًا. من أجل الوصول إلى عناصر متعددة من سلسلة ، نستخدم عملية Slice.

الوصول إلى العناصر الخمسة الأولى من السلسلة


# import pandas and numpy 
import pandas as pd
import numpy as np

# creating simple array
data = np.array(['g','e','e','k','s','f', 'o','r','g','e','e','k','s'])
ser = pd.Series(data)
 
 
#retrieve the first element
print(ser[:5])

الإخراج:

 
الوصول إلى العنصر باستخدام التسمية (الفهرس):
من أجل الوصول إلى عنصر من السلسلة ، يتعين علينا تعيين القيم بواسطة تسمية الفهرس. السلسلة هي بمثابة قاموس ثابت الحجم حيث يمكنك الحصول على القيم وتعيينها بواسطة تسمية الفهرس.

الوصول إلى عنصر واحد باستخدام تسمية الفهرس


# import pandas and numpy 
import pandas as pd
import numpy as np

# creating simple array
data = np.array(['g','e','e','k','s','f', 'o','r','g','e','e','k','s'])
ser = pd.Series(data,index=[10,11,12,13,14,15,16,17,18,19,20,21,22])
 
 
# accessing a element using index element
print(ser[16])

انتاج :

ا
لمزيد من التفاصيل ، راجع الوصول إلى عنصر السلسلة
 

فهرسة وتحديد البيانات في سلسلة
الفهرسة في الباندا تعني ببساطة اختيار بيانات معينة من سلسلة. قد تعني الفهرسة اختيار جميع البيانات ، وبعض البيانات من أعمدة معينة. يمكن أيضًا أن تُعرف الفهرسة باسم تحديد المجموعة الفرعية .

فهرسة سلسلة باستخدام عامل الفهرسة []:
يُستخدم عامل الفهرسة للإشارة إلى الأقواس المربعة التي تلي الكائن. تستخدم الفهرسة أيضًا عامل الفهرسة لإجراء التحديدات .loc. .ilocفي عامل الفهرسة هذا ، يجب الرجوع إلى df [].

# importing pandas module  
import pandas as pd  
    
# making data frame  
df = pd.read_csv("nba.csv")  
  
ser = pd.Series(df['Name']) 
data = ser.head(10)
data 

الآن نصل إلى عنصر السلسلة باستخدام عامل الفهرس [].

# using indexing operator
data[3:6] 
الإخراج:

 
فهرسة سلسلة باستخدام .loc[ ]:
تحدد هذه الوظيفة البيانات عن طريق إحالة الفهرس الصريح. يقوم df.locالمفهرس بتحديد البيانات بطريقة مختلفة عن طريقة عامل الفهرسة فقط. يمكنه تحديد مجموعات فرعية من البيانات.

# importing pandas module  
import pandas as pd  
    
# making data frame  
df = pd.read_csv("nba.csv")  
  
ser = pd.Series(df['Name']) 
data = ser.head(10)
data 

الآن نصل إلى عنصر السلسلة باستخدام .loc[]الوظيفة.

# using .loc[] function
data.loc[3:6]
الإخراج:

 
فهرسة سلسلة باستخدام .iloc[ ]:
تتيح لنا هذه الوظيفة استرداد البيانات حسب الموضع. للقيام بذلك ، سنحتاج إلى تحديد مواضع البيانات التي نريدها. df.iloc المفهرس مشابه جدًا ولكنه يستخدم df.loc فقط مواقع الأعداد الصحيحة لإجراء التحديدات الخاصة به.

# importing pandas module  
import pandas as pd  
    
# making data frame  
df = pd.read_csv("nba.csv")  
  
ser = pd.Series(df['Name']) 
data = ser.head(10)
data 

الآن نصل إلى عنصر السلسلة باستخدام .iloc[]الوظيفة.

# using .iloc[] function
data.iloc[3:6]
انتاج :

 

عملية ثنائية على سلسلة
يمكننا إجراء عملية ثنائية على سلسلة مثل الجمع والطرح والعديد من العمليات الأخرى. من أجل إجراء عملية ثنائية على المتسلسلة ، يتعين علينا استخدام بعض الوظائف مثل .add()، .sub()إلخ.
الرمز رقم 1:

# importing pandas module  
import pandas as pd  

# creating a series
data = pd.Series([5, 2, 3,7], index=['a', 'b', 'c', 'd'])

# creating a series
data1 = pd.Series([1, 6, 4, 9], index=['a', 'b', 'd', 'e'])

print(data, "\n\n", data1)

نضيف الآن سلسلتين باستخدام .add()الدالة.

# adding two series using
# .add
data.add(data1, fill_value=0)
الإخراج:

كود # 2:

# importing pandas module  
import pandas as pd  

# creating a series
data = pd.Series([5, 2, 3,7], index=['a', 'b', 'c', 'd'])

# creating a series
data1 = pd.Series([1, 6, 4, 9], index=['a', 'b', 'd', 'e'])

print(data, "\n\n", data1)

نطرح الآن سلسلتين باستخدام .subالدالة.

# subtracting two series using
# .sub
data.sub(data1, fill_value=0)
الإخراج:

لمزيد من التفاصيل راجع طرق التشغيل الثنائية على السلسلة
 

عملية التحويل في السلسلة
في عملية التحويل ، نقوم بإجراء عمليات مختلفة مثل تغيير نوع بيانات السلسلة ، وتغيير سلسلة إلى قائمة وما إلى ذلك. من أجل إجراء عملية التحويل ، لدينا وظائف مختلفة تساعد في التحويل مثل .astype()، .tolist()وما إلى ذلك.
الرمز رقم 1:

# Python program using astype
# to convert a datatype of series

# importing pandas module  
import pandas as pd 
  
# reading csv file from url  
data = pd.read_csv("nba.csv") 
   
# dropping null value columns to avoid errors 
data.dropna(inplace = True) 
  
# storing dtype before converting 
before = data.dtypes 
  
# converting dtypes using astype 
data["Salary"]= data["Salary"].astype(int) 
data["Number"]= data["Number"].astype(str) 
  
# storing dtype after converting 
after = data.dtypes 
  
# printing to compare 
print("BEFORE CONVERSION\n", before, "\n") 
print("AFTER CONVERSION\n", after, "\n") 
الإخراج:

 
كود # 2:

# Python program converting
# a series into list

# importing pandas module  
import pandas as pd  
  
# importing regex module 
import re 
    
# making data frame  
data = pd.read_csv("nba.csv")  
    
# removing null values to avoid errors  
data.dropna(inplace = True)  
  
# storing dtype before operation 
dtype_before = type(data["Salary"]) 
  
# converting to list 
salary_list = data["Salary"].tolist() 
  
# storing dtype after operation 
dtype_after = type(salary_list) 
  
# printing dtype 
print("Data type before converting = {}\nData type after converting = {}"
      .format(dtype_before, dtype_after)) 
  
# displaying list 
salary_list 

انتاج :


طرق التشغيل الثنائية على السلسلة:

دور	وصف
يضيف()	تستخدم الطريقة لإضافة سلسلة أو قائمة مثل الكائنات بنفس الطول إلى سلسلة المتصل
الفرعية()	يتم استخدام الطريقة لطرح سلسلة أو قائمة مثل الكائنات بنفس الطول من سلسلة المتصل
مول ()	تُستخدم الطريقة لمضاعفة السلاسل أو القوائم مثل الكائنات بنفس الطول مع سلسلة المتصل
div ()	تُستخدم الطريقة لتقسيم المتسلسلة أو قائمة مثل الكائنات بنفس الطول بواسطة سلسلة المتصل
مجموع()	تُرجع مجموع قيم المحور المطلوب
همز()	إرجاع ناتج قيم المحور المطلوب
يعني()	إرجاع متوسط ​​قيم المحور المطلوب
الأسرى ()	يتم استخدام الطريقة لوضع كل عنصر من عناصر السلسلة التي تم تمريرها كقوة أسية لسلسلة المتصل وإرجاع النتائج
عضلات المعدة()	يتم استخدام الطريقة للحصول على القيمة الرقمية المطلقة لكل عنصر في سلسلة / DataFrame
كوف ()	تُستخدم الطريقة لإيجاد التغاير بين سلسلتين
 
طريقة سلسلة الباندا:

دور	وصف
مسلسل()	يمكن إنشاء سلسلة الباندا باستخدام طريقة مُنشئ السلسلة (). يقبل أسلوب المُنشئ هذا مجموعة متنوعة من المدخلات
الجمع_الأول ()	تستخدم الطريقة لدمج سلسلتين في سلسلة واحدة
عدد()	تُرجع عدد الملاحظات غير NA / الفارغة في السلسلة
بحجم()	ترجع عدد العناصر في البيانات الأساسية
اسم()	تسمح الطريقة بإعطاء اسم لكائن السلسلة ، أي العمود
فريد من نوعة()	تقوم الطريقة بإرجاع قيمة منطقية إذا كانت القيم في الكائن فريدة
idxmax ()	طريقة لاستخراج مواضع الفهرس لأعلى القيم في سلسلة
idxmin ()	طريقة لاستخراج مواضع الفهرس من أدنى القيم في سلسلة
Sort_values ​​()	يتم استدعاء الطريقة في سلسلة لفرز القيم بترتيب تصاعدي أو تنازلي
Sort_index ()	يتم استدعاء الطريقة في سلسلة الباندا لفرزها بواسطة الفهرس بدلاً من قيمها
رئيس()	يتم استخدام الطريقة لإرجاع عدد محدد من الصفوف من بداية سلسلة. تقوم الطريقة بإرجاع سلسلة جديدة تمامًا
ذيل()	يتم استخدام الطريقة لإرجاع عدد محدد من الصفوف من نهاية سلسلة. تقوم الطريقة بإرجاع سلسلة جديدة تمامًا
لو ()	تُستخدم لمقارنة كل عنصر من عناصر سلسلة Caller بالسلسلة التي تم تمريرها. تُرجع True لكل عنصر أقل من أو يساوي العنصر في السلسلة التي تم تمريرها
ني ()	تستخدم لمقارنة كل عنصر من عناصر سلسلة Caller بالسلسلة التي تم تمريرها. تقوم بإرجاع True لكل عنصر لا يساوي العنصر في السلسلة التي تم تمريرها
جنرال الكتريك ()	تستخدم لمقارنة كل عنصر من عناصر سلسلة Caller بالسلسلة التي تم تمريرها. تقوم بإرجاع True لكل عنصر أكبر من أو يساوي العنصر في السلسلة التي تم تمريرها
مكافئ ()	تستخدم لمقارنة كل عنصر من عناصر سلسلة Caller بالسلسلة التي تم تمريرها. تقوم بإرجاع True لكل عنصر يساوي العنصر في السلسلة التي تم تمريرها
gt ()	تستخدم لمقارنة سلسلتين وإرجاع القيمة المنطقية لكل عنصر على حدة
لتر ()	تستخدم لمقارنة سلسلتين وإرجاع القيمة المنطقية لكل عنصر على حدة
مقطع ()	يُستخدم لقص القيمة أدناه وما فوق لتمريرها إلى أقل قيمة وأقصى قيمة
Clip_lower ()	يستخدم لقص القيم الموجودة أسفل القيمة الصغرى التي تم تمريرها
Clip_upper ()	يستخدم لقص القيم فوق قيمة قصوى تم تمريرها
أستيب ()	الطريقة المستخدمة لتغيير نوع البيانات من سلسلة
لإدراج()	الطريقة المستخدمة لتحويل سلسلة إلى قائمة
احصل على()	يتم استدعاء الطريقة على سلسلة لاستخراج القيم من سلسلة. هذا هو بناء الجملة البديل لقوس بناء الجملة التقليدية
فريدة من نوعها()	يتم استخدام Pandas unique () لمشاهدة القيم الفريدة في عمود معين
نونيك ()	يستخدم Pandas nunique () للحصول على عدد من القيم الفريدة
عدد_القيمة ()	طريقة لحساب عدد المرات التي تحدث فيها كل قيمة فريدة في سلسلة
حلل إلى عوامل()	تساعد الطريقة في الحصول على التمثيل الرقمي لمصفوفة عن طريق تحديد قيم مميزة
خريطة()	طريقة لربط القيم من كائن إلى آخر
ما بين()	تُستخدم طريقة Pandas بين الوسيطة () في السلسلة للتحقق من القيم التي تقع بين الوسيطة الأولى والثانية
تطبيق()	يتم استدعاء الأسلوب وتغذيته بوظيفة Python كوسيطة لاستخدام الوظيفة في كل قيمة سلسلة. هذه الطريقة مفيدة لتنفيذ العمليات المخصصة التي لم يتم تضمينها في الباندا أو numpy


<<<<<<<<<<<<<<<<<<<<<
إنشاء سلسلة الباندا
مستوى الصعوبة: سهل
تاريخ التحديث الأخير: 17 يناير 2019
سلسلة Pandas عبارة عن مصفوفة ذات بعد واحد قادرة على الاحتفاظ بالبيانات من أي نوع (عدد صحيح ، سلسلة ، عدد عشري ، كائنات بيثون ، إلخ). تسمى تسميات المحور بشكل جماعي الفهرس .

لا يلزم أن تكون الملصقات فريدة ولكن يجب أن تكون من النوع القابل للتجزئة. يدعم الكائن كلاً من الفهرسة المعتمدة على التصنيف والأعداد الصحيحة ويوفر مجموعة من الأساليب لإجراء العمليات التي تتضمن الفهرس.


إنشاء سلسلة فارغة: السلسلة
الأساسية التي يمكن إنشاؤها هي سلسلة فارغة.


# import pandas as pd
import pandas as pd
  
# Creating empty series
ser = pd.Series()
  
print(ser)
انتاج :

سلسلة ([] ، نوع dtype: float64)
 
إنشاء سلسلة من المصفوفة:
من أجل إنشاء سلسلة من المصفوفة ، علينا استيراد وحدة numpy ويجب استخدام الدالة array ().


# import pandas as pd
import pandas as pd
  
# import numpy as np
import numpy as np
  
# simple array
data = np.array(['g', 'e', 'e', 'k', 's'])
  
ser = pd.Series(data)
print(ser)
انتاج :


 
إنشاء سلسلة من مصفوفة مع فهرس:
من أجل إنشاء سلسلة من مصفوفة مع فهرس ، يجب أن نوفر فهرسًا بنفس عدد العناصر كما هو الحال في المصفوفة.


# import pandas as pd
import pandas as pd
  
# import numpy as np
import numpy as np
  
# simple array
data = np.array(['g', 'e', 'e', 'k', 's'])
  
# providing an index
ser = pd.Series(data, index =[10, 11, 12, 13, 14])
print(ser)
انتاج :


 
إنشاء سلسلة من القوائم :
من أجل إنشاء سلسلة من القائمة ، يتعين علينا أولاً إنشاء قائمة بعد ذلك يمكننا إنشاء سلسلة من القائمة.


import pandas as pd
  
# a simple list
list = ['g', 'e', 'e', 'k', 's']
   
# create series form a list
ser = pd.Series(list)
print(ser)
انتاج :


إنشاء سلسلة من القاموس :
من أجل إنشاء سلسلة من القاموس ، يتعين علينا أولاً إنشاء قاموس بعد ذلك يمكننا إنشاء سلسلة باستخدام القاموس. يتم استخدام مفتاح القاموس لبناء فهرس.


import pandas as pd
   
# a simple dictionary
dict = {'Geeks' : 10,
        'for' : 20,
        'geeks' : 30}
   
# create series from dictionary
ser = pd.Series(dict)
   
print(ser)
انتاج :


 
إنشاء سلسلة من القيمة العددية:
من أجل إنشاء سلسلة من القيمة العددية ، يجب توفير فهرس. سيتم تكرار القيمة العددية لتتناسب مع طول الفهرس.


import pandas as pd
  
import numpy as np
  
# giving a scalar value with index
ser = pd.Series(10, index =[0, 1, 2, 3, 4, 5])
  
print(ser)
انتاج :


 
إنشاء سلسلة باستخدام وظائف NumPy :
من أجل إنشاء سلسلة باستخدام دالة numpy ، يمكننا استخدام دالة مختلفة من numpy مثل numpy.linspace () ، numpy.random.radn () .


# import pandas and numpy 
import pandas as pd 
import numpy as np 
    
# series with numpy linspace()  
ser1 = pd.Series(np.linspace(3, 33, 3)) 
print(ser1) 
    
# series with numpy linspace() 
ser2 = pd.Series(np.linspace(1, 100, 10)) 
print("\n", ser2) 
انتاج :



<<<<<<<<<<<<<<<<<<<<<
بايثون | طريقة Pandas Dataframe / Series.head ()
مستوى الصعوبة: سهل
تاريخ التحديث الأخير: 01 أكتوبر 2018
Python هي لغة رائعة لإجراء تحليل البيانات ، ويرجع ذلك أساسًا إلى النظام البيئي الرائع لحزم Python المتمحورة حول البيانات. Pandas هي إحدى تلك الحزم وتجعل استيراد البيانات وتحليلها أسهل بكثير.

تُستخدم طريقة Pandas head()لإرجاع أعلى n (5 افتراضيًا) صفوف من إطار أو سلسلة بيانات.

بناء الجملة: Dataframe.head (ن = 5)

المعلمات:
n: قيمة عدد صحيح ، عدد الصفوف المراد إرجاعها

نوع الإرجاع: Dataframe بأعلى n من الصفوف

لتنزيل مجموعة البيانات المستخدمة في المثال التالي ، انقر هنا.
في الأمثلة التالية ، يحتوي إطار البيانات المستخدم على بيانات بعض لاعبي NBA. يتم إرفاق صورة إطار البيانات قبل أي عمليات أدناه.


مثال 1:

في هذا المثال ، يتم إرجاع أعلى 5 صفوف من إطار البيانات وتخزينها في متغير جديد. لا يتم تمرير أي معلمة إلى أسلوب .head () نظرًا لأنه افتراضيًا هو 5.

# importing pandas module
import pandas as pd
  
# making data frame
data = pd.read_csv("https://media.geeksforgeeks.org/wp-content/uploads/nba.csv")
  
# calling head() method 
# storing in new variable
data_top = data.head()
  
# display
data_top
الإخراج:
كما هو موضح في صورة الإخراج ، يمكن ملاحظة أن فهرس الصفوف التي تم إرجاعها يتراوح من 0 إلى 4. وبالتالي ، تم إرجاع أعلى 5 صفوف.


 
المثال الثاني: استدعاء المتسلسلة بمعامل n ()

في هذا المثال ، يتم استدعاء أسلوب .head () في سلسلة مع إدخال مخصص لمعلمة n لإرجاع أعلى 9 صفوف من السلسلة.

# importing pandas module
import pandas as pd
  
# making data frame
data = pd.read_csv("https://media.geeksforgeeks.org/wp-content/uploads/nba.csv")
  
# number of rows to return
n = 9
  
# creating series
series = data["Name"]
  
# returning top n rows
top = series.head(n = n)
  
# display
top
الإخراج:
كما هو موضح في صورة الإخراج ، تم إرجاع أعلى 9 صفوف تتراوح من 0 إلى 8 موضع الفهرس.


<<<<<<<<<<<<<<<<<<<<<
بايثون | طريقة Pandas Dataframe.describe ()
مستوى الصعوبة: أساسي
تاريخ التحديث الأخير: 01 أكتوبر 2018
Python هي لغة رائعة لإجراء تحليل البيانات ، ويرجع ذلك أساسًا إلى النظام البيئي الرائع لحزم Python المتمحورة حول البيانات. Pandas هي إحدى تلك الحزم وتجعل استيراد البيانات وتحليلها أسهل بكثير.

يتم استخدام Pandas describe()لعرض بعض التفاصيل الإحصائية الأساسية مثل النسبة المئوية والمتوسط ​​والأمراض المنقولة جنسياً وما إلى ذلك لإطار البيانات أو سلسلة من القيم الرقمية. عندما يتم تطبيق هذه الطريقة على سلسلة من السلسلة ، فإنها تُرجع مخرجات مختلفة تظهر في الأمثلة أدناه.

بناء الجملة: DataFrame.describe (النسب المئوية = لا شيء ، تشمل = لا شيء ، استبعاد = لا شيء)

المعلمات:
المئين: قائمة مثل نوع البيانات من الأرقام بين 0-1 لإرجاع النسبة المئوية المعنية
تشمل: قائمة أنواع البيانات التي سيتم تضمينها أثناء وصف إطار البيانات. الافتراضي هو بلا
استثناء: قائمة أنواع البيانات التي سيتم استبعادها أثناء وصف إطار البيانات. الافتراضي هو بلا

نوع الإرجاع: ملخص إحصائي لإطار البيانات.

لتنزيل مجموعة البيانات المستخدمة في المثال التالي ، انقر هنا.
في الأمثلة التالية ، يحتوي إطار البيانات المستخدم على بيانات بعض لاعبي NBA. يتم إرفاق صورة إطار البيانات قبل أي عمليات أدناه.


المثال 1: وصف إطار البيانات بكائن ونوع بيانات رقمي

في هذا المثال ، يتم وصف إطار البيانات وتمرير ['object'] لتضمين المعلمة لرؤية وصف سلسلة الكائنات. [.20 ، .40 ، .60 ، .80] يتم تمريرها إلى معلمة النسبة المئوية لعرض النسبة المئوية الخاصة بالسلسلة الرقمية.

# importing pandas module 
import pandas as pd 
  
# importing regex module
import re
    
# making data frame 
data = pd.read_csv("https://media.geeksforgeeks.org/wp-content/uploads/nba.csv") 
    
# removing null values to avoid errors 
data.dropna(inplace = True) 
  
# percentile list
perc =[.20, .40, .60, .80]
  
# list of dtypes to include
include =['object', 'float', 'int']
  
# calling describe method
desc = data.describe(percentiles = perc, include = include)
  
# display
desc
الإخراج:
كما هو موضح في صورة الإخراج ، تم إرجاع الوصف الإحصائي لإطار البيانات مع النسب المئوية التي تم تمريرها. بالنسبة للأعمدة ذات السلاسل ، تم إرجاع NaN للعمليات الرقمية.

 
المثال الثاني: وصف سلسلة السلاسل

في هذا المثال ، يتم استدعاء طريقة الوصف بواسطة عمود الاسم لمعرفة السلوك مع نوع بيانات الكائن.

# importing pandas module 
import pandas as pd 
  
# importing regex module
import re
    
# making data frame 
data = pd.read_csv("https://media.geeksforgeeks.org/wp-content/uploads/nba.csv") 
    
# removing null values to avoid errors 
data.dropna(inplace = True) 
  
# calling describe method
desc = data["Name"].describe()
  
# display
desc
الإخراج:
كما هو موضح في صورة الإخراج ، يختلف سلوك description () باختلاف سلسلة السلاسل.
تم إرجاع إحصائيات مختلفة مثل عدد القيم والقيم الفريدة والأعلى وتكرار الحدوث في هذه الحالة.

<<<<<<<<<<<<<<<<<<<<<

التعامل مع الصفوف والأعمدة في Pandas DataFrame
مستوى الصعوبة: أساسي
آخر تحديث: 13 أكتوبر 2021
إطار البيانات عبارة عن هيكل بيانات ثنائي الأبعاد ، أي تتم محاذاة البيانات بطريقة جدولية في صفوف وأعمدة. يمكننا إجراء العمليات الأساسية على الصفوف / الأعمدة مثل التحديد والحذف والإضافة وإعادة التسمية. في هذه المقالة ، نستخدم nba.csvملف.



التعامل مع الأعمدة
من أجل التعامل مع الأعمدة ، نقوم بإجراء العمليات الأساسية على الأعمدة مثل التحديد والحذف والإضافة وإعادة التسمية.


اختيار العمود :
من أجل تحديد عمود في Pandas DataFrame ، يمكننا إما الوصول إلى الأعمدة عن طريق الاتصال بها باسم أعمدتها.


# Import pandas package
import pandas as pd
  
# Define a dictionary containing employee data
data = {'Name':['Jai', 'Princi', 'Gaurav', 'Anuj'],
        'Age':[27, 24, 22, 32],
        'Address':['Delhi', 'Kanpur', 'Allahabad', 'Kannauj'],
        'Qualification':['Msc', 'MA', 'MCA', 'Phd']}
  
# Convert the dictionary into DataFrame 
df = pd.DataFrame(data)
  
# select two columns
print(df[['Name', 'Qualification']])
الإخراج:

لمزيد من الأمثلة ، راجع كيفية تحديد أعمدة متعددة في إضافة عمود إطار بيانات الباندا
 
: من
أجل إضافة عمود في Pandas DataFrame ، يمكننا إعلان قائمة جديدة كعمود وإضافتها إلى إطار بيانات موجود.


# Import pandas package 
import pandas as pd
  
# Define a dictionary containing Students data
data = {'Name': ['Jai', 'Princi', 'Gaurav', 'Anuj'],
        'Height': [5.1, 6.2, 5.1, 5.2],
        'Qualification': ['Msc', 'MA', 'Msc', 'Msc']}
  
# Convert the dictionary into DataFrame
df = pd.DataFrame(data)
  
# Declare a list that is to be converted into a column
address = ['Delhi', 'Bangalore', 'Chennai', 'Patna']
  
# Using 'Address' as the column name
# and equating it to the list
df['Address'] = address
  
# Observe the result
print(df)
الإخراج:

لمزيد من الأمثلة ، راجع إضافة عمود جديد إلى DataFrame الموجود في
 
حذف عمود Pandas :
من أجل حذف عمود في Pandas DataFrame ، يمكننا استخدام drop()الطريقة. يتم حذف الأعمدة بإسقاط الأعمدة بأسماء الأعمدة.

# importing pandas module
import pandas as pd
  
# making data frame from csv file
data = pd.read_csv("nba.csv", index_col ="Name" )
  
# dropping passed columns
data.drop(["Team", "Weight"], axis = 1, inplace = True)
  
# display
print(data)
الإخراج:
كما هو موضح في صور الإخراج ، لا يحتوي الإخراج الجديد على الأعمدة التي تم تمريرها. تم إسقاط هذه القيم منذ أن تم ضبط المحور على مساوٍ لـ 1 وتم إجراء التغييرات في إطار البيانات الأصلي لأن inplace كان صحيحًا.

إطار البيانات قبل إسقاط الأعمدة -


إطار البيانات بعد إسقاط الأعمدة

- لمزيد من الأمثلة ، راجع حذف الأعمدة من DataFrame باستخدام Pandas.drop ()

التعامل مع الصفوف:
من أجل التعامل مع الصفوف ، يمكننا إجراء العمليات الأساسية على الصفوف مثل التحديد والحذف والإضافة وإعادة التسمية.

تحديد الصف :
توفر Pandas طريقة فريدة لاسترداد الصفوف من إطار البيانات. DataFrame.loc[]الطريقة المستخدمة لاسترداد الصفوف من Pandas DataFrame. يمكن أيضًا تحديد الصفوف عن طريق تمرير موقع عدد صحيح إلى وظيفة iloc [] .

# importing pandas package
import pandas as pd
  
# making data frame from csv file
data = pd.read_csv("nba.csv", index_col ="Name")
  
# retrieving row by loc method
first = data.loc["Avery Bradley"]
second = data.loc["R.J. Hunter"]
  
  
print(first, "\n\n\n", second)
الإخراج:
كما هو موضح في صورة الإخراج ، تم إرجاع سلسلتين نظرًا لوجود معامل واحد فقط في كلتا المرات.

لمزيد من الأمثلة ، راجع صفوف استخراج Pandas باستخدام .loc []
 
إضافة الصف :
من أجل إضافة صف في Pandas DataFrame ، يمكننا ربط إطار البيانات القديم بآخر جديد.

# importing pandas module 
import pandas as pd 
    
# making data frame 
df = pd.read_csv("nba.csv", index_col ="Name") 
  
df.head(10)
  
new_row = pd.DataFrame({'Name':'Geeks', 'Team':'Boston', 'Number':3,
                        'Position':'PG', 'Age':33, 'Height':'6-2',
                        'Weight':189, 'College':'MIT', 'Salary':99999},
                                                            index =[0])
# simply concatenate both dataframes
df = pd.concat([new_row, df]).reset_index(drop = True)
df.head(5)
الإخراج:

إطار البيانات قبل إضافة صف-


إطار البيانات بعد إضافة صف-


لمزيد من الأمثلة ، راجع إضافة صف في الأعلى في pandas DataFrame
 
حذف الصف :
من أجل حذف صف في Pandas DataFrame ، يمكننا استخدام طريقة drop (). يتم حذف الصفوف بإسقاط الصفوف حسب تسمية الفهرس.

# importing pandas module
import pandas as pd
  
# making data frame from csv file
data = pd.read_csv("nba.csv", index_col ="Name" )
  
# dropping passed values
data.drop(["Avery Bradley", "John Holland", "R.J. Hunter",
                            "R.J. Hunter"], inplace = True)
  
# display
data
الإخراج:
كما هو موضح في صور الإخراج ، لا يحتوي الإخراج الجديد على القيم التي تم تمريرها. تم إسقاط هذه القيم وتم إجراء التغييرات في إطار البيانات الأصلي لأن inplace كان صحيحًا.

إطار البيانات قبل إسقاط القيم -


إطار البيانات بعد إسقاط القيم

- لمزيد من الأمثلة ، راجع حذف الصفوف من DataFrame باستخدام Pandas.drop ()
 
المشكلة المتعلقة بالأعمدة:

كيفية الحصول على أسماء الأعمدة في Pandas dataframe
كيفية إعادة تسمية الأعمدة في Pandas DataFrame
كيفية إسقاط عمود واحد أو عدة أعمدة في Pandas Dataframe
احصل على قيم فريدة من عمود في Pandas DataFrame
كيفية كتابة أسماء الأعمدة بأحرف صغيرة في إطار بيانات Pandas
تطبيق الأحرف الكبيرة على عمود في Pandas dataframe
تكبير الحرف الأول من العمود في Pandas dataframe
احصل على أكبر عدد من القيم من عمود معين في Pandas DataFrame
احصل على قيم n-smallest من عمود معين في Pandas DataFrame
تحويل عمود إلى اسم الصف / الفهرس في Pandas
مشكلة متعلقة بالصفوف:

تطبيق الوظيفة على كل صف في Pandas DataFrame
كيفية الحصول على أسماء الصفوف في إطار بيانات Pandas

<<<<<<<<<<<<<<<<<<<<<

بايثون | Pandas استخراج الصفوف باستخدام .loc []
مستوى الصعوبة: سهل
آخر تحديث: 30 سبتمبر 2019
Python هي لغة رائعة لإجراء تحليل البيانات ، ويرجع ذلك أساسًا إلى النظام البيئي الرائع لحزم Python المتمحورة حول البيانات. Pandas هي إحدى تلك الحزم وتجعل استيراد البيانات وتحليلها أسهل بكثير.

توفر Pandas طريقة فريدة لاسترداد الصفوف من إطار البيانات. DataFrame.loc[]الطريقة هي طريقة تأخذ فقط تسميات الفهرس وتعيد الصف أو إطار البيانات إذا كان ملصق الفهرس موجودًا في إطار بيانات المتصل.

بناء الجملة: pandas.DataFrame.loc []

المعلمات:
تسمية الفهرس: سلسلة أو قائمة سلسلة من تسمية الفهرس للصفوف

نوع الإرجاع: إطار بيانات أو سلسلة حسب المعلمات

لتنزيل ملف CSV المستخدم في الكود ، انقر هنا.

المثال رقم 1: استخراج صف واحد

في هذا المثال ، يتم إنشاء عمود الاسم كعمود فهرس ثم يتم استخراج صفين منفصلين واحدًا تلو الآخر في شكل سلسلة باستخدام تسمية فهرس الصفوف.

# importing pandas package
import pandas as pd
  
# making data frame from csv file
data = pd.read_csv("nba.csv", index_col ="Name")
  
# retrieving row by loc method
first = data.loc["Avery Bradley"]
second = data.loc["R.J. Hunter"]
  
  
print(first, "\n\n\n", second)
الإخراج:
كما هو موضح في صورة الإخراج ، تم إرجاع سلسلتين نظرًا لوجود معامل واحد فقط في كلتا المرات.


 
المثال الثاني: معلمات متعددة

في هذا المثال ، يتكون عمود الاسم كعمود فهرس ثم يتم استخراج صفين منفصلين في نفس الوقت عن طريق تمرير قائمة كمعامل.

# importing pandas package
import pandas as pd
  
# making data frame from csv file
data = pd.read_csv("nba.csv", index_col ="Name")
  
# retrieving rows by loc method
rows = data.loc[["Avery Bradley", "R.J. Hunter"]]
  
# checking data type of rows
print(type(rows))
  
# display
rows
الإخراج:
كما هو موضح في صورة الإخراج ، هذه المرة نوع البيانات للقيمة التي تم إرجاعها هو إطار بيانات. تم استخراج كلا الصفين وعرضهما كإطار بيانات جديد.


 

المثال الثالث: استخراج عدة صفوف بنفس الفهرس

في هذا المثال ، يتم إنشاء اسم الفريق كعمود فهرس ويتم تمرير اسم فريق واحد إلى طريقة .loc للتحقق مما إذا كانت جميع القيم التي تحمل اسم الفريق نفسه قد تم إرجاعها أم لا.

# importing pandas package
import pandas as pd
  
# making data frame from csv file
data = pd.read_csv("nba.csv", index_col ="Team")
  
# retrieving rows by loc method
rows = data.loc["Utah Jazz"]
  
# checking data type of rows
print(type(rows))
  
# display
rows
الإخراج:
كما هو موضح في صورة الإخراج ، تم إرجاع جميع الصفوف التي تحمل اسم الفريق "Utah Jazz" في شكل إطار بيانات.


 

المثال الرابع: استخراج صفوف بين علامتي فهرس

في هذا المثال ، تم تمرير عنوانين للفهرس من الصفوف وتم إرجاع جميع الصفوف التي تقع بين هذين التصنيفين (كلتا تسميات الفهرس شاملة).

# importing pandas package
import pandas as pd
  
# making data frame from csv file
data = pd.read_csv("nba.csv", index_col ="Name")
  
# retrieving rows by loc method
rows = data.loc["Avery Bradley":"Isaiah Thomas"]
  
# checking data type of rows
print(type(rows))
  
# display
rows
الإخراج:
كما هو موضح في صورة الإخراج ، يتم إرجاع جميع الصفوف التي تقع بين تسميتين للفهرس تم تمريرهما في شكل إطار بيانات.


<<<<<<<<<<<<<<<<<<<<<

بايثون | استخراج الصفوف باستخدام Pandas .iloc []
مستوى الصعوبة: سهل
تاريخ التحديث الأخير: 17 سبتمبر 2018
Python هي لغة رائعة لإجراء تحليل البيانات ، ويرجع ذلك أساسًا إلى النظام البيئي الرائع لحزم Python المتمحورة حول البيانات. Pandas هي إحدى تلك الحزم وتجعل استيراد البيانات وتحليلها أسهل بكثير.

توفر Pandas طريقة فريدة لاسترداد الصفوف من إطار البيانات. Dataframe.iloc[]يتم استخدام الطريقة عندما تكون تسمية الفهرس لإطار البيانات شيئًا آخر غير السلاسل الرقمية 0 ، 1 ، 2 ، 3 ... n أو في حالة عدم معرفة المستخدم لتسمية الفهرس. يمكن استخراج الصفوف باستخدام موضع فهرس وهمي غير مرئي في إطار البيانات.

بناء الجملة: pandas.DataFrame.iloc []

المعلمات:
مؤشر الموضع: فهرس موضع الصفوف في عدد صحيح أو قائمة عدد صحيح.

نوع الإرجاع: إطار بيانات أو سلسلة حسب المعلمات

لتنزيل ملف CSV المستخدم في الكود ، انقر هنا.

المثال رقم 1: استخراج صف واحد والمقارنة مع .loc []

في هذا المثال ، يتم استخراج نفس صف رقم الفهرس بواسطة طريقة .iloc [] و.loc [] ومقارنتها. نظرًا لأن عمود الفهرس رقمي افتراضيًا ، فإن تسمية الفهرس ستكون أيضًا أعدادًا صحيحة.

# importing pandas package
import pandas as pd
  
# making data frame from csv file 
data = pd.read_csv("nba.csv")
  
# retrieving rows by loc method 
row1 = data.loc[3]
  
# retrieving rows by iloc method
row2 = data.iloc[3]
  
# checking if values are equal
row1 == row2
الإخراج:
كما هو موضح في صورة الإخراج ، فإن النتائج التي تم إرجاعها بواسطة كلتا الطريقتين هي نفسها.


 

المثال الثاني: استخراج عدة صفوف باستخدام الفهرس

في هذا المثال ، يتم استخراج عدة صفوف أولاً بتمرير قائمة ثم تمرير أعداد صحيحة لاستخراج الصفوف بين هذا النطاق. بعد ذلك ، تتم مقارنة القيمتين.

# importing pandas package
import pandas as pd
  
# making data frame from csv file 
data = pd.read_csv("nba.csv")
  
# retrieving rows by loc method 
row1 = data.iloc[[4, 5, 6, 7]]
  
# retrieving rows by loc method 
row2 = data.iloc[4:8]
  
# comparing values
row1 == row2
الإخراج:
كما هو موضح في صورة الإخراج ، فإن النتائج التي تم إرجاعها بواسطة كلتا الطريقتين هي نفسها. جميع القيم صحيحة باستثناء القيم في عمود الكلية لأن هذه كانت قيم NaN.


<<<<<<<<<<<<<<<<<<<<<

فهرسة واختيار البيانات مع الباندا
مستوى الصعوبة: متوسط
آخر تحديث: ٤ يناير ٢٠١٩
الفهرسة في Pandas:
الفهرسة في الباندا تعني ببساطة اختيار صفوف وأعمدة معينة من البيانات من DataFrame. قد تعني الفهرسة تحديد كل الصفوف وبعض الأعمدة ، وبعض الصفوف وجميع الأعمدة ، أو بعض كل من الصفوف والأعمدة. يمكن أيضًا أن تُعرف الفهرسة باسم تحديد المجموعة الفرعية .



دعونا نرى بعض الأمثلة على الفهرسة في Pandas. في هذه المقالة ، نستخدم nba.csvملف "" لتنزيل ملف CSV ، انقر هنا .

اختيار بعض الصفوف وبعض الأعمدة
لنأخذ DataFrame مع بعض البيانات المزيفة ، والآن نقوم بالفهرسة على DataFrame هذا. في هذا ، نختار بعض الصفوف وبعض الأعمدة من DataFrame. إطار البيانات مع مجموعة البيانات.

لنفترض أننا نريد تحديد أعمدة Age، Collegeوللصفوف Salaryالتي تحتوي على تسميات فقط Amir Johnson، Terry Rozier

وسيبدو إطار البيانات النهائي لدينا على النحو التالي:


اختيار بعض الصفوف وجميع الأعمدة
لنفترض أننا نريد تحديد صف Amir Jhonson، Terry Rozierومع John Hollandكل الأعمدة في إطار البيانات.

سيبدو DataFrame النهائي لدينا كما يلي:


اختيار بعض الأعمدة وجميع الصفوف
لنفترض أننا نريد تحديد الأعمدة العمر والطول والراتب مع جميع الصفوف في إطار البيانات.

سيبدو DataFrame النهائي لدينا كما يلي:

 

فهرسة الباندا باستخدام [ ]، .loc[]، .iloc[ ]،.ix[ ]
هناك العديد من الطرق لسحب العناصر والصفوف والأعمدة من DataFrame. هناك بعض طرق الفهرسة في Pandas والتي تساعد في الحصول على عنصر من DataFrame. تبدو طرق الفهرسة هذه متشابهة جدًا ولكنها تتصرف بشكل مختلف تمامًا. تدعم الباندا أربعة أنواع من الفهرسة متعددة المحاور وهي:

إطار البيانات. [] ؛ تُعرف هذه الوظيفة أيضًا باسم عامل الفهرسة
Dataframe.loc [] : تُستخدم هذه الوظيفة للتسميات.
Dataframe.iloc [] : تُستخدم هذه الوظيفة للمواضع أو على أساس الأعداد الصحيحة
Dataframe.ix [] : تُستخدم هذه الوظيفة لكلٍ من الملصق والأعداد الصحيحة
بشكل جماعي ، يطلق عليهم المفهرسات . هذه هي إلى حد بعيد أكثر الطرق شيوعًا لفهرسة البيانات. هذه هي أربع وظائف تساعد في الحصول على العناصر والصفوف والأعمدة من DataFrame.
 
فهرسة إطار البيانات باستخدام عامل الفهرسة []:
يُستخدم عامل الفهرسة للإشارة إلى الأقواس المربعة التي تلي الكائن. تستخدم الفهرسة أيضًا عامل الفهرسة لإجراء التحديدات .loc. .ilocفي عامل الفهرسة هذا ، يجب الرجوع إلى df [].

اختيار أعمدة واحدة
لتحديد عمود واحد ، نقوم ببساطة بوضع اسم العمود بين القوسين

# importing pandas package
import pandas as pd
  
# making data frame from csv file
data = pd.read_csv("nba.csv", index_col ="Name")
  
# retrieving columns by indexing operator
first = data["Age"]
  
  
  
print(first)
انتاج:


اختيار عدة أعمدة
من أجل تحديد عدة أعمدة ، يتعين علينا تمرير قائمة الأعمدة في عامل الفهرسة.

# importing pandas package
import pandas as pd
  
# making data frame from csv file
data = pd.read_csv("nba.csv", index_col ="Name")
  
# retrieving multiple columns by indexing operator
first = data[["Age", "College", "Salary"]]
  
  
  
first
الإخراج:

 
فهرسة DataFrame باستخدام .loc[ ]:
تحدد هذه الوظيفة البيانات حسب تسمية الصفوف والأعمدة. يقوم df.locالمفهرس بتحديد البيانات بطريقة مختلفة عن طريقة عامل الفهرسة فقط. يمكنه تحديد مجموعات فرعية من الصفوف أو الأعمدة. يمكنه أيضًا تحديد مجموعات فرعية من الصفوف والأعمدة في وقت واحد.

اختيار صف واحد
من أجل تحديد صف واحد باستخدام .loc[]، نضع تسمية صف واحد في .locدالة.

# importing pandas package
import pandas as pd
  
# making data frame from csv file
data = pd.read_csv("nba.csv", index_col ="Name")
  
# retrieving row by loc method
first = data.loc["Avery Bradley"]
second = data.loc["R.J. Hunter"]
  
  
print(first, "\n\n\n", second)
الإخراج:
كما هو موضح في صورة الإخراج ، تم إرجاع سلسلتين نظرًا لوجود معامل واحد فقط في كلتا المرات.

 

اختيار عدة صفوف
من أجل تحديد صفوف متعددة ، نضع جميع تسميات الصفوف في قائمة ونمررها .locلتعمل.

import pandas as pd
  
# making data frame from csv file
data = pd.read_csv("nba.csv", index_col ="Name")
  
# retrieving multiple rows by loc method
first = data.loc[["Avery Bradley", "R.J. Hunter"]]
  
  
  
print(first)
انتاج:

 

اختيار صفين وثلاثة أعمدة
من أجل تحديد صفين وثلاثة أعمدة ، نختار صفين نريد تحديدهما وثلاثة أعمدة ونضعه في قائمة منفصلة مثل هذه:

Dataframe.loc [["row1"، "row2"]، ["column1"، "column2"، "column3"]]
import pandas as pd
  
# making data frame from csv file
data = pd.read_csv("nba.csv", index_col ="Name")
  
# retrieving two rows and three columns by loc method
first = data.loc[["Avery Bradley", "R.J. Hunter"],
                   ["Team", "Number", "Position"]]
  
  
  
print(first)
انتاج:

 

اختيار كل الصفوف وبعض الأعمدة
من أجل تحديد كل الصفوف وبعض الأعمدة ، نستخدم نقطتين مفردتين [:] لتحديد كل الصفوف وقائمة بعض الأعمدة التي نريد تحديدها مثل هذا:

Dataframe.loc [[:، ["عمود 1"، "عمود 2"، "عمود 3"]]
import pandas as pd
  
# making data frame from csv file
data = pd.read_csv("nba.csv", index_col ="Name")
  
# retrieving all rows and some columns by loc method
first = data.loc[:, ["Team", "Number", "Position"]]
  
  
  
print(first)
الإخراج:

 
فهرسة DataFrame باستخدام .iloc[ ]:
تتيح لنا هذه الوظيفة استرداد الصفوف والأعمدة حسب الموضع. للقيام بذلك ، سنحتاج إلى تحديد مواضع الصفوف التي نريدها ، ومواضع الأعمدة التي نريدها أيضًا. df.iloc المفهرس مشابه جدًا ولكنه يستخدم df.loc فقط مواقع الأعداد الصحيحة لإجراء التحديدات الخاصة به.

اختيار صف واحد
من أجل تحديد صف واحد باستخدام .iloc[]، يمكننا تمرير عدد صحيح واحد .iloc[]للعمل.

import pandas as pd
  
# making data frame from csv file
data = pd.read_csv("nba.csv", index_col ="Name")
  
  
# retrieving rows by iloc method 
row2 = data.iloc[3] 
  
  
  
print(row2)
انتاج:

 

اختيار عدة صفوف
من أجل تحديد صفوف متعددة ، يمكننا تمرير قائمة عدد صحيح .iloc[]للعمل.

import pandas as pd
  
# making data frame from csv file
data = pd.read_csv("nba.csv", index_col ="Name")
  
  
# retrieving multiple rows by iloc method 
row2 = data.iloc [[3, 5, 7]]
  
  
  
row2
انتاج:

 

اختيار صفين وعمودين
من أجل تحديد صفين وعمودين ، نقوم بإنشاء قائمة من 2 عدد صحيح للصفوف وقائمة من 2 عدد صحيح للأعمدة ثم تمرير إلى .iloc[]وظيفة.

import pandas as pd
  
# making data frame from csv file
data = pd.read_csv("nba.csv", index_col ="Name")
  
  
# retrieving two rows and two columns by iloc method 
row2 = data.iloc [[3, 4], [1, 2]]
  
  
  
print(row2)
انتاج:

 

اختيار كل الصفوف وبعض الأعمدة
من أجل تحديد جميع الصفوف وبعض الأعمدة ، نستخدم النقطتين المفردة [:] لتحديد كل الصفوف وللأعمدة ، نقوم بعمل قائمة من الأعداد الصحيحة ثم نمررها إلى .iloc[]دالة.

import pandas as pd
  
# making data frame from csv file
data = pd.read_csv("nba.csv", index_col ="Name")
  
  
# retrieving all rows and some columns by iloc method 
row2 = data.iloc [:, [1, 2]]
  
  
  
print(row2)
الإخراج:

 
فهرسة باستخدام Dataframe.ix [] :
في وقت مبكر من تطوير الباندا ، كان هناك مفهرس آخر ، ix. كان هذا المفهرس قادرًا على الاختيار حسب التسمية والموقع الصحيح. على الرغم من أنه كان متعدد الاستخدامات ، إلا أنه تسبب في الكثير من الارتباك لأنه ليس واضحًا. يمكن أن تكون الأعداد الصحيحة أحيانًا تسميات للصفوف أو الأعمدة. وبالتالي كانت هناك حالات كان فيها غامضًا. بشكل عام ، ixيعتمد على التسمية ويعمل كمفهرس .loc تمامًا . ومع ذلك ، .ixيدعم أيضًا تحديدات نوع العدد الصحيح (كما في .iloc) حيث يتم تمرير عدد صحيح. يعمل هذا فقط عندما لا يكون فهرس DataFrame قائمًا على عدد صحيح .ixيقبل أيًا من مدخلات .locو .iloc.
ملاحظة : ملفتم إهمال المفهرس في الإصدارات الأخيرة من Pandas.

اختيار صف واحد .ix[]باستخدام.loc[]
من أجل تحديد صف واحد ، نضع تسمية صف واحد في .ixدالة. تعمل هذه الوظيفة مثل .loc [] إذا مررنا تسمية صف كوسيطة للدالة.

# importing pandas package
import pandas as pd
   
# making data frame from csv file
data = pd.read_csv("nba.csv", index_col ="Name")
   
# retrieving row by ix method
first = data.ix["Avery Bradley"]
  
   
   
print(first)
  
انتاج:


اختيار صف واحد .ix[]باستخدام.iloc[]
من أجل تحديد صف واحد ، يمكننا تمرير عدد صحيح واحد .ix[]للعمل. تشبه هذه الوظيفة وظيفة iloc [] إذا مررنا عددًا صحيحًا في .ix[]دالة.

# importing pandas package
import pandas as pd
   
# making data frame from csv file
data = pd.read_csv("nba.csv", index_col ="Name")
   
# retrieving row by ix method
first = data.ix[1]
  
   
   
print(first)
انتاج:

 

طرق الفهرسة في DataFrame
دور	وصف
Dataframe.head ()	إرجاع nالصفوف العلوية لإطار البيانات.
Dataframe.tail ()	إرجاع الصفوف السفلية nلإطار البيانات.
Dataframe.at []	الوصول إلى قيمة واحدة لزوج تسمية صف / عمود.
Dataframe.iat []	قم بالوصول إلى قيمة واحدة لزوج من الصفوف / العمود حسب موضع العدد الصحيح.
Dataframe.tail ()	فهرسة تستند إلى عدد صحيح بحت للاختيار حسب الموضع.
DataFrame.lookup ()	وظيفة "الفهرسة الفاخرة" القائمة على الملصقات لإطار البيانات.
DataFrame.pop ()	إرجاع العنصر وإسقاطه من الإطار.
DataFrame.xs ()	إرجاع مقطع عرضي (صف (صفوف) أو عمود (أعمدة)) من DataFrame.
DataFrame.get ()	الحصول على عنصر من كائن لمفتاح معين (عمود DataFrame ، شريحة لوحة ، إلخ).
DataFrame.isin ()	إرجاع DataFrame المنطقي الذي يوضح ما إذا كان كل عنصر في DataFrame متضمنًا في قيم.
DataFrame.where ()	قم بإرجاع كائن من نفس الشكل مثل self والذي تكون إدخالاته المقابلة من self حيث يكون cond صحيح وغير ذلك من الآخر.
DataFrame.mask ()	قم بإرجاع كائن من نفس الشكل مثل self والذي تكون إدخالاته المقابلة من self حيث يكون cond خطأ وغير ذلك من الآخر.
DataFrame.query ()	استعلم عن أعمدة إطار بتعبير منطقي.
DataFrame.insert ()	أدخل العمود في DataFrame في الموقع المحدد.
<<<<<<<<<<<<<<<<<<<<<

الفهرسة المنطقية في الباندا
مستوى الصعوبة: متوسط
آخر تحديث: 21 أكتوبر 2021
في الفهرسة المنطقية ، سنحدد مجموعات فرعية من البيانات بناءً على القيم الفعلية للبيانات في DataFrame وليس على تسميات الصفوف / الأعمدة أو مواقع الأعداد الصحيحة. في الفهرسة المنطقية ، نستخدم متجهًا منطقيًا لتصفية البيانات. 
 



الفهرسة المنطقية هي نوع من الفهرسة التي تستخدم القيم الفعلية للبيانات في DataFrame. في الفهرسة المنطقية ، يمكننا تصفية البيانات بأربع طرق - 
 

الوصول إلى DataFrame باستخدام فهرس منطقي
تطبيق قناع منطقي على إطار بيانات
إخفاء البيانات على أساس قيمة العمود
إخفاء البيانات على أساس قيمة مؤشر
الوصول إلى DataFrame باستخدام فهرس منطقي: 
من أجل الوصول إلى إطار بيانات باستخدام فهرس منطقي ، يتعين علينا إنشاء إطار بيانات يحتوي فيه فهرس إطار البيانات على قيمة منطقية "True" أو "False". علي سبيل المثال 
 


# importing pandas as pd
import pandas as pd
  
# dictionary of lists
dict = {'name':["aparna", "pankaj", "sudhir", "Geeku"],
        'degree': ["MBA", "BCA", "M.Tech", "MBA"],
        'score':[90, 40, 80, 98]}
  
df = pd.DataFrame(dict, index = [True, False, True, False])
  
print(df)
انتاج: 
 



لقد أنشأنا الآن إطار بيانات باستخدام الفهرس المنطقي بعد أن يتمكن المستخدم من الوصول إلى إطار بيانات بمساعدة الفهرس المنطقي. يمكن للمستخدم الوصول إلى إطار البيانات باستخدام ثلاث وظائف هي .loc [] ، .iloc [] ، .ix [] 
 

الوصول إلى Dataframe باستخدام فهرس منطقي باستخدام .loc []
من أجل الوصول إلى إطار بيانات باستخدام فهرس منطقي باستخدام .loc [] ، نقوم ببساطة بتمرير قيمة منطقية (صواب أو خطأ) في دالة .loc []. 
 


# importing pandas as pd
import pandas as pd
  
# dictionary of lists
dict = {'name':["aparna", "pankaj", "sudhir", "Geeku"],
        'degree': ["MBA", "BCA", "M.Tech", "MBA"],
        'score':[90, 40, 80, 98]}
 
# creating a dataframe with boolean index
df = pd.DataFrame(dict, index = [True, False, True, False])
 
# accessing a dataframe using .loc[] function
print(df.loc[True])
انتاج: 
 



 

الوصول إلى Dataframe باستخدام فهرس منطقي باستخدام .iloc []
من أجل الوصول إلى إطار بيانات باستخدام .iloc [] ، يتعين علينا تمرير قيمة منطقية (صواب أو خطأ) لكن وظيفة iloc [] تقبل عددًا صحيحًا فقط كوسيطة ، لذا ستظهر خطأً حتى نتمكن من الوصول إلى إطار بيانات فقط عندما تمرير عدد صحيح في iloc [] 
رمز الوظيفة رقم 1: 
 


# importing pandas as pd
import pandas as pd
  
# dictionary of lists
dict = {'name':["aparna", "pankaj", "sudhir", "Geeku"],
        'degree': ["MBA", "BCA", "M.Tech", "MBA"],
        'score':[90, 40, 80, 98]}
 
# creating a dataframe with boolean index 
df = pd.DataFrame(dict, index = [True, False, True, False])
 
# accessing a dataframe using .iloc[] function
print(df.iloc[True])
انتاج: 
 

خطأ مطبعي
كود # 2: 
 


# importing pandas as pd
import pandas as pd
  
# dictionary of lists
dict = {'name':["aparna", "pankaj", "sudhir", "Geeku"],
        'degree': ["MBA", "BCA", "M.Tech", "MBA"],
        'score':[90, 40, 80, 98]}
 
# creating a dataframe with boolean index 
df = pd.DataFrame(dict, index = [True, False, True, False])
  
 
# accessing a dataframe using .iloc[] function
print(df.iloc[1])
انتاج: 
 



 

الوصول إلى Dataframe مع فهرس منطقي باستخدام .ix []
من أجل الوصول إلى إطار بيانات باستخدام .ix [] ، يتعين علينا تمرير القيمة المنطقية (صواب أو خطأ) وقيمة عدد صحيح إلى وظيفة .ix [] لأننا نعلم أن .ix [] الوظيفة هي مزيج من .loc [] و .iloc [] وظيفة. 
كود # 1: 
 


# importing pandas as pd
import pandas as pd
  
# dictionary of lists
dict = {'name':["aparna", "pankaj", "sudhir", "Geeku"],
        'degree': ["MBA", "BCA", "M.Tech", "MBA"],
        'score':[90, 40, 80, 98]}
 
# creating a dataframe with boolean index
df = pd.DataFrame(dict, index = [True, False, True, False])
  
 
# accessing a dataframe using .ix[] function
print(df.ix[True])
انتاج: 
 



كود # 2: 
 


# importing pandas as pd
import pandas as pd
  
# dictionary of lists
dict = {'name':["aparna", "pankaj", "sudhir", "Geeku"],
        'degree': ["MBA", "BCA", "M.Tech", "MBA"],
        'score':[90, 40, 80, 98]}
 
# creating a dataframe with boolean index
df = pd.DataFrame(dict, index = [True, False, True, False])
  
 
# accessing a dataframe using .ix[] function
print(df.ix[1])
انتاج: 
 



  
تطبيق قناع منطقي على إطار البيانات: 
في إطار البيانات ، يمكننا تطبيق قناع منطقي للقيام بذلك ، يمكننا استخدام __getitems__ أو [] accessor. يمكننا تطبيق قناع منطقي من خلال تقديم قائمة من True و False بنفس الطول الموجود في إطار البيانات. عندما نطبق قناعًا منطقيًا ، فسوف نطبع فقط إطار البيانات الذي نمرر فيه القيمة المنطقية True. لتنزيل ملف CSV “ nba1.1 ” انقر هنا .
كود # 1: 
 


# importing pandas as pd
import pandas as pd
  
# dictionary of lists
dict = {'name':["aparna", "pankaj", "sudhir", "Geeku"],
        'degree': ["MBA", "BCA", "M.Tech", "MBA"],
        'score':[90, 40, 80, 98]}
  
df = pd.DataFrame(dict, index = [0, 1, 2, 3])
  
 
 
print(df[[True, False, True, False]])
انتاج: 
 



كود # 2: 
 

# importing pandas package
import pandas as pd
  
# making data frame from csv file
data = pd.read_csv("nba1.1.csv")
  
df = pd.DataFrame(data, index = [0, 1, 2, 3, 4, 5, 6,
                                 7, 8, 9, 10, 11, 12])
 
  
df[[True, False, True, False, True,
    False, True, False, True, False,
                True, False, True]]
انتاج: 
 



  
إخفاء البيانات بناءً على قيمة العمود: 
في إطار البيانات ، يمكننا تصفية البيانات بناءً على قيمة العمود لتصفية البيانات ، ويمكننا تطبيق شروط معينة على إطار البيانات باستخدام عوامل تشغيل مختلفة مثل == ،> ، <، <= ،> = . عندما نطبق هذه العوامل على إطار البيانات ، فإنه ينتج سلسلة من الصواب والخطأ. لتنزيل ملف CSV "nba.csv" ، انقر هنا .
كود # 1: 
 


# importing pandas as pd
import pandas as pd
  
# dictionary of lists
dict = {'name':["aparna", "pankaj", "sudhir", "Geeku"],
        'degree': ["BCA", "BCA", "M.Tech", "BCA"],
        'score':[90, 40, 80, 98]}
 
# creating a dataframe
df = pd.DataFrame(dict)
  
# using a comparison operator for filtering of data
print(df['degree'] == 'BCA')
انتاج: 
 



كود # 2: 
 

# importing pandas package
import pandas as pd
  
# making data frame from csv file
data = pd.read_csv("nba.csv", index_col ="Name")
  
# using greater than operator for filtering of data
print(data['Age'] > 25)
انتاج: 
 



  
إخفاء البيانات بناءً على قيمة الفهرس: 
في إطار البيانات ، يمكننا تصفية البيانات بناءً على قيمة العمود لتصفية البيانات ، ويمكننا إنشاء قناع بناءً على قيم الفهرس باستخدام عوامل تشغيل مختلفة مثل == ،> ، <، إلخ .... لتنزيل ملف CSV “ nba1.1 ” انقر هنا .
كود # 1: 
 


# importing pandas as pd
import pandas as pd
  
# dictionary of lists
dict = {'name':["aparna", "pankaj", "sudhir", "Geeku"],
        'degree': ["BCA", "BCA", "M.Tech", "BCA"],
        'score':[90, 40, 80, 98]}
  
 
df = pd.DataFrame(dict, index = [0, 1, 2, 3])
 
mask = df.index == 0
 
print(df[mask])
انتاج: 
 



كود # 2: 
 

# importing pandas package
import pandas as pd
  
# making data frame from csv file
data = pd.read_csv("nba1.1.csv")
 
# giving a index to a dataframe
df = pd.DataFrame(data, index = [0, 1, 2, 3, 4, 5, 6,
                                 7, 8, 9, 10, 11, 12])
 
# filtering data on index value
mask = df.index > 7
 
df[mask]
انتاج: 
 


<<<<<<<<<<<<<<<<<<<<<
مجموعة الباندا
مستوى الصعوبة: أساسي
آخر تحديث: 29 ديسمبر 2021
Groupby هو مفهوم بسيط للغاية. يمكننا إنشاء مجموعة من الفئات وتطبيق وظيفة على الفئات. إنه مفهوم بسيط ولكنه تقنية قيّمة للغاية تُستخدم على نطاق واسع في علم البيانات. في مشاريع علوم البيانات الحقيقية ، ستتعامل مع كميات كبيرة من البيانات وتجرب الأشياء مرارًا وتكرارًا ، لذلك من أجل الكفاءة ، نستخدم مفهوم Groupby. يعتبر مفهوم Groupby مهمًا حقًا لأنه قدرته على تجميع البيانات بكفاءة ، سواء في الأداء أو في رمز الكمية ، فهو أمر رائع. يشير Groupby بشكل أساسي إلى عملية تتضمن واحدة أو أكثر من الخطوات التالية: 
 

التقسيم: هي عملية نقوم فيها بتقسيم البيانات إلى مجموعة من خلال تطبيق بعض الشروط على مجموعات البيانات.
التطبيق: هي عملية نطبق فيها وظيفة على كل مجموعة بشكل مستقل
الدمج : هي عملية نجمع فيها مجموعات بيانات مختلفة بعد تطبيق groupby والنتائج في بنية بيانات
ستساعد الصورة التالية في فهم العملية التي ينطوي عليها مفهوم Groupby. 
1. قم بتجميع القيم الفريدة من عمود الفريق 
 



2. يوجد الآن دلو لكل مجموعة 
 



3. رمي البيانات الأخرى في الحاويات 
 



4. قم بتطبيق وظيفة على عمود الوزن لكل دلو. 
 



 

تقسيم البيانات إلى مجموعات
التقسيم هو عملية نقوم فيها بتقسيم البيانات إلى مجموعة من خلال تطبيق بعض الشروط على مجموعات البيانات. لتقسيم البيانات ، نطبق شروطًا معينة على مجموعات البيانات. من أجل تقسيم البيانات ، نستخدم الدالة groupby () ، وتستخدم هذه الوظيفة لتقسيم البيانات إلى مجموعات بناءً على بعض المعايير. يمكن تقسيم كائنات الباندا على أي من محاورها. التعريف المجرد للتجميع هو توفير تعيين للتسميات لأسماء المجموعة. يمكن تقسيم مجموعات بيانات الباندا إلى أي من كائناتها. هناك عدة طرق لتقسيم البيانات مثل: 
 

obj.groupby (مفتاح)
obj.groupby (مفتاح ، محور = 1)
obj.groupby ([key1، key2])
ملاحظة: في هذا نشير إلى الكائنات المجمعة على أنها مفاتيح. 
تجميع البيانات بمفتاح واحد: 
من أجل تجميع البيانات بمفتاح واحد ، نقوم بتمرير مفتاح واحد فقط كوسيطة في وظيفة groupby. 
 


# importing pandas module
import pandas as pd
  
# Define a dictionary containing employee data
data1 = {'Name':['Jai', 'Anuj', 'Jai', 'Princi',
                 'Gaurav', 'Anuj', 'Princi', 'Abhi'],
        'Age':[27, 24, 22, 32,
               33, 36, 27, 32],
        'Address':['Nagpur', 'Kanpur', 'Allahabad', 'Kannuaj',
                   'Jaunpur', 'Kanpur', 'Allahabad', 'Aligarh'],
        'Qualification':['Msc', 'MA', 'MCA', 'Phd',
                         'B.Tech', 'B.com', 'Msc', 'MA']}
    
  
# Convert the dictionary into DataFrame 
df = pd.DataFrame(data1)
  
print(df)


الآن نقوم بتجميع بيانات الاسم باستخدام وظيفة groupby (). 
 


# using groupby function
# with one key
 
df.groupby('Name')
print(df.groupby('Name').groups)
انتاج : 
 



  
الآن نقوم بطباعة المدخلات الأولى في جميع المجموعات المشكلة. 
 


# applying groupby() function to
# group the data on Name value.
gk = df.groupby('Name')
   
# Let's print the first entries
# in all the groups formed.
gk.first()
انتاج : 
 



  
تجميع البيانات بمفاتيح متعددة: 
من أجل تجميع البيانات باستخدام مفاتيح متعددة ، نقوم بتمرير مفاتيح متعددة في وظيفة groupby. 
 


# importing pandas module
import pandas as pd
  
# Define a dictionary containing employee data
data1 = {'Name':['Jai', 'Anuj', 'Jai', 'Princi',
                 'Gaurav', 'Anuj', 'Princi', 'Abhi'],
        'Age':[27, 24, 22, 32,
               33, 36, 27, 32],
        'Address':['Nagpur', 'Kanpur', 'Allahabad', 'Kannuaj',
                   'Jaunpur', 'Kanpur', 'Allahabad', 'Aligarh'],
        'Qualification':['Msc', 'MA', 'MCA', 'Phd',
                         'B.Tech', 'B.com', 'Msc', 'MA']}
    
  
# Convert the dictionary into DataFrame 
df = pd.DataFrame(data1)
  
print(df)


الآن نقوم بتجميع بيانات "الاسم" و "المؤهل" معًا باستخدام مفاتيح متعددة في وظيفة groupby. 
 


# Using multiple keys in
# groupby() function
df.groupby(['Name', 'Qualification'])
 
print(df.groupby(['Name', 'Qualification']).groups)
انتاج : 
 



  
تجميع البيانات حسب مفاتيح الفرز: 
يتم فرز مفاتيح المجموعة افتراضيًا باستخدام عملية groupby. يمكن للمستخدم تمرير الفرز = خطأ لعمليات التسريع المحتملة. 
 


# importing pandas module
import pandas as pd
  
# Define a dictionary containing employee data
data1 = {'Name':['Jai', 'Anuj', 'Jai', 'Princi',
                 'Gaurav', 'Anuj', 'Princi', 'Abhi'],
        'Age':[27, 24, 22, 32,
               33, 36, 27, 32], }
    
  
# Convert the dictionary into DataFrame 
df = pd.DataFrame(data1)
  
print(df)


الآن نطبق groupby () بدون فرز 
 


# using groupby function
# without using sort
 
df.groupby(['Name']).sum()
انتاج : 
 



نطبق الآن groupby () باستخدام Sort من أجل تحقيق التعجيلات المحتملة 
 


# using groupby function
# with sort
 
df.groupby(['Name'], sort = False).sum()
انتاج : 
 



  
تجميع البيانات بسمات الكائن: 
تشبه سمات المجموعات القاموس الذي تكون مفاتيحه هي المجموعات الفريدة المحسوبة والقيم المقابلة هي تسميات المحور التي تنتمي إلى كل مجموعة. 
 


# importing pandas module
import pandas as pd
  
# Define a dictionary containing employee data
data1 = {'Name':['Jai', 'Anuj', 'Jai', 'Princi',
                 'Gaurav', 'Anuj', 'Princi', 'Abhi'],
        'Age':[27, 24, 22, 32,
               33, 36, 27, 32],
        'Address':['Nagpur', 'Kanpur', 'Allahabad', 'Kannuaj',
                   'Jaunpur', 'Kanpur', 'Allahabad', 'Aligarh'],
        'Qualification':['Msc', 'MA', 'MCA', 'Phd',
                         'B.Tech', 'B.com', 'Msc', 'MA']}
    
  
# Convert the dictionary into DataFrame 
df = pd.DataFrame(data1)
  
print(df)


الآن نقوم بتجميع البيانات كما نفعل في القاموس باستخدام المفاتيح. 
 


# using keys for grouping
# data
 
df.groupby('Name').groups
انتاج : 
 



  
 

التكرار من خلال المجموعات
من أجل تكرار عنصر من المجموعات ، يمكننا التكرار من خلال كائن مشابه لـ itertools.obj. 
 


# importing pandas module
import pandas as pd
  
# Define a dictionary containing employee data
data1 = {'Name':['Jai', 'Anuj', 'Jai', 'Princi',
                 'Gaurav', 'Anuj', 'Princi', 'Abhi'],
        'Age':[27, 24, 22, 32,
               33, 36, 27, 32],
        'Address':['Nagpur', 'Kanpur', 'Allahabad', 'Kannuaj',
                   'Jaunpur', 'Kanpur', 'Allahabad', 'Aligarh'],
        'Qualification':['Msc', 'MA', 'MCA', 'Phd',
                         'B.Tech', 'B.com', 'Msc', 'MA']}
    
  
# Convert the dictionary into DataFrame 
df = pd.DataFrame(data1)
  
print(df)


الآن نقوم بتكرار عنصر مجموعة بطريقة مماثلة نقوم بها في itertools.obj. 
 


# iterating an element
# of group
 
grp = df.groupby('Name')
for name, group in grp:
    print(name)
    print(group)
    print()
انتاج : 
 



الآن نقوم بتكرار عنصر مجموعة يحتوي على مفاتيح متعددة 
 


# iterating an element
# of group containing
# multiple keys
 
grp = df.groupby(['Name', 'Qualification'])
for name, group in grp:
    print(name)
    print(group)
    print()
الإخراج: 
كما هو موضح في الإخراج سيكون اسم المجموعة tuple 
 



  
 

اختيار المجموعات
من أجل تحديد مجموعة ، يمكننا تحديد المجموعة باستخدام GroupBy.get_group (). يمكننا تحديد مجموعة من خلال تطبيق وظيفة GroupBy.get_group هذه الوظيفة حدد مجموعة واحدة. 
 


# importing pandas module
import pandas as pd
  
# Define a dictionary containing employee data
data1 = {'Name':['Jai', 'Anuj', 'Jai', 'Princi',
                 'Gaurav', 'Anuj', 'Princi', 'Abhi'],
        'Age':[27, 24, 22, 32,
               33, 36, 27, 32],
        'Address':['Nagpur', 'Kanpur', 'Allahabad', 'Kannuaj',
                   'Jaunpur', 'Kanpur', 'Allahabad', 'Aligarh'],
        'Qualification':['Msc', 'MA', 'MCA', 'Phd',
                         'B.Tech', 'B.com', 'Msc', 'MA']}
    
  
# Convert the dictionary into DataFrame 
df = pd.DataFrame(data1)
  
print(df)


الآن نختار مجموعة واحدة باستخدام Groupby.get_group. 
 


# selecting a single group
 
grp = df.groupby('Name')
grp.get_group('Jai')
انتاج : 
 



الآن نختار كائنًا مجمعًا في أعمدة متعددة 
 


# selecting object grouped
# on multiple columns
 
grp = df.groupby(['Name', 'Qualification'])
grp.get_group(('Jai', 'Msc'))
انتاج : 
 



 

تطبيق الوظيفة على المجموعة
بعد تقسيم البيانات إلى مجموعة ، نقوم بتطبيق وظيفة على كل مجموعة من أجل القيام ببعض العمليات ، وهي: 
 

التجميع: هو عملية نحسب فيها إحصائية موجزة (أو إحصائيات) حول كل مجموعة. على سبيل المثال ، حساب المبالغ الجماعية أو الوسائل
التحول: هي عملية نقوم فيها بإجراء بعض العمليات الحسابية الخاصة بالمجموعة وإرجاع مفهرسة متشابهة. على سبيل المثال ، ملء NAs داخل مجموعات بقيمة مشتقة من كل مجموعة
التصفية: هي عملية نتخلص فيها من بعض المجموعات وفقًا لحساب جماعي يقيم صواب أو خطأ. على سبيل المثال ، تصفية البيانات بناءً على مجموع المجموعة أو المتوسط
  
التجميع: 
التجميع هو عملية نحسب فيها إحصائية موجزة عن كل مجموعة. ترجع الدالة المجمعة قيمة مجمعة واحدة لكل مجموعة. بعد تقسيم البيانات إلى مجموعات باستخدام وظيفة groupby ، يمكن إجراء العديد من عمليات التجميع على البيانات المجمعة. 
رمز # 1: استخدام التجميع عبر طريقة التجميع 
 


# importing pandas module
import pandas as pd
 
# importing numpy as np
import numpy as np
  
# Define a dictionary containing employee data
data1 = {'Name':['Jai', 'Anuj', 'Jai', 'Princi',
                 'Gaurav', 'Anuj', 'Princi', 'Abhi'],
        'Age':[27, 24, 22, 32,
               33, 36, 27, 32],
        'Address':['Nagpur', 'Kanpur', 'Allahabad', 'Kannuaj',
                   'Jaunpur', 'Kanpur', 'Allahabad', 'Aligarh'],
        'Qualification':['Msc', 'MA', 'MCA', 'Phd',
                         'B.Tech', 'B.com', 'Msc', 'MA']}
    
  
# Convert the dictionary into DataFrame 
df = pd.DataFrame(data1)
  
print(df)


الآن نقوم بالتجميع باستخدام طريقة التجميع 
 


# performing aggregation using
# aggregate method
 
grp1 = df.groupby('Name')
 
grp1.aggregate(np.sum)
انتاج : 
 



الآن نقوم بالتجميع على مجموعة تحتوي على مفاتيح متعددة 
 


# performing aggregation on
# group containing multiple
# keys
grp1 = df.groupby(['Name', 'Qualification'])
 
grp1.aggregate(np.sum)
انتاج : 
 



  
تطبيق وظائف متعددة في وقت واحد: 
يمكننا تطبيق وظائف متعددة في وقت واحد عن طريق تمرير قائمة أو قاموس وظائف للقيام بالتجميع ، وإخراج DataFrame. 
 


# importing pandas module
import pandas as pd
 
# importing numpy as np
import numpy as np
  
# Define a dictionary containing employee data
data1 = {'Name':['Jai', 'Anuj', 'Jai', 'Princi',
                 'Gaurav', 'Anuj', 'Princi', 'Abhi'],
        'Age':[27, 24, 22, 32,
               33, 36, 27, 32],
        'Address':['Nagpur', 'Kanpur', 'Allahabad', 'Kannuaj',
                   'Jaunpur', 'Kanpur', 'Allahabad', 'Aligarh'],
        'Qualification':['Msc', 'MA', 'MCA', 'Phd',
                         'B.Tech', 'B.com', 'Msc', 'MA']}
    
  
# Convert the dictionary into DataFrame 
df = pd.DataFrame(data1)
  
print(df)


الآن نطبق وظائف متعددة من خلال تمرير قائمة الوظائف. 
 


# applying a function by passing
# a list of functions
 
grp = df.groupby('Name')
 
grp['Age'].agg([np.sum, np.mean, np.std])
انتاج : 
 



  
تطبيق وظائف مختلفة على أعمدة DataFrame: 
من أجل تطبيق تجميع مختلف على أعمدة DataFrame ، يمكننا تمرير قاموس للتجميع. 
 


# importing pandas module
import pandas as pd
 
# importing numpy as np
import numpy as np
  
# Define a dictionary containing employee data
data1 = {'Name':['Jai', 'Anuj', 'Jai', 'Princi',
                 'Gaurav', 'Anuj', 'Princi', 'Abhi'],
        'Age':[27, 24, 22, 32,
               33, 36, 27, 32],
        'Address':['Nagpur', 'Kanpur', 'Allahabad', 'Kannuaj',
                   'Jaunpur', 'Kanpur', 'Allahabad', 'Aligarh'],
        'Qualification':['Msc', 'MA', 'MCA', 'Phd',
                         'B.Tech', 'B.com', 'Msc', 'MA'],
        'Score': [23, 34, 35, 45, 47, 50, 52, 53]}
    
  
# Convert the dictionary into DataFrame 
df = pd.DataFrame(data1)
  
print(df)


نطبق الآن تجميعًا مختلفًا على أعمدة إطار البيانات. 
 


# using different aggregation
# function by passing dictionary
# to aggregate
grp = df.groupby('Name')
 
grp.agg({'Age' : 'sum', 'Score' : 'std'})
انتاج : 
 



التحول: 
التحول هو عملية نقوم فيها بإجراء بعض العمليات الحسابية الخاصة بالمجموعة وإرجاع مفهرسة متشابهة. تقوم طريقة التحويل بإرجاع كائن تمت فهرسته بنفس (الحجم) مثل الكائن الذي يتم تجميعه. يجب أن تكون وظيفة التحويل: 
 

قم بإرجاع نتيجة بنفس حجم مقطع المجموعة
تشغيل عمود بعمود على قطعة المجموعة
لا يتم إجراء عمليات موضعية على مقطع المجموعة.
 


# importing pandas module
import pandas as pd
 
# importing numpy as np
import numpy as np
  
# Define a dictionary containing employee data
data1 = {'Name':['Jai', 'Anuj', 'Jai', 'Princi',
                 'Gaurav', 'Anuj', 'Princi', 'Abhi'],
        'Age':[27, 24, 22, 32,
               33, 36, 27, 32],
        'Address':['Nagpur', 'Kanpur', 'Allahabad', 'Kannuaj',
                   'Jaunpur', 'Kanpur', 'Allahabad', 'Aligarh'],
        'Qualification':['Msc', 'MA', 'MCA', 'Phd',
                         'B.Tech', 'B.com', 'Msc', 'MA'],
        'Score': [23, 34, 35, 45, 47, 50, 52, 53]}
    
  
# Convert the dictionary into DataFrame 
df = pd.DataFrame(data1)
  
print(df)


نقوم الآن بإجراء بعض العمليات الحسابية الخاصة بالمجموعة ونعيد فهرسة متشابهة. 
 


# using transform function
grp = df.groupby('Name')
sc = lambda x: (x - x.mean()) / x.std()*10
grp.transform(sc)
انتاج : 
 



التصفية: 
الترشيح عملية نتخلص فيها من بعض المجموعات ، وفقًا لحساب جماعي يقيم صواب أو خطأ. من أجل تصفية مجموعة ، نستخدم طريقة التصفية ونطبق بعض الشروط التي نقوم من خلالها بتصفية المجموعة. 
 


# importing pandas module
import pandas as pd
 
# importing numpy as np
import numpy as np
  
# Define a dictionary containing employee data
data1 = {'Name':['Jai', 'Anuj', 'Jai', 'Princi',
                 'Gaurav', 'Anuj', 'Princi', 'Abhi'],
        'Age':[27, 24, 22, 32,
               33, 36, 27, 32],
        'Address':['Nagpur', 'Kanpur', 'Allahabad', 'Kannuaj',
                   'Jaunpur', 'Kanpur', 'Allahabad', 'Aligarh'],
        'Qualification':['Msc', 'MA', 'MCA', 'Phd',
                         'B.Tech', 'B.com', 'Msc', 'MA'],
        'Score': [23, 34, 35, 45, 47, 50, 52, 53]}
    
  
# Convert the dictionary into DataFrame 
df = pd.DataFrame(data1)
  
print(df)


نقوم الآن بتصفية البيانات لإرجاع الاسم الذي عاش مرتين أو أكثر. 
 


# filtering data using
# filter data
grp = df.groupby('Name')
grp.filter(lambda x: len(x) >= 2)
انتاج : 
 



<<<<<<<<<<<<<<<<<<<<<

بايثون | دمج الباندا والانضمام والتسلسل
تاريخ التحديث الأخير: 14 يناير 2019
Pandas DataFrame عبارة عن بنية بيانات جدولية غير متجانسة ذات أبعاد ثنائية الحجم قابلة للتغيير مع محاور معنونة (صفوف وأعمدة). إطار البيانات عبارة عن هيكل بيانات ثنائي الأبعاد ، أي تتم محاذاة البيانات بطريقة جدولية في صفوف وأعمدة. يمكننا ضم ، ودمج ، وسلسلة إطار البيانات باستخدام طرق مختلفة. في Dataframe df.merge()، df.join()وتساعد df.concat()الأساليب في ضم ودمج وربط إطار بيانات مختلف.


تسلسل DataFrame
من أجل تسلسل إطار البيانات ، نستخدم concat()وظيفة تساعد في ربط إطار البيانات. يمكننا ربط إطار بيانات بعدة طرق مختلفة ، وهي:

تسلسل DataFrame باستخدام.concat()
ربط DataFrame عن طريق تحديد المنطق على المحاور
تسلسل DataFrame باستخدام.append()
ربط DataFrame بتجاهل الفهارس
ربط DataFrame بمفاتيح المجموعة
التسلسل مع الحزم المختلطة
تسلسل DataFrame باستخدام .concat():
من أجل ربط إطار بيانات ، نستخدم .concat()هذه الوظيفة تسلسل إطار بيانات وإرجاع إطار بيانات جديد.

# importing pandas module
import pandas as pd 

# Define a dictionary containing employee data 
data1 = {'Name':['Jai', 'Princi', 'Gaurav', 'Anuj'], 
        'Age':[27, 24, 22, 32], 
        'Address':['Nagpur', 'Kanpur', 'Allahabad', 'Kannuaj'], 
        'Qualification':['Msc', 'MA', 'MCA', 'Phd']} 
  
# Define a dictionary containing employee data 
data2 = {'Name':['Abhi', 'Ayushi', 'Dhiraj', 'Hitesh'], 
        'Age':[17, 14, 12, 52], 
        'Address':['Nagpur', 'Kanpur', 'Allahabad', 'Kannuaj'], 
        'Qualification':['Btech', 'B.A', 'Bcom', 'B.hons']} 

# Convert the dictionary into DataFrame  
df = pd.DataFrame(data1,index=[0, 1, 2, 3])

# Convert the dictionary into DataFrame  
df1 = pd.DataFrame(data2, index=[4, 5, 6, 7])

print(df, "\n\n", df1) 

نطبق الآن .concatوظيفة من أجل ربط إطارين للبيانات

# using a .concat() method
frames = [df, df1]

res1 = pd.concat(frames)
res1
الإخراج:
كما هو موضح في صورة الإخراج ، قمنا بإنشاء إطارين للبيانات بعد التسلسل ، نحصل على إطار بيانات واحد متسلسل

 
DataFrame عن طريق تعيين المنطق على المحاور:
من أجل سلسلة بيانات الإطار ، يتعين علينا تعيين منطق مختلف على المحاور. يمكننا وضع المحاور بالطرق الثلاث التالية:

أخذ اتحاد كل منهم ، join='outer'. هذا هو الخيار الافتراضي لأنه يؤدي إلى عدم فقدان المعلومات.
أخذ التقاطع ، join='inner'.
استخدم فهرسًا محددًا ، كما تم تمريره إلى join_axesالوسيطة
# importing pandas module
import pandas as pd 

# Define a dictionary containing employee data 
data1 = {'Name':['Jai', 'Princi', 'Gaurav', 'Anuj'], 
        'Age':[27, 24, 22, 32], 
        'Address':['Nagpur', 'Kanpur', 'Allahabad', 'Kannuaj'], 
        'Qualification':['Msc', 'MA', 'MCA', 'Phd'],
        'Mobile No': [97, 91, 58, 76]} 
  
# Define a dictionary containing employee data 
data2 = {'Name':['Gaurav', 'Anuj', 'Dhiraj', 'Hitesh'], 
        'Age':[22, 32, 12, 52], 
        'Address':['Allahabad', 'Kannuaj', 'Allahabad', 'Kannuaj'], 
        'Qualification':['MCA', 'Phd', 'Bcom', 'B.hons'],
        'Salary':[1000, 2000, 3000, 4000]} 

# Convert the dictionary into DataFrame  
df = pd.DataFrame(data1,index=[0, 1, 2, 3])

# Convert the dictionary into DataFrame  
df1 = pd.DataFrame(data2, index=[2, 3, 6, 7]) 

print(df, "\n\n", df1) 
الآن قمنا بتعيين محاور join = innerلتقاطع إطار البيانات

# applying concat with axes
# join = 'inner'
res2 = pd.concat([df, df1], axis=1, join='inner')

res2
الإخراج:
كما هو موضح في صورة الإخراج ، نحصل على تقاطع إطار البيانات

 
الآن قمنا بتعيين محاور join = outerلتوحيد إطار البيانات.

# using a .concat for
# union of dataframe
res2 = pd.concat([df, df1], axis=1, sort=False)

res2
الإخراج:
كما هو موضح في صورة الإخراج ، نحصل على اتحاد dataframe

 
الآن استخدمنا فهرسًا محددًا ، كما تم تمريره إلى join_axesالوسيطة

# using join_axes
res3 = pd.concat([df, df1], axis=1, join_axes=[df.index])

res3
الإخراج:

 
ربط DataFrame باستخدام.append()
من أجل تسلسل إطار بيانات ، نستخدم .append()وظيفة هذه الوظيفة تتسلسل على طول المحور = 0 ، أي الفهرس. هذه الوظيفة موجودة من قبل .concat.

# importing pandas module
import pandas as pd 

# Define a dictionary containing employee data 
data1 = {'Name':['Jai', 'Princi', 'Gaurav', 'Anuj'], 
        'Age':[27, 24, 22, 32], 
        'Address':['Nagpur', 'Kanpur', 'Allahabad', 'Kannuaj'], 
        'Qualification':['Msc', 'MA', 'MCA', 'Phd']} 
  
# Define a dictionary containing employee data 
data2 = {'Name':['Abhi', 'Ayushi', 'Dhiraj', 'Hitesh'], 
        'Age':[17, 14, 12, 52], 
        'Address':['Nagpur', 'Kanpur', 'Allahabad', 'Kannuaj'], 
        'Qualification':['Btech', 'B.A', 'Bcom', 'B.hons']} 

# Convert the dictionary into DataFrame  
df = pd.DataFrame(data1,index=[0, 1, 2, 3])

# Convert the dictionary into DataFrame  
df1 = pd.DataFrame(data2, index=[4, 5, 6, 7])

print(df, "\n\n", df1) 
نحن الآن نطبق .append()الوظيفة في التسلسل إلى إطار البيانات

# using append function

res = df.append(df1)
res

الإخراج:

 
ربط إطار البيانات بتجاهل الفهارس:
من أجل تجميع إطار بيانات عن طريق تجاهل الفهارس ، نتجاهل الفهرس الذي ليس له معنى مفيد ، وقد ترغب في إلحاقها وتجاهل حقيقة أنها
قد تحتوي على فهارس متداخلة. من أجل القيام بذلك نستخدمها ignore_indexكحجة.

# importing pandas module
import pandas as pd 
 
# Define a dictionary containing employee data 
data1 = {'Name':['Jai', 'Princi', 'Gaurav', 'Anuj'], 
        'Age':[27, 24, 22, 32], 
        'Address':['Nagpur', 'Kanpur', 'Allahabad', 'Kannuaj'], 
        'Qualification':['Msc', 'MA', 'MCA', 'Phd'],
        'Mobile No': [97, 91, 58, 76]} 
   
# Define a dictionary containing employee data 
data2 = {'Name':['Gaurav', 'Anuj', 'Dhiraj', 'Hitesh'], 
        'Age':[22, 32, 12, 52], 
        'Address':['Allahabad', 'Kannuaj', 'Allahabad', 'Kannuaj'], 
        'Qualification':['MCA', 'Phd', 'Bcom', 'B.hons'],
        'Salary':[1000, 2000, 3000, 4000]} 
 
# Convert the dictionary into DataFrame  
df = pd.DataFrame(data1,index=[0, 1, 2, 3])
 
# Convert the dictionary into DataFrame  
df1 = pd.DataFrame(data2, index=[2, 3, 6, 7]) 
 
 
print(df, "\n\n", df1) 

الآن سنقوم بتطبيقه ignore_indexكحجة.

# using ignore_index
res = pd.concat([df, df1], ignore_index=True)

res
الإخراج:

 
ربط DataFrame بمفاتيح المجموعة:
من أجل ربط إطار البيانات بمفاتيح المجموعة ، نتجاوز أسماء الأعمدة باستخدام وسيطة المفاتيح. تتمثل الوسيطة Keys في تجاوز أسماء الأعمدة عند إنشاء DataFrame جديد استنادًا إلى سلسلة موجودة.


# importing pandas module
import pandas as pd 

# Define a dictionary containing employee data 
data1 = {'Name':['Jai', 'Princi', 'Gaurav', 'Anuj'], 
        'Age':[27, 24, 22, 32], 
        'Address':['Nagpur', 'Kanpur', 'Allahabad', 'Kannuaj'], 
        'Qualification':['Msc', 'MA', 'MCA', 'Phd']} 
  
# Define a dictionary containing employee data 
data2 = {'Name':['Abhi', 'Ayushi', 'Dhiraj', 'Hitesh'], 
        'Age':[17, 14, 12, 52], 
        'Address':['Nagpur', 'Kanpur', 'Allahabad', 'Kannuaj'], 
        'Qualification':['Btech', 'B.A', 'Bcom', 'B.hons']} 

# Convert the dictionary into DataFrame  
df = pd.DataFrame(data1,index=[0, 1, 2, 3])

# Convert the dictionary into DataFrame  
df1 = pd.DataFrame(data2, index=[4, 5, 6, 7])

print(df, "\n\n", df1)  

الآن نستخدم المفاتيح كوسيطة.

# using keys 
frames = [df, df1 ]

res = pd.concat(frames, keys=['x', 'y'])
res
الإخراج:

 
التسلسل مع ndims مختلطة:
يمكن للمستخدم أن يسلسل مزيجًا من المتسلسلة وإطار البيانات. سيتم تحويل السلسلة إلى DataFrame باستخدام اسم العمود كاسم السلسلة.

# importing pandas module
import pandas as pd 

# Define a dictionary containing employee data 
data1 = {'Name':['Jai', 'Princi', 'Gaurav', 'Anuj'], 
        'Age':[27, 24, 22, 32], 
        'Address':['Nagpur', 'Kanpur', 'Allahabad', 'Kannuaj'], 
        'Qualification':['Msc', 'MA', 'MCA', 'Phd']} 
  
# Convert the dictionary into DataFrame  
df = pd.DataFrame(data1,index=[0, 1, 2, 3])

# creating a series
s1 = pd.Series([1000, 2000, 3000, 4000], name='Salary')

print(df, "\n\n", s1) 
سنقوم الآن بخلط السلسلة وإطار البيانات معًا

# combining series and dataframe
res = pd.concat([df, s1], axis=1)

res
انتاج :

 

دمج DataFrame
لدى Pandas خيارات لدمج وانضمام عالي الأداء في الذاكرة. عندما نحتاج إلى دمج إطارات بيانات كبيرة جدًا ، تعمل الصلات كطريقة فعالة لأداء هذه العمليات بسرعة. لا يمكن إجراء الصلات إلا على إطارين DataFrames في وقت واحد ، ويُشار إليهما كجدولين يسار ويمين. المفتاح هو العمود الشائع الذي سيتم ضم إطاري البيانات عليه. من الممارسات الجيدة استخدام المفاتيح التي لها قيم فريدة في جميع أنحاء العمود لتجنب التكرار غير المقصود لقيم الصف. توفر Pandas وظيفة واحدة ، دمج () ، كنقطة دخول لجميع عمليات ربط قاعدة البيانات القياسية بين كائنات DataFrame.
هناك أربع طرق أساسية للتعامل مع الصلة (داخلية ، يسار ، يمين ، خارجي) ، بناءً على الصفوف التي يجب أن تحتفظ ببياناتها.

الكود رقم 1: دمج إطار البيانات مع مجموعة مفاتيح فريدة واحدة

# importing pandas module
import pandas as pd 

# Define a dictionary containing employee data 
data1 = {'key': ['K0', 'K1', 'K2', 'K3'],
         'Name':['Jai', 'Princi', 'Gaurav', 'Anuj'], 
        'Age':[27, 24, 22, 32],} 
  
# Define a dictionary containing employee data 
data2 = {'key': ['K0', 'K1', 'K2', 'K3'],
         'Address':['Nagpur', 'Kanpur', 'Allahabad', 'Kannuaj'], 
        'Qualification':['Btech', 'B.A', 'Bcom', 'B.hons']} 

# Convert the dictionary into DataFrame  
df = pd.DataFrame(data1)

# Convert the dictionary into DataFrame  
df1 = pd.DataFrame(data2) 
 

print(df, "\n\n", df1) 

نحن الآن نستخدم .merge()تركيبة مفاتيح فريدة واحدة

# using .merge() function
res = pd.merge(df, df1, on='key')

res
الإخراج:

كود # 2: دمج إطار البيانات باستخدام مفاتيح ربط متعددة.

# importing pandas module
import pandas as pd 

# Define a dictionary containing employee data 
data1 = {'key': ['K0', 'K1', 'K2', 'K3'],
         'key1': ['K0', 'K1', 'K0', 'K1'],
         'Name':['Jai', 'Princi', 'Gaurav', 'Anuj'], 
        'Age':[27, 24, 22, 32],} 
  
# Define a dictionary containing employee data 
data2 = {'key': ['K0', 'K1', 'K2', 'K3'],
         'key1': ['K0', 'K0', 'K0', 'K0'],
         'Address':['Nagpur', 'Kanpur', 'Allahabad', 'Kannuaj'], 
        'Qualification':['Btech', 'B.A', 'Bcom', 'B.hons']} 

# Convert the dictionary into DataFrame  
df = pd.DataFrame(data1)

# Convert the dictionary into DataFrame  
df1 = pd.DataFrame(data2) 
 

print(df, "\n\n", df1) 

الآن نقوم بدمج dataframe باستخدام مفاتيح متعددة

# merging dataframe using multiple keys
res1 = pd.merge(df, df1, on=['key', 'key1'])

res1

الإخراج:

 
دمج dataframe باستخدام howفي وسيطة:
نستخدم كيفية دمج الوسيطة التي تحدد كيفية تحديد المفاتيح التي سيتم تضمينها في الجدول الناتج. إذا لم تظهر مجموعة مفاتيح في الجدولين الأيمن أو الأيسر ، فستكون القيم في الجدول المرتبط هي NA. فيما يلي ملخص لكيفية استخدام الخيارات وأسماء SQL المكافئة لها:

طريقة الدمج	انضمام الاسم	وصف
غادر	ترك صلة خارجية	استخدم المفاتيح من الإطار الأيسر فقط
الصحيح	حق الانضمام الخارجي	استخدم المفاتيح من الإطار الأيمن فقط
خارجي	الانضمام الخارجي الكامل	استخدم اتحاد المفاتيح من كلا الإطارين
داخلي	صلة داخلية	استخدم تقاطع المفاتيح من كلا الإطارين
# importing pandas module
import pandas as pd 

# Define a dictionary containing employee data 
data1 = {'key': ['K0', 'K1', 'K2', 'K3'],
         'key1': ['K0', 'K1', 'K0', 'K1'],
         'Name':['Jai', 'Princi', 'Gaurav', 'Anuj'], 
        'Age':[27, 24, 22, 32],} 
  
# Define a dictionary containing employee data 
data2 = {'key': ['K0', 'K1', 'K2', 'K3'],
         'key1': ['K0', 'K0', 'K0', 'K0'],
         'Address':['Nagpur', 'Kanpur', 'Allahabad', 'Kannuaj'], 
        'Qualification':['Btech', 'B.A', 'Bcom', 'B.hons']} 

# Convert the dictionary into DataFrame  
df = pd.DataFrame(data1)

# Convert the dictionary into DataFrame  
df1 = pd.DataFrame(data2) 
 

print(df, "\n\n", df1) 

الآن حددنا how = 'left'لاستخدام المفاتيح من الإطار الأيسر فقط.

# using keys from left frame
res = pd.merge(df, df1, how='left', on=['key', 'key1'])

res
الإخراج:

 
حددنا الآن how = 'right'من أجل استخدام مفاتيح من الإطار الأيمن فقط.

# using keys from right frame
res1 = pd.merge(df, df1, how='right', on=['key', 'key1'])

res1
الإخراج:

 
حددنا الآن how = 'outer'من أجل الحصول على اتحاد المفاتيح من إطارات البيانات.

# getting union  of keys
res2 = pd.merge(df, df1, how='outer', on=['key', 'key1'])

res2
الإخراج:

 
قمنا الآن بتعيين how = 'inner'تقاطع المفاتيح من إطارات البيانات.

# getting intersection of keys
res3 = pd.merge(df, df1, how='inner', on=['key', 'key1'])

res3
انتاج :

 

الانضمام إلى DataFrame
من أجل الانضمام إلى dataframe ، نستخدم .join()وظيفة تُستخدم هذه الوظيفة لدمج أعمدة إطارين من DataFrame يحتمل أن يكونا مفهرستين بشكل مختلف في DataFrame نتيجة واحدة.

# importing pandas module
import pandas as pd 
 
# Define a dictionary containing employee data 
data1 = {'Name':['Jai', 'Princi', 'Gaurav', 'Anuj'], 
        'Age':[27, 24, 22, 32]} 
   
# Define a dictionary containing employee data 
data2 = {'Address':['Allahabad', 'Kannuaj', 'Allahabad', 'Kannuaj'], 
        'Qualification':['MCA', 'Phd', 'Bcom', 'B.hons']} 
 
# Convert the dictionary into DataFrame  
df = pd.DataFrame(data1,index=['K0', 'K1', 'K2', 'K3'])
 
# Convert the dictionary into DataFrame  
df1 = pd.DataFrame(data2, index=['K0', 'K2', 'K3', 'K4'])


print(df, "\n\n", df1)  

نحن الآن نستخدم .join()الطريقة من أجل الانضمام إلى إطارات البيانات

# joining dataframe
res = df.join(df1)

res
الإخراج:

 
نستخدم الآن how = 'outer'من أجل الحصول على الاتحاد

# getting union
res1 = df.join(df1, how='outer')

res1
الإخراج:

 
ربط dataframe باستخدام onفي وسيطة:
من أجل الانضمام إلى dataframes نستخدمها onفي وسيطة. join()يأخذ وسيطة اختيارية والتي قد تكون عمودًا أو أسماء أعمدة متعددة ، والتي تحدد أن DataFrame الذي تم تمريره يجب محاذاته في هذا العمود في DataFrame.

# importing pandas module
import pandas as pd 
 
# Define a dictionary containing employee data 
data1 = {'Name':['Jai', 'Princi', 'Gaurav', 'Anuj'], 
        'Age':[27, 24, 22, 32],
        'Key':['K0', 'K1', 'K2', 'K3']} 
   
# Define a dictionary containing employee data 
data2 = {'Address':['Allahabad', 'Kannuaj', 'Allahabad', 'Kannuaj'], 
        'Qualification':['MCA', 'Phd', 'Bcom', 'B.hons']} 
 
# Convert the dictionary into DataFrame  
df = pd.DataFrame(data1)
 
# Convert the dictionary into DataFrame  
df1 = pd.DataFrame(data2, index=['K0', 'K2', 'K3', 'K4'])


print(df, "\n\n", df1) 

الآن نحن نستخدم .joinحجة "على"

# using on argument in join
res2 = df.join(df1, on='Key')

res2
الإخراج:

 
ضم DataFrame المفهرس فرديًا مع DataFrame متعدد الفهرسة:
من أجل الانضمام إلى إطار بيانات مفهرس فردي مع إطار بيانات متعدد الفهرسة ، سيتطابق المستوى مع اسم فهرس الإطار المفهرس مقابل اسم مستوى متعدد إطار مفهرس.

# importing pandas module
import pandas as pd 
 
# Define a dictionary containing employee data 
data1 = {'Name':['Jai', 'Princi', 'Gaurav'], 
        'Age':[27, 24, 22]} 
   
# Define a dictionary containing employee data 
data2 = {'Address':['Allahabad', 'Kannuaj', 'Allahabad', 'Kanpur'], 
        'Qualification':['MCA', 'Phd', 'Bcom', 'B.hons']} 
 
# Convert the dictionary into DataFrame  
df = pd.DataFrame(data1, index=pd.Index(['K0', 'K1', 'K2'], name='key'))

index = pd.MultiIndex.from_tuples([('K0', 'Y0'), ('K1', 'Y1'),
                                   ('K2', 'Y2'), ('K2', 'Y3')],
                                   names=['key', 'Y'])
 
# Convert the dictionary into DataFrame  
df1 = pd.DataFrame(data2, index= index)


print(df, "\n\n", df1)

الآن ننضم إلى إطار البيانات المفهرس مع إطار بيانات متعدد الفهرسة

# joining singly indexed with
# multi indexed
result = df.join(df1, how='inner')

result
انتاج :

<<<<<<<<<<<<<<<<<<<<<
بايثون | العمل مع التاريخ والوقت باستخدام الباندا
مستوى الصعوبة: متوسط
آخر تحديث: 09 ديسمبر 2021
أثناء العمل مع البيانات ، من المعتاد جدًا مواجهة بيانات السلاسل الزمنية. Pandas هي أداة مفيدة للغاية أثناء العمل مع بيانات السلاسل الزمنية. 

توفر Pandas مجموعة مختلفة من الأدوات التي يمكننا من خلالها أداء جميع المهام الضرورية على بيانات التاريخ والوقت. دعنا نحاول أن نفهم من خلال الأمثلة الموضحة أدناه.

الرمز # 1: إنشاء إطار بيانات التواريخ 

import pandas as pd
 
# Create dates dataframe with frequency 
data = pd.date_range('1/1/2011', periods = 10, freq ='H')
 
data
انتاج: 



 رمز # 2: إنشاء نطاق من التواريخ وإظهار الميزات الأساسية 

# Create date and time with dataframe
data = pd.date_range('1/1/2011', periods = 10, freq ='H')
 
x = datetime.now()
x.month, x.year
انتاج:

(9 ، 2018)
يمكن تقسيم ميزات التاريخ والوقت إلى فئتين. أول لحظات زمنية في فترة والثانية يمر الوقت منذ فترة معينة. يمكن أن تكون هذه الميزات مفيدة جدًا لفهم الأنماط في البيانات.

قسّم تاريخًا معينًا إلى ميزات - 

إرجاع pandas.Series.dt.year سنة تاريخ الوقت. 
إرجاع pandas.Series.dt.month شهر تاريخ الوقت. 
إرجاع pandas.Series.dt.day يوم تاريخ الوقت. 
تُرجع pandas.Series.dt.hour ساعة التاريخ والوقت. 
إرجاع pandas.Series.dt.minute الدقيقة من تاريخ الوقت.
قم بإحالة جميع خصائص التاريخ والوقت من هنا .

الرمز رقم 3: تقسيم التاريخ والوقت إلى ميزات منفصلة  

# Create date and time with dataframe
rng = pd.DataFrame()
rng['date'] = pd.date_range('1/1/2011', periods = 72, freq ='H')
 
# Print the dates in dd-mm-yy format
rng[:5]
 
# Create features for year, month, day, hour, and minute
rng['year'] = rng['date'].dt.year
rng['month'] = rng['date'].dt.month
rng['day'] = rng['date'].dt.day
rng['hour'] = rng['date'].dt.hour
rng['minute'] = rng['date'].dt.minute
 
# Print the dates divided into features
rng.head(3)
انتاج: 



الرمز رقم 4: للحصول على الوقت الحالي ، استخدم Timestamp.now () ثم قم بتحويل الطابع الزمني إلى تاريخ ووقت والوصول مباشرة إلى السنة أو الشهر أو اليوم.

# Input present datetime using Timestamp
t = pandas.tslib.Timestamp.now()
t
الطابع الزمني ("2018-09-18 17: 18: 49.101496")
# Convert timestamp to datetime
t.to_datetime()
datetime.datetime (2018، 9، 18، 17، 18، 49، 101496)
# Directly access and print the features
t.year
t.month
t.day
t.hour
t.minute
t.second
2018
8
25
15
53
دعنا نحلل هذه المشكلة على مجموعة بيانات حقيقية uforeports. 

import pandas as pd
 
url = 'http://bit.ly/uforeports'
 
# read csv file
df = pd.read_csv(url)          
df.head()
انتاج: 



# Convert the Time column to datetime format
df['Time'] = pd.to_datetime(df.Time)
 
df.head()


# shows the type of each column data
df.dtypes
كائن المدينة
كائن Colored Reported
شكل كائن تم الإبلاغ عنه
كائن الدولة
الوقت والتاريخ والوقت 64 [ns]
نوع dtype: كائن
# Get hour detail from time data
df.Time.dt.hour.head()
0 22
1 20
2 14
3 13
4 19
الاسم: الوقت ، النوع: int64
# Get name of each date
df.Time.dt.weekday_name.head()
0 الأحد
1 الاثنين
2 الأحد
3 الاثنين
4 الثلاثاء
الاسم: الوقت ، النوع: الكائن
# Get ordinal day of the year
df.Time.dt.dayofyear.head()
0152
1181
2 46
3152
4108
الاسم: الوقت ، النوع: int64

<<<<<<<<<<<<<
بايثون | الباندا تعمل مع بيانات النص
تاريخ التحديث الأخير: 14 يناير 2019
تم تجهيز السلاسل والفهارس بمجموعة من طرق معالجة السلسلة التي تجعل من السهل العمل على كل عنصر من عناصر المصفوفة. ولعل الأهم من ذلك ، أن هذه الطرق تستبعد القيم المفقودة / NA تلقائيًا. يتم الوصول إلى هذه عبر سمة str وبصفة عامة ، لها أسماء تطابق طرق السلسلة المضمنة المكافئة (العددية).


الأحرف الصغيرة والكبيرة في البيانات
من أجل تحويل البيانات إلى أحرف صغيرة ، نستخدم str.lower () هذه الوظيفة تحول جميع الأحرف الكبيرة إلى أحرف صغيرة. في حالة عدم وجود أحرف كبيرة ، يتم إرجاع السلسلة الأصلية. من أجل تكبير البيانات ، نستخدم str.upper () هذه الوظيفة تحول جميع الأحرف الصغيرة إلى أحرف كبيرة. في حالة عدم وجود أحرف صغيرة ، يتم إرجاع السلسلة الأصلية.
كود # 1:

# Import pandas package 
import pandas as pd 
   
# Define a dictionary containing employee data 
data = {'Name':['Jai', 'Princi', 'Gaurav', 'Anuj'], 
        'Age':[27, 24, 22, 32], 
        'Address':['Delhi', 'Kanpur', 'Allahabad', 'Kannauj'], 
        'Qualification':['Msc', 'MA', 'MCA', 'Phd']} 
   
# Convert the dictionary into DataFrame  
df = pd.DataFrame(data) 
   
# converting and overwriting values in column 
df["Name"]= df["Name"].str.lower()
 
print(df)
تشغيل على IDE
الإخراج:
كما هو موضح في الصورة الناتجة لإطار البيانات ، تم تحويل جميع القيم الموجودة في عمود الاسم إلى أحرف صغيرة.

 
في هذا المثال ، نستخدم nba.csvملف.
كود # 2:

# importing pandas package 
import pandas as pd 
   
# making data frame from csv file 
data = pd.read_csv("nba.csv") 
   
# converting and overwriting values in column 
data["Team"]= data["Team"].str.upper() 
   
# display 
data 
الإخراج:
كما هو موضح في الصورة الناتجة لإطار البيانات ، تم تحويل جميع القيم الموجودة في عمود الفريق إلى أحرف كبيرة.

 

تقسيم واستبدال البيانات
لتقسيم البيانات ، نستخدم str.split () هذه الدالة ترجع قائمة من السلاسل بعد كسر السلسلة المحددة بواسطة الفاصل المحدد ولكن يمكن تطبيقها فقط على سلسلة فردية. يمكن تطبيق طريقة الباندا str.split()على سلسلة كاملة. يجب أن يكون .str مسبوقًا في كل مرة قبل استدعاء هذه الطريقة لتمييزها عن وظيفة Python الافتراضية ، وإلا فسيؤدي ذلك إلى ظهور خطأ. لاستبدال البيانات ، نستخدم str.replace () هذه الوظيفة تعمل مثل طريقة Python فقط ، لكنها تعمل على السلسلة أيضًا. قبل استدعاء سلسلة Pandas ، يجب أن تكون بادئة .str لتمييزها عن طريقة الاستبدال الافتراضية في Python. كود # 1 .replace().replace()

# importing pandas module  
import pandas as pd 
     
# Define a dictionary containing employee data 
data = {'Name':['Jai', 'Princi', 'Gaurav', 'Anuj'], 
        'Age':[27, 24, 22, 32], 
        'Address':['Nagpur', 'Kanpur', 'Allahabad', 'Knnuaj'], 
        'Qualification':['Msc', 'MA', 'MCA', 'Phd']} 
 
# Convert the dictionary into DataFrame  
df = pd.DataFrame(data) 
    
# dropping null value columns to avoid errors 
df.dropna(inplace = True) 
    
# new data frame with split value columns 
df["Address"]= df["Address"].str.split("a", n = 1, expand = True) 
   
# df display 
print(df)
تشغيل على IDE
الإخراج:
كما هو موضح في صورة الإخراج ، تم فصل عمود العنوان عند التكرار الأول للحرف "a" وليس في التكرار الأخير منذ أن تم ضبط المعلمة n على 1 (بحد أقصى 1 فاصل في سلسلة).

 
كود # 2:

# importing pandas module 
import pandas as pd
 
# reading csv file from url
data = pd.read_csv("nba.csv")
 
# overwriting column with replaced value of age
data["Age"]= data["Age"].replace(25.0, "Twenty five")
 
# creating a filter for age column 
# where age = "Twenty five"
filter = data["Age"]=="Twenty five"
 
# printing only filtered columns
data.where(filter).dropna()
الإخراج:
كما هو موضح في صورة الإخراج ، تم استبدال جميع القيم الموجودة في عمود العمر التي لها عمر = 25.0 بـ "خمسة وعشرون".

 

تسلسل البيانات
من أجل ربط سلسلة أو فهرس ، نستخدم str.cat () ، تُستخدم هذه الوظيفة لربط السلاسل إلى سلسلة المتصل التي تم تمريرها. يمكن تمرير قيم مميزة من سلسلة مختلفة ولكن يجب أن يكون طول كلتا السلسلتين متماثلًا. يجب أن يكون .str مسبوقًا لتمييزه عن طريقة Python الافتراضية.
كود # 1:

# importing pandas module 
import pandas as pd 
   
# Define a dictionary containing employee data 
data = {'Name':['Jai', 'Princi', 'Gaurav', 'Anuj'], 
        'Age':[27, 24, 22, 32], 
        'Address':['Nagpur', 'Kanpur', 'Allahabad', 'Kannuaj'], 
        'Qualification':['Msc', 'MA', 'MCA', 'Phd']} 
 
# Convert the dictionary into DataFrame  
df = pd.DataFrame(data) 
 
# making copy of address column 
new = df["Address"].copy() 
   
# concatenating address with name column 
# overwriting name column 
df["Name"]= df["Name"].str.cat(new, sep =", ") 
   
# display 
print(df)
تشغيل على IDE
الإخراج:
كما هو موضح في صورة الإخراج ، تم ربط كل سلسلة في عمود العنوان لها نفس فهرس السلسلة في عمود الاسم بفاصل “, “.

 
كود # 2:

# importing pandas module
import pandas as pd
 
# importing csv from link
data = pd.read_csv("nba.csv")
 
# making copy of team column
new = data["Team"].copy()
 
# concatenating team with name column
# overwriting name column
data["Name"]= data["Name"].str.cat(new, sep =", ")
 
# display
data
الإخراج:
كما هو موضح في صورة الإخراج ، تم ربط كل سلسلة في عمود الفريق لها نفس فهرس السلسلة في عمود الاسم بفاصل "،".

 

إزالة المسافات البيضاء من البيانات
لإزالة المسافات البيضاء ، نستخدم str.strip () و str.rstrip () و str.lstrip () هذه الوظائف المستخدمة للتعامل مع المسافات البيضاء (بما في ذلك السطر الجديد) في أي بيانات نصية. كما يمكن رؤيته في الاسم ، يتم استخدام str.lstrip () لإزالة المسافات من الجانب الأيسر من السلسلة ، و str.rstrip () لإزالة المسافات من الجانب الأيمن من السلسلة و str.strip () يزيل المسافات من كليهما الجوانب. نظرًا لأن هذه هي وظيفة pandas بنفس اسم وظائف Python الافتراضية ، يجب أن يكون .str مسبوقًا لإخبار المترجم بأنه يتم استدعاء وظيفة Pandas.
كود # 1:

# importing pandas module 
import pandas as pd 
   
# Define a dictionary containing employee data 
data = {'Name':['Jai', 'Princi', 'Gaurav', 'Anuj'], 
        'Age':[27, 24, 22, 32], 
        'Address':['Nagpur junction', 'Kanpur junction', 
                   'Nagpur junction', 'Kannuaj junction'], 
        'Qualification':['Msc', 'MA', 'MCA', 'Phd']} 
 
# Convert the dictionary into DataFrame  
df = pd.DataFrame(data)
   
# replacing address name and adding spaces in start and end 
new = df["Address"].replace("Nagpur junction", "  Nagpur junction  ").copy() 
   
# checking with custom string 
print(new.str.strip()==" Nagpur junction")
print(new.str.strip()=="Nagpur junction ")
print(new.str.strip()==" Nagpur junction ")
تشغيل على IDE
الإخراج:
كما هو موضح في صورة الإخراج ، فإن المقارنة تُرجع False لجميع الشروط الثلاثة ، مما يعني أنه تمت إزالة المسافات بنجاح من كلا الجانبين ولم يعد السلسلة يحتوي على مسافات.

 
كود # 2:

# importing pandas module 
import pandas as pd 
   
# making data frame 
data = pd.read_csv("nba.csv") 
   
# replacing team name and adding spaces in start and end 
new = data["Team"].replace("Boston Celtics", "  Boston Celtics  ").copy() 
   
# checking with custom removed space string 
new.str.lstrip()=="Boston Celtics  "
الإخراج:
كما هو موضح في الصورة الناتجة ، تكون المقارنة صحيحة بعد إزالة مسافات الجانب الأيسر

 

استخراج البيانات
لاستخراج البيانات ، نستخدم str.extract () ، تقبل هذه الوظيفة تعبيرًا عاديًا مع مجموعة التقاط واحدة على الأقل. يؤدي استخراج تعبير عادي مع أكثر من مجموعة إلى إرجاع DataFrame بعمود واحد لكل مجموعة. العناصر غير المتطابقة تُرجع صفًا ممتلئًا بـ NaN.
كود # 1:

# importing pandas module 
import pandas as pd 
 
# creating a series 
s = pd.Series(['a1', 'b2', 'c3'])
 
# Extracting a data
n= s.str.extract(r'([ab])(\d)')
 
print(n)
تشغيل على IDE
الإخراج:
كما هو موضح في صورة الإخراج ، ستعيد هاتان المجموعتان DataFrame بعمودين. غير المطابقات ستكون NaN.

كود # 2:

# importing pandas module 
import pandas as pd 
 
# creating a series 
s = pd.Series(['a1', 'b2', 'c3'])
 
# Extracting a data
n = s.str.extract(r'(?P<Geeks>[ab])(?P<For>\d)')
 
print(n)
تشغيل على IDE
الإخراج:
كما هو موضح في صورة الإخراج ، ستصبح تلك المجموعات المسماة أسماء أعمدة في النتيجة.

 

طرق Pandas str :

دور	وصف
str.lower ()	طريقة لتحويل أحرف السلسلة إلى أحرف صغيرة
str.upper ()	طريقة لتحويل أحرف سلسلة إلى أحرف كبيرة
str.find ()	تستخدم الطريقة للبحث عن سلسلة فرعية في كل سلسلة موجودة في سلسلة
str.rfind ()	تستخدم الطريقة للبحث عن سلسلة فرعية في كل سلسلة موجودة في سلسلة من الجانب الأيمن
str.findall ()	تُستخدم الطريقة أيضًا للعثور على سلاسل فرعية أو فواصل في كل سلسلة في سلسلة
شارع اصلفا ()	تُستخدم الطريقة للتحقق مما إذا كانت جميع الأحرف في كل سلسلة في سلسلة أبجدية (az / AZ)
str.isdecimal ()	يتم استخدام الطريقة للتحقق مما إذا كانت جميع الأحرف في سلسلة عشرية
str.title ()	طريقة لتكبير الحرف الأول من كل كلمة في سلسلة
str.len ()	الطريقة ترجع عدد الأحرف في سلسلة
str.replace ()	الأسلوب يستبدل سلسلة فرعية ضمن سلسلة بقيمة أخرى يوفرها المستخدم
يحتوي str. ()	تختبر الطريقة إذا كان النمط أو التعبير العادي موجودًا في سلسلة من سلسلة أو فهرس
str.extract ()	استخرج المجموعات من المطابقة الأولى لنمط التعبير العادي.
str.startswith ()	تختبر الطريقة ما إذا كانت بداية كل عنصر سلسلة تطابق نمطًا ما
str.endswith ()	تختبر الطريقة ما إذا كانت نهاية كل عنصر سلسلة تطابق نمطًا ما
str.isdigit ()	تُستخدم الطريقة للتحقق مما إذا كانت جميع الأحرف في كل سلسلة في سلسلة هي أرقام
str.lstrip ()	الطريقة تزيل المسافة البيضاء من الجانب الأيسر (البداية) من السلسلة
str.rstrip ()	الطريقة تزيل المسافة البيضاء من الجانب الأيمن (نهاية) السلسلة
str.strip ()	طريقة لإزالة المسافة البيضاء البادئة والزائدة من السلسلة
str.split ()	الطريقة تقسم قيمة سلسلة ، بناءً على حدوث قيمة محددة من قبل المستخدم
str.join ()	يتم استخدام الطريقة لضم جميع العناصر الموجودة في القائمة الموجودة في سلسلة ذات محدد تم تمريره
str.cat ()	يتم استخدام الطريقة لربط السلاسل إلى سلسلة المتصل التي تم تمريرها من السلسلة.
شارع كرر ()	يتم استخدام الطريقة لتكرار قيم السلسلة في نفس موضع السلسلة التي تم تمريرها نفسها
str.get ()	يتم استخدام الطريقة للحصول على العنصر في موضع النجاح
شارع. partition ()	الطريقة تقسم السلسلة فقط عند التواجد الأول على عكس str.split ()
str.rpartition ()	الطريقة تقسم السلسلة مرة واحدة فقط وهذا عكسي للغاية. يعمل بطريقة مماثلة مثل str.partition () و str.split ()
str.pad ()	طريقة لإضافة حشوة (مسافات بيضاء أو أحرف أخرى) لكل عنصر سلسلة في سلسلة
str.swapcase ()	طريقة تبديل حالة كل سلسلة في سلسلة

 >>>>>>>>>>>>>>>>>>>>
بايثون | قراءة csv باستخدام pandas.read_csv ()
مستوى الصعوبة: سهل
آخر تحديث: 29 أغسطس 2021
Python هي لغة رائعة لإجراء تحليل البيانات ، ويرجع ذلك أساسًا إلى النظام البيئي الرائع لحزم Python المتمحورة حول البيانات. Pandas هي إحدى تلك الحزم وتجعل استيراد البيانات وتحليلها أسهل بكثير.
استيراد الباندا: 
 

استيراد الباندا كما pd
  
الكود رقم 1: read_csv هي وظيفة باندا مهمة لقراءة ملفات csv والقيام بعمليات عليها. 
 

# Import pandas
import pandas as pd
 
# reading csv file
pd.read_csv("filename.csv")
من السهل فتح ملف CSV. ولكن هناك العديد من الأشياء الأخرى التي يمكن للمرء القيام بها من خلال هذه الوظيفة فقط لتغيير الكائن المرتجع تمامًا. على سبيل المثال ، يمكن للمرء قراءة ملف csv ليس فقط محليًا ، ولكن من عنوان URL من خلال read_csv أو يمكن للمرء اختيار الأعمدة اللازمة للتصدير حتى لا نضطر إلى تحرير المصفوفة لاحقًا.
فيما يلي قائمة بالمعلمات التي تأخذها مع قيمها الافتراضية .
 

pd.read_csv (filepath_or_buffer، sep = '،'، delimiter = None، header = 'infer'، names = None، index_col = None، usecols = None، squeeze = False، prefix = None، mangle_dupe_cols = True، dtype = None، engine = None، المحولات = لا شيء ، true_values ​​= لا شيء ، false_values ​​= لا شيء ، skipinitialspace = False ، skiprows = بلا ، nrows = بلا ، na_values ​​= بلا ، keep_default_na = صحيح ، na_filter = صحيح ، مطول = خطأ ، تخطي رقم_الخط = صحيح ، parse_dates = False ، inferat = True، parse_dates = False، inferat False، keep_date_col = False، date_parser = None، dayfirst = False، iterator = False، chunksize = None، compression = 'infer'، آلاف = لا شيء، عشري = b '.'، lineterminator = None، quotechar = '' '، الاقتباس = 0 ، escapechar = بلا ، تعليق = بلا ، ترميز = بلا ، لهجة = بلا ، tupleize_cols = بلا ، error_bad_lines = True ، warn_bad_lines = True ، skipfooter = 0 ، doublequote = True ، delim_whitespace = False ، low_memory = True ، memory_map = False ، float_precision = لا شيء) 
 

ليس كل منهم مهمًا كثيرًا ولكن تذكرها يوفر في الواقع الوقت لأداء نفس الوظائف بمفردك. يمكن للمرء أن يرى معلمات أي وظيفة عن طريق الضغط على shift + tab في دفتر jupyter. فيما يلي مفيدة منها مع استخدامها:
 

معامل	يستخدم
filepath_or_buffer	URL أو موقع Dir للملف
سبتمبر	تعني الفاصل ، الافتراضي هو "،" كما في csv (قيم مفصولة بفواصل)
index_col	
يجعل العمود الذي تم تمريره كمؤشر بدلاً من 0 ، 1 ، 2 ، 3 ... r 
 



 

رأس	
يجعل الصفوف التي تم تمريرها [قائمة int / int] كرأس
 



 

use_cols	يستخدم فقط العمود الذي تم تمريره [قائمة السلسلة] لإنشاء إطار البيانات
يعصر	إذا كان صحيحًا وتم تمرير عمود واحد فقط ، يتم إرجاع سلسلة الباندا
skiprows	تجاوزت عمليات التخطي صفوفًا في إطار بيانات جديد
راجع الارتباط إلى مجموعة البيانات المستخدمة من هنا .
كود # 2:
 

# importing Pandas library
import pandas as pd
 
pd.read_csv(filepath_or_buffer = "pokemon.csv")
 
# makes the passed rows header
pd.read_csv("pokemon.csv", header =[1, 2])
 
# make the passed column as index instead of 0, 1, 2, 3....
pd.read_csv("pokemon.csv", index_col ='Type')
 
# uses passed cols only for data frame
pd.read_csv("pokemon.csv", usecols =["Type"])
 
# returns pandas series if there is only one column
pd.read_csv("pokemon.csv", usecols =["Type"],
                              squeeze = True)
                               
# skips the passed rows in new series
pd.read_csv("pokemon.csv",
            skiprows = [1, 2, 3, 4])

>>>>>>>>>>>>>>>>>>>>
بايثون | العمل مع Pandas و XlsxWriter | مجموعة 1
مستوى الصعوبة: متوسط
تاريخ التحديث الأخير: 26 ديسمبر 2018
Python Pandas هي مكتبة لتحليل البيانات. يمكنه قراءة مجموعات البيانات الصغيرة والكبيرة وتصفيتها وإعادة ترتيبها وإخراجها في مجموعة من التنسيقات بما في ذلك Excel.

يكتب Pandas ملفات Excel باستخدام وحدات XlsxWriter النمطية.

XlsxWriterهي وحدة Python لكتابة الملفات XLSX بتنسيق الملف. يمكن استخدامه لكتابة نص وأرقام وصيغ في أوراق عمل متعددة. كما أنه يدعم ميزات مثل التنسيق والصور والمخططات وإعداد الصفحة والمرشحات التلقائية والتنسيق الشرطي والعديد من الميزات الأخرى.

الكود رقم 1: تحويل إطار بيانات Pandas إلى ملف xlsx باستخدام Pandas و XlsxWriter.

# import pandas as pd
import pandas as pd
  
# Create a Pandas dataframe from some data.
df = pd.DataFrame({'Data': ['Geeks', 'For', 'geeks', 'is',
                               'portal', 'for', 'geeks']})
  
# Create a Pandas Excel writer
# object using XlsxWriter as the engine.
writer = pd.ExcelWriter('pandasEx.xlsx', 
                   engine ='xlsxwriter')
  
# Write a dataframe to the worksheet.
df.to_excel(writer, sheet_name ='Sheet1')
  
# Close the Pandas Excel writer
# object and output the Excel file.
writer.save()
انتاج :

 

الرمز # 2: كتابة إطارات بيانات متعددة لأوراق العمل باستخدام Pandas و XlsxWriter.

# import pandas as pd
import pandas as pd
  
  
# Create some Pandas dataframes from some data.
df1 = pd.DataFrame({'Data': [11, 12, 13, 14]})
df2 = pd.DataFrame({'Data': [21, 22, 23, 24]})
df3 = pd.DataFrame({'Data': [31, 32, 33, 34]})
  
# Create a Pandas Excel writer object 
# using XlsxWriter as the engine.
writer = pd.ExcelWriter('pandas_multiple.xlsx', 
                          engine ='xlsxwriter')
  
# Write each dataframe to a different worksheet.
df1.to_excel(writer, sheet_name ='Sheet1')
df2.to_excel(writer, sheet_name ='Sheet2')
df3.to_excel(writer, sheet_name ='Sheet3')
  
# Close the Pandas Excel writer object
# and output the Excel file.
writer.save()
الإخراج:

 
كود # 3: وضع إطارات البيانات في ورقة عمل باستخدام Pandas و XlsxWriter.

# import pandas as pd
import pandas as pd
  
  
# Create some Pandas dataframes from some data.
df1 = pd.DataFrame({'Data': [11, 12, 13, 14]})
df2 = pd.DataFrame({'Data': [21, 22, 23, 24]})
df3 = pd.DataFrame({'Data': [31, 32, 33, 34]})
df4 = pd.DataFrame({'Data': [41, 42, 43, 44]})
  
# Create a Pandas Excel writer object
# using XlsxWriter as the engine.
writer = pd.ExcelWriter('pandas_positioning.xlsx', 
                             engine ='xlsxwriter')
  
# write and Positioning the dataframes in the worksheet.
# Default position, cell A1.
df1.to_excel(writer, sheet_name ='Sheet1')  
df2.to_excel(writer, sheet_name ='Sheet1', startcol = 3)
df3.to_excel(writer, sheet_name ='Sheet1', startrow = 6)
  
# It is also possible to write the
# dataframe without the header and index.
df4.to_excel(writer, sheet_name ='Sheet1',
             startrow = 7, startcol = 4,
             header = False, index = False)
  
# Close the Pandas Excel writer object
# and output the Excel file.
writer.save()
