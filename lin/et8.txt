

مشغلي بايثون
مستوى الصعوبة: سهل
آخر تحديث: 07 سبتمبر 2021
تُستخدم عوامل Python بشكل عام لإجراء عمليات على القيم والمتغيرات. هذه هي الرموز القياسية المستخدمة لغرض العمليات المنطقية والحسابية. في هذه المقالة ، سننظر في أنواع مختلفة من مشغلي بايثون. 

العمليات الحسابية
تُستخدم العوامل الحسابية لإجراء عمليات حسابية مثل الجمع والطرح والضرب والقسمة.

المشغل أو العامل	وصف	بناء الجملة
+	إضافة: يضيف معاملين	س + ص
-	الطرح: طرح معاملين	س - ص
*	الضرب: يضاعف معاملين	س * ص
/	قسم (عائم): يقسم المعامل الأول على الثاني	س / ص
//	التقسيم (الطابق): يقسم المعامل الأول على الثاني	س // ص
٪	المعامل: إرجاع الباقي عند قسمة المعامل الأول على الثاني	س٪ ص
**	القوة: ترجع أولاً مرفوعة إلى القوة الثانية	س ** ص
مثال: العمليات الحسابية في بايثون

# Examples of Arithmetic Operator
a = 9
b = 4
 
# Addition of numbers
add = a + b
 
# Subtraction of numbers
sub = a - b
 
# Multiplication of number
mul = a * b
 
# Division(float) of number
div1 = a / b
 
# Division(floor) of number
div2 = a // b
 
# Modulo of both number
mod = a % b
 
# Power
p = a ** b
 
# print results
print(add)
print(sub)
print(mul)
print(div1)
print(div2)
print(mod)
print(p)
انتاج |
13
5
36
2.25
2
1
6561
ملاحظة: يرجى الرجوع إلى الاختلافات بين / و // للحصول على بعض الحقائق المثيرة للاهتمام حول هذين العاملين.

عوامل المقارنة
مقارنة بين العوامل الارتباطية تقارن القيم. تقوم بإرجاع صواب أو خطأ وفقًا للشرط.

المشغل أو العامل	وصف	بناء الجملة
>	أكبر من: صواب إذا كان المعامل الأيسر أكبر من المعامل الأيمن	س> ص
<	أقل من: صحيح إذا كان المعامل الأيسر أقل من المعامل الأيمن	س <ص
==	يساوي: صواب إذا كان كلا المعاملين متساويين	س == ص
! =	لا يساوي - صحيح إذا كانت المعاملات غير متساوية	س! = ص
> =	أكبر من أو يساوي True إذا كان المعامل الأيسر أكبر من أو يساوي اليمين	س> = ص
<=	أصغر من أو يساوي True إذا كان المعامل الأيسر أقل من أو يساوي اليمين	س <= ص
مثال: عوامل المقارنة في بايثون

# Examples of Relational Operators
a = 13
b = 33
 
# a > b is False
print(a > b)
 
# a < b is True
print(a < b)
 
# a == b is False
print(a == b)
 
# a != b is True
print(a != b)
 
# a >= b is False
print(a >= b)
 
# a <= b is True
print(a <= b)
انتاج |
خطأ شنيع
صحيح
خطأ شنيع
صحيح
خطأ شنيع
صحيح
العوامل المنطقية
تؤدي العوامل المنطقية العمليات المنطقية AND و المنطقية OR و المنطقية NOT . يتم استخدامه لدمج العبارات الشرطية.

المشغل أو العامل	وصف	بناء الجملة
و	المنطقية AND: صحيح إذا كان كلا المعاملين صحيحًا	س وص
أو	منطقي OR: صحيح إذا كان أي من المعاملين صحيحًا 	س أو ص
ليس	المنطقي NOT: صحيح إذا كان المعامل خاطئًا 	لا x
مثال: العوامل المنطقية في بايثون

# Examples of Logical Operator
a = True
b = False
 
# Print a and b is False
print(a and b)
 
# Print a or b is True
print(a or b)
 
# Print not a is False
print(not a)
انتاج |
خطأ شنيع
صحيح
خطأ شنيع
عوامل Bitwise
يعمل مشغلو Bitwise على البتات ويقومون بعمليات البت بتات. هذه تستخدم للعمل على الأرقام الثنائية.

المشغل أو العامل	وصف	بناء الجملة
&	أحادي المعامل AND	س و ذ
|	أحادي المعامل OR	x | ذ
~	أحادي المعامل لا	~ x
^	Bitwise XOR	س ^ ص
>>	التحول الأيمن على مستوى البت	س >>
<<	إزاحة لليسار على مستوى البت	س <<
مثال: معاملات Bitwise في Python

# Examples of Bitwise operators
a = 10
b = 4
 
# Print bitwise AND operation
print(a & b)
 
# Print bitwise OR operation
print(a | b)
 
# Print bitwise NOT operation
print(~a)
 
# print bitwise XOR operation
print(a ^ b)
 
# print bitwise right shift operation
print(a >> 2)
 
# print bitwise left shift operation
print(a << 2)
انتاج |
0
14
-11
14
2
40
مشغلي التخصيص 
تُستخدم عوامل التخصيص لتعيين قيم للمتغيرات.

المشغل أو العامل	وصف	بناء الجملة
=	قم بتعيين قيمة الجانب الأيمن من التعبير لمعامل الجانب الأيسر 	س = ص + ض
+ =	إضافة AND: أضف معامل الجانب الأيمن مع معامل الجانب الأيسر ثم قم بتعيينه إلى المعامل الأيسر	أ + = ب أ = أ + ب
- =	اطرح AND: اطرح المعامل الأيمن من المعامل الأيسر ثم قم بتعيينه إلى المعامل الأيسر	أ- = ب أ = أب
* =	ضرب AND: اضرب المعامل الأيمن بالمعامل الأيسر ثم قم بتعيينه إلى المعامل الأيسر	أ * = ب أ = أ * ب
/ =	قسمة AND: قسمة المعامل الأيسر بالمعامل الأيمن ثم قم بتعيينه للمعامل الأيسر	أ / = ب أ = أ / ب
٪ =	المعامل AND: يأخذ المعامل باستخدام المعاملين الأيسر والأيمن ويعين النتيجة إلى المعامل الأيسر	أ٪ = ب أ = أ٪ ب
// =	قسمة (أرضية) AND: قسّم المعامل الأيسر بالمعامل الأيمن ثم قم بتعيين القيمة (الأرضية) إلى المعامل الأيسر	أ // = ب أ = أ // ب
** =	الأس AND: حساب قيمة الأس (رفع القدرة) باستخدام المعاملات وتعيين قيمة للمعامل الأيسر	أ ** = ب أ = أ ** ب
& =	تنفيذ Bitwise AND على المعاملات وتعيين قيمة للمعامل الأيسر	أ & = ب أ = أ & ب
| =	تنفيذ Bitwise OR على المعاملات وتعيين قيمة للمعامل الأيسر	أ | = ب أ = أ | ب
^ =	ينفذ Bitwise xOR في المعاملات ويخصص قيمة للمعامل الأيسر	أ ^ = ب أ = أ ^ ب
>> =	ينفذ إزاحة لليمين على مستوى البت على المعاملات ويخصص قيمة للمعامل الأيسر	أ >> = ب أ = أ >> ب
<< =	ينفذ إزاحة لليسار على مستوى البت على المعاملات ويخصص قيمة للمعامل الأيسر	أ << = ب أ = أ << ب
مثال: عوامل التعيين في بايثون

# Examples of Assignment Operators
a = 10
 
# Assign value
b = a
print(b)
 
# Add and assign value
b += a
print(b)
 
# Subtract and assign value
b -= a
print(b)
 
# multiply and assign
b *= a
print(b)
 
# bitwise lishift operator
b <<= a
print(b)
انتاج |
10
20
10
100
102400
مشغلي الهوية
هي وليست هي عوامل الهوية كلاهما يستخدم للتحقق مما إذا كانت هناك قيمتان موجودتان في نفس الجزء من الذاكرة. متغيرين متساويين لا يعنيان أنهما متطابقان. 

يكون           صحيحًا إذا كانت المعاملات متطابقة 
 غير       صحيحة إذا كانت المعاملات غير متطابقة
مثال: مشغل الهوية

a = 10
b = 20
c = a
 
print(a is not b)
print(a is c)
انتاج |
صحيح
صحيح
مشغلي العضوية
في وليس في مشغلي العضوية ؛ تُستخدم لاختبار ما إذا كانت القيمة أو المتغير في تسلسل.

في             True إذا تم العثور على القيمة في التسلسل
 وليس في         True إذا لم يتم العثور على القيمة في التسلسل
مثال: مشغل العضوية

# Python program to illustrate
# not 'in' operator
x = 24
y = 20
list = [10, 20, 30, 40, 50]
 
if (x not in list):
    print("x is NOT present in given list")
else:
    print("x is present in given list")
 
if (y in list):
    print("y is present in given list")
else:
    print("y is NOT present in given list")
انتاج |
x غير موجود في قائمة معينة
y موجود في قائمة معينة
أسبقية وترابط المشغلين
أسبقية وترابط المشغلين: تحدد أسبقية المشغل وترابطه أولويات المشغل.

أسبقية المشغل
يتم استخدام هذا في تعبير يحتوي على أكثر من عامل له أسبقية مختلفة لتحديد العملية التي يجب إجراؤها أولاً.

مثال: أسبقية عامل التشغيل

# Examples of Operator Precedence
 
# Precedence of '+' & '*'
expr = 10 + 20 * 30
print(expr)
 
# Precedence of 'or' & 'and'
name = "Alex"
age = 0
 
if name == "Alex" or name == "John" and age >= 2:
    print("Hello! Welcome.")
else:
    print("Good Bye!!")
انتاج |
610
مرحبا! مرحبا.
جمعية المشغل
إذا احتوى التعبير على عاملين أو أكثر لهما نفس الأسبقية ، فسيتم استخدام ارتباط عامل التشغيل لتحديده. يمكن أن يكون إما من اليسار إلى اليمين أو من اليمين إلى اليسار.

مثال: جمعية المشغل

# Examples of Operator Associativity
 
# Left-right associativity
# 100 / 10 * 10 is calculated as
# (100 / 10) * 10 and not
# as 100 / (10 * 10)
print(100 / 10 * 10)
 
# Left-right associativity
# 5 - 2 + 3 is calculated as
# (5 - 2) + 3 and not
# as 5 - (2 + 3)
print(5 - 2 + 3)
 
# left-right associativity
print(5 - (2 + 3))
 
# right-left associativity
# 2 ** 3 ** 2 is calculated as
# 2 ** (3 ** 2) and not
# as (2 ** 3) ** 2
print(2 ** 3 ** 2)
انتاج |
100.0
6
0
512