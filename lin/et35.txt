
افتح ملفًا في بايثون
مستوى الصعوبة: متوسط
تاريخ التحديث الأخير: 06 ديسمبر 2019
توفر Python وظائف مضمنة لإنشاء الملفات وكتابتها وقراءتها. هناك نوعان من الملفات التي يمكن التعامل معها في Python ، الملفات النصية العادية والملفات الثنائية (مكتوبة بلغة ثنائية ، 0sو 1s).

الملفات النصية: في هذا النوع من الملفات ، يتم إنهاء كل سطر من النص بحرف خاص يسمى EOL (نهاية السطر) ، وهو حرف السطر الجديد ( ‘\n’) في Python افتراضيًا.
الملفات الثنائية: في هذا النوع من الملفات ، لا يوجد فاصل لخط ويتم تخزين البيانات بعد تحويلها إلى لغة ثنائية مفهومة آليًا.
راجع المقالات أدناه للحصول على فكرة حول أساسيات معالجة الملفات.

أساسيات معالجة الملفات
القراءة والكتابة لملف
فتح ملف
يشير فتح ملف إلى تجهيز الملف إما للقراءة أو للكتابة. يمكن القيام بذلك باستخدام open()الوظيفة. تقوم هذه الوظيفة بإرجاع كائن ملف وتأخذ وسيطتين ، إحداهما تقبل اسم الملف والأخرى تقبل الوضع (وضع الوصول). الآن ، السؤال الذي يطرح نفسه ما هو وضع الوصول؟

تتحكم أوضاع الوصول في نوع العمليات الممكنة في الملف المفتوح. يشير إلى كيفية استخدام الملف بمجرد فتحه. تحدد هذه الأوضاع أيضًا موقع مقبض الملف في الملف. يشبه مقبض الملف المؤشر ، الذي يحدد من أين يجب قراءة البيانات أو كتابتها في الملف. هناك 6 أوضاع وصول في بيثون.

للقراءة فقط ('r'): فتح ملف نصي للقراءة. يتم وضع المقبض في بداية الملف. إذا كان الملف غير موجود ، يرفع خطأ الإدخال / الإخراج. هذا أيضًا هو الوضع الافتراضي الذي يتم فيه فتح الملف.
القراءة والكتابة ('r +'): افتح الملف للقراءة والكتابة. يتم وضع المقبض في بداية الملف. يرفع خطأ الإدخال / الإخراج إذا كان الملف غير موجود.
اكتب فقط ('w'): افتح الملف للكتابة. بالنسبة للملف الموجود ، يتم اقتطاع البيانات والكتابة فوقها. يتم وضع المقبض في بداية الملف. ينشئ الملف إذا كان الملف غير موجود.
اكتب واقرأ ('w +'): افتح الملف للقراءة والكتابة. بالنسبة للملف الموجود ، يتم اقتطاع البيانات والكتابة فوقها. يتم وضع المقبض في بداية الملف.
إلحاق فقط ("أ"): افتح الملف للكتابة. يتم إنشاء الملف إذا كان غير موجود. يتم وضع المقبض في نهاية الملف. سيتم إدخال البيانات التي تتم كتابتها في النهاية ، بعد البيانات الموجودة.
إلحاق وقراءة ("a +"): افتح الملف للقراءة والكتابة. يتم إنشاء الملف إذا كان غير موجود. يتم وضع المقبض في نهاية الملف. سيتم إدخال البيانات التي تتم كتابتها في النهاية ، بعد البيانات الموجودة.
بناء الجملة:

File_object = مفتوح (r "File_Name" ، "Access_Mode")
ملاحظة: يجب أن يكون الملف موجودًا في نفس الدليل مثل نص Python النصي ، وإلا يجب كتابة العنوان الكامل للملف.

المثال 1: افترض أن الملف النصي بدا بهذا الشكل

فتح ملف بيثون

نريد قراءة محتوى الملف باستخدام Python.

# Python program to demonstrate
# opening a file
  
  
# Open function to open the file "myfile.txt"  
# (same directory) in read mode and store
# it's reference in the variable file1
  
file1 = open("myfile.txt")
  
# Reading from file
print(file1.read())
  
file1.close()
انتاج:

مرحبا بكم في GeeksForGeeks !!
المثال الثاني: لنفترض أننا نريد كتابة المزيد من البيانات إلى الملف أعلاه باستخدام Python.

# Python program to demonstrate
# opening a file
  
  
# Open function to open the file "myfile.txt"
# (same directory) in append mode and store
# it's reference in the variable file1
file1 = open("myfile.txt", "a")
  
# Writing to file
file1.write("\nWriting to file :)")
  
# Closing file
file1.close()
انتاج:


<<<<<<<<<<<<<<<<<<<
كيف تقرأ من ملف في بايثون
مستوى الصعوبة: أساسي
تاريخ التحديث الأخير: 28 تشرين الثاني (نوفمبر) 2019
توفر Python وظائف مضمنة لإنشاء الملفات وكتابتها وقراءتها. هناك نوعان من الملفات التي يمكن التعامل معها في بيثون ، وهما ملفات نصية عادية وملفات ثنائية (مكتوبة بلغة ثنائية ، 0 و 1).

الملفات النصية: في هذا النوع من الملفات ، يتم إنهاء كل سطر من النص بحرف خاص يسمى EOL (نهاية السطر) ، وهو حرف السطر الجديد ('\ n') في Python افتراضيًا.
الملفات الثنائية: في هذا النوع من الملفات ، لا يوجد فاصل لخط ويتم تخزين البيانات بعد تحويلها إلى لغة ثنائية مفهومة آليًا.
ملاحظة: لمعرفة المزيد عن التعامل مع الملفات انقر هنا .

وضع وصول
تتحكم أوضاع الوصول في نوع العمليات الممكنة في الملف المفتوح. يشير إلى كيفية استخدام الملف بمجرد فتحه. تحدد هذه الأوضاع أيضًا موقع مقبض الملف في الملف. يشبه مقبض الملف المؤشر ، الذي يحدد من أين يجب قراءة البيانات أو كتابتها في الملف. أوضاع الوصول المختلفة لقراءة ملف هي -

للقراءة فقط ('r'): فتح ملف نصي للقراءة. يتم وضع المقبض في بداية الملف. إذا كان الملف غير موجود ، يرفع خطأ الإدخال / الإخراج. هذا أيضًا هو الوضع الافتراضي الذي يتم فيه فتح الملف.
القراءة والكتابة ('r +'): افتح الملف للقراءة والكتابة. يتم وضع المقبض في بداية الملف. يرفع خطأ الإدخال / الإخراج إذا لم يكن الملف موجودًا.
إلحاق وقراءة ("a +"): افتح الملف للقراءة والكتابة. يتم إنشاء الملف إذا كان غير موجود. يتم وضع المقبض في نهاية الملف. سيتم إدخال البيانات التي تتم كتابتها في النهاية ، بعد البيانات الموجودة.
ملاحظة: لمعرفة المزيد عن وضع الوصول انقر هنا .

فتح ملف
يتم ذلك باستخدام open()الوظيفة. لا يلزم استيراد أي وحدة لهذه الوظيفة.

بناء الجملة:

File_object = مفتوح (r "File_Name" ، "Access_Mode")
يجب أن يكون الملف موجودًا في نفس الدليل مثل ملف برنامج python ، ويجب كتابة العنوان الكامل للملف في مكان اسم الملف.

ملاحظة: يتم rوضع الحرف قبل اسم الملف لمنع الأحرف في سلسلة اسم الملف من التعامل معها كحرف خاص. على سبيل المثال ، إذا كان هناك \ temp في عنوان الملف ، فسيتم التعامل مع \ t على أنه حرف الجدولة ويظهر الخطأ لعنوان غير صالح. يجعل r السلسلة خامًا ، أي أنها تخبر أن السلسلة خالية من أي أحرف خاصة. يمكن تجاهل r إذا كان الملف في نفس الدليل ولم يتم وضع العنوان.


# Open function to open the file "MyFile1.txt"  
# (same directory) in read mode and 
file1 = open("MyFile.txt", "r") 
    
# store its reference in the variable file1  
# and "MyFile2.txt" in D:\Text in file2 
file2 = open(r"D:\Text\MyFile2.txt", "r+") 
هنا ، يتم إنشاء file1 ككائن لـ MyFile1 و file2 ككائن لـ MyFile2.

إغلاق ملف
close()تغلق الوظيفة الملف وتحرر مساحة الذاكرة المكتسبة بواسطة هذا الملف. يتم استخدامه في الوقت الذي لم تعد هناك حاجة إلى الملف أو إذا كان سيتم فتحه في وضع ملف مختلف.

بناء الجملة:

File_object.close ()

# Opening and Closing a file "MyFile.txt" 
# for object name file1. 
file1 = open("MyFile.txt", "r") 
file1.close() 
القراءة من ملف
هناك ثلاث طرق لقراءة البيانات من ملف نصي.

read (): إرجاع وحدات البايت المقروءة في شكل سلسلة. يقرأ n بايت ، إذا لم يتم تحديد n ، يقرأ الملف بأكمله.
File_object.read ([n])
readline (): يقرأ سطرًا من الملف ويعود في شكل سلسلة ، بالنسبة إلى n المحدد ، يقرأ على الأكثر n بايت. ومع ذلك ، لا يقرأ أكثر من سطر واحد ، حتى لو تجاوز n طول السطر.
File_object.readline ([n])
readlines (): لقراءة جميع الأسطر وإعادتها باعتبارها كل سطر عنصر سلسلة في قائمة.
File_object.readlines ()
ملاحظة: ‘\n’ يتم التعامل معها كحرف خاص مكون من وحدتي بايت.

مثال:


# Program to show various ways to 
# read data from a file. 
  
# Creating a file
file1 = open("myfile.txt", "w")
L = ["This is Delhi \n", "This is Paris \n", "This is London \n"]
  
# Writing data to a file
file1.write("Hello \n") 
file1.writelines(L)
file1.close()  # to change file access modes
  
file1 = open("myfile.txt", "r+")
  
print("Output of Read function is ")
print(file1.read())
print()
  
# seek(n) takes the file handle to the nth
# bite from the beginning. 
file1.seek(0)
  
print("Output of Readline function is ")
print(file1.readline())
print()
  
file1.seek(0)
  
# To show difference between read and readline 
print("Output of Read(9) function is ")
print(file1.read(9))
print()
  
file1.seek(0)
  
print("Output of Readline(9) function is ")
print(file1.readline(9))
print()
  
file1.seek(0)
  
# readlines function 
print("Output of Readlines function is ")
print(file1.readlines())
print()
file1.close() 
انتاج:

إخراج وظيفة القراءة هو
مرحبا
هذه دلهي
هذه باريس
هذه هي لندن


إخراج وظيفة Readline هو
مرحبا


إخراج وظيفة القراءة (9) هو
مرحبا
ذ

إخراج وظيفة Readline (9) هو
مرحبا


إخراج وظيفة Readlines هو
['مرحبًا \ n'، 'هذه دلهي \ n'، 'هذه باريس \ n'، 'هذه لندن \ n']
مع البيان
with يتم استخدام العبارة في Python في معالجة الاستثناءات لجعل الكود أكثر وضوحًا وقابلية للقراءة. يبسط إدارة الموارد المشتركة مثل تدفقات الملفات. على عكس التطبيقات المذكورة أعلاه ، ليست هناك حاجة للاتصال file.close()عند الاستخدام مع العبارة. يضمن withالبيان نفسه الحصول على الموارد والإفراج عنها بشكل صحيح.

بناء الجملة:

مع اسم ملف مفتوح كملف:

# Program to show various ways to
# read data from a file.
  
L = ["This is Delhi \n", "This is Paris \n", "This is London \n"]
  
# Creating a file
with open("myfile.txt", "w") as file1:
    # Writing data to a file
    file1.write("Hello \n")
    file1.writelines(L)
    file1.close()  # to change file access modes
  
with open("myfile.txt", "r+") as file1:
    # Reading form a file
    print(file1.read())
انتاج:

مرحبا
هذه دلهي
هذه باريس
هذه هي لندن
ملاحظة: لمعرفة المزيد عن البيان اضغط هنا .


<<<<<<<<<<<<<<<<<<<
الكتابة إلى ملف في بايثون
مستوى الصعوبة: سهل
تاريخ التحديث الأخير: 25 تشرين الثاني (نوفمبر) 2019
توفر Python وظائف مضمنة لإنشاء الملفات وكتابتها وقراءتها. هناك نوعان من الملفات التي يمكن التعامل معها في بيثون ، وهما ملفات نصية عادية وملفات ثنائية (مكتوبة بلغة ثنائية ، 0 و 1).

الملفات النصية: في هذا النوع من الملفات ، يتم إنهاء كل سطر من النص بحرف خاص يسمى EOL (نهاية السطر) ، وهو حرف السطر الجديد ('\ n') في Python افتراضيًا.
الملفات الثنائية: في هذا النوع من الملفات ، لا يوجد فاصل لخط ويتم تخزين البيانات بعد تحويلها إلى لغة ثنائية مفهومة آليًا.
ملاحظة: لمعرفة المزيد عن التعامل مع الملفات انقر هنا .

قائمة المحتويات

وضع وصول
فتح ملف
إغلاق ملف
الكتابة في ملف
إلحاق ملف
مع البيان
وضع وصول
تتحكم أوضاع الوصول في نوع العمليات الممكنة في الملف المفتوح. يشير إلى كيفية استخدام الملف بمجرد فتحه. تحدد هذه الأوضاع أيضًا موقع مقبض الملف في الملف. يشبه مقبض الملف المؤشر ، الذي يحدد من أين يجب قراءة البيانات أو كتابتها في الملف. أوضاع الوصول المختلفة لقراءة ملف هي -

اكتب فقط ('w'): افتح الملف للكتابة. بالنسبة لملف موجود ، يتم اقتطاع البيانات والكتابة فوقها. يتم وضع المقبض في بداية الملف. ينشئ الملف إذا كان الملف غير موجود.
اكتب واقرأ ('w +'): افتح الملف للقراءة والكتابة. بالنسبة لملف موجود ، يتم اقتطاع البيانات والكتابة فوقها. يتم وضع المقبض في بداية الملف.
إلحاق فقط ("أ"): افتح الملف للكتابة. يتم إنشاء الملف إذا كان غير موجود. يتم وضع المقبض في نهاية الملف. سيتم إدخال البيانات التي تتم كتابتها في النهاية ، بعد البيانات الموجودة.
ملاحظة: لمعرفة المزيد عن وضع الوصول انقر هنا .

فتح ملف
يتم ذلك باستخدام open()الوظيفة. لا يلزم استيراد أي وحدة لهذه الوظيفة.

بناء الجملة:

File_object = مفتوح (r "File_Name" ، "Access_Mode")
يجب أن يكون الملف موجودًا في نفس الدليل مثل ملف برنامج python ، ويجب كتابة العنوان الكامل للملف في مكان اسم الملف.

ملاحظة: يتم rوضع الحرف قبل اسم الملف لمنع الأحرف في سلسلة اسم الملف من التعامل معها كحرف خاص. على سبيل المثال ، إذا كان هناك \ temp في عنوان الملف ، فسيتم التعامل مع \ t على أنه حرف الجدولة ويظهر الخطأ لعنوان غير صالح. يجعل r السلسلة خامًا ، أي أنها تخبر أن السلسلة خالية من أي أحرف خاصة. يمكن تجاهل r إذا كان الملف في نفس الدليل ولم يتم وضع العنوان.


# Open function to open the file "MyFile1.txt"  
# (same directory) in read mode and 
file1 = open("MyFile.txt", "w") 
    
# store its reference in the variable file1  
# and "MyFile2.txt" in D:\Text in file2 
file2 = open(r"D:\Text\MyFile2.txt", "w+") 
هنا ، يتم إنشاء file1 ككائن لـ MyFile1 و file2 ككائن لـ MyFile2.

إغلاق ملف
close()تغلق الوظيفة الملف وتحرر مساحة الذاكرة المكتسبة بواسطة هذا الملف. يتم استخدامه في الوقت الذي لم تعد هناك حاجة إلى الملف أو إذا كان سيتم فتحه في وضع ملف مختلف.

بناء الجملة:

File_object.close ()

# Opening and Closing a file "MyFile.txt" 
# for object name file1. 
file1 = open("MyFile.txt", "w") 
file1.close() 
الكتابة في ملف
هناك طريقتان للكتابة في ملف.

write (): إدراج السلسلة str1 في سطر واحد في الملف النصي.
File_object.write (str1)
writelines (): لقائمة عناصر السلسلة ، يتم إدراج كل سلسلة في الملف النصي. يستخدم لإدراج سلاسل متعددة في وقت واحد.
File_object.writelines (L) لـ L = [str1، str2، str3] 
ملاحظة: ‘\n’ يتم التعامل معها كحرف خاص مكون من وحدتي بايت.

مثال:


# Python program to demonstrate
# writing to file
  
# Opening a file
file1 = open('myfile.txt', 'w')
L = ["This is Delhi \n", "This is Paris \n", "This is London \n"]
s = "Hello\n"
  
# Writing a string to file
file1.write(s)
  
# Writing multiple strings
# at a time
file1.writelines(L)
  
# Closing file
file1.close()
  
# Checking if the data is
# written to file or not
file1 = open('myfile.txt', 'r')
print(file1.read())
file1.close()
انتاج:

مرحبا
هذه دلهي
هذه باريس
هذه هي لندن
إلحاق ملف
عند فتح الملف في وضع الإلحاق ، يتم وضع المقبض في نهاية الملف. سيتم إدخال البيانات التي تتم كتابتها في النهاية ، بعد البيانات الموجودة. دعنا نرى المثال أدناه لتوضيح الفرق بين وضع الكتابة ووضع الإلحاق.


# Python program to illustrate
# Append vs write mode
file1 = open("myfile.txt", "w")
L = ["This is Delhi \n", "This is Paris \n", "This is London \n"]
file1.writelines(L)
file1.close()
  
# Append-adds at last
file1 = open("myfile.txt", "a")  # append mode
file1.write("Today \n")
file1.close()
  
file1 = open("myfile.txt", "r")
print("Output of Readlines after appending")
print(file1.read())
print()
file1.close()
  
# Write-Overwrites
file1 = open("myfile.txt", "w")  # write mode
file1.write("Tomorrow \n")
file1.close()
  
file1 = open("myfile.txt", "r")
print("Output of Readlines after writing")
print(file1.read())
print()
file1.close()
انتاج:

إخراج Readlines بعد الحاق
هذه دلهي
هذه باريس
هذه هي لندن
اليوم


إخراج Readlines بعد الكتابة
غدا
مع البيان
with يتم استخدام العبارة في Python في معالجة الاستثناءات لجعل الكود أكثر وضوحًا وقابلية للقراءة. يبسط إدارة الموارد المشتركة مثل تدفقات الملفات. على عكس التطبيقات المذكورة أعلاه ، ليست هناك حاجة للاتصال file.close()عند الاستخدام مع العبارة. يضمن withالبيان نفسه الحصول على الموارد والإفراج عنها بشكل صحيح.

بناء الجملة:

مع اسم ملف مفتوح كملف:

# Program to show various ways to
# write data to a file using with statement
  
L = ["This is Delhi \n", "This is Paris \n", "This is London \n"]
  
# Writing to file
with open("myfile.txt", "w") as file1:
    # Writing data to a file
    file1.write("Hello \n")
    file1.writelines(L)
  
# Reading from file
with open("myfile.txt", "r+") as file1:
    # Reading form a file
    print(file1.read())
انتاج:

مرحبا
هذه دلهي
هذه باريس
هذه هي لندن
ملاحظة: لمعرفة المزيد عن البيان اضغط هنا .