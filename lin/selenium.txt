

سيلينيوم بايثون تعليمي
مستوى الصعوبة: سهل
آخر تحديث: ١٠ يونيو ٢٠٢٠
السيلينيوم هو أداة قوية للتحكم في متصفحات الويب من خلال البرامج وتنفيذ أتمتة المتصفح. إنه وظيفي لجميع المتصفحات ، ويعمل على جميع أنظمة التشغيل الرئيسية ونصوصه مكتوبة بلغات مختلفة مثل Python و Java و C # وما إلى ذلك ، وسنعمل مع Python. يغطي البرنامج التعليمي للسيلينيوم جميع الموضوعات مثل - WebDriver و WebElement واختبار الوحدة مع السيلينيوم. يغطي هذا البرنامج التعليمي Python Selenium عنصر السيلينيوم من الأساسيات إلى الاستخدامات المتقدمة والمهنية.

سيلينيوم بايثون تعليمي

لماذا نتعلم سيلينيوم بايثون؟
المصدر المفتوح والمحمول - السيلينيوم هو إطار عمل اختبار ويب مفتوح المصدر ومحمول.
مزيج من الأداة و DSL - السيلينيوم هو مزيج من الأدوات و DSL (لغة خاصة بالمجال) من أجل إجراء أنواع مختلفة من الاختبارات.
أسهل في الفهم والتنفيذ - يتم تصنيف أوامر السيلينيوم من حيث الفئات المختلفة مما يسهل فهمها وتنفيذها.
عبء وإجهاد أقل للمختبرين - كما هو مذكور أعلاه ، يتم تقليل مقدار الوقت المطلوب للقيام باختبار سيناريوهات الاختبار المتكررة على كل بناء جديد إلى الصفر تقريبًا. ومن ثم ، يتم تقليل عبء المختبر.
خفض التكلفة لعملاء الأعمال - يحتاج العمل إلى دفع رواتب المختبرين ، والتي يتم حفظها باستخدام أداة اختبار الأتمتة. لا توفر الأتمتة الوقت فحسب ، بل توفر أيضًا فوائد التكلفة للأعمال.
أساسيات السيلينيوم
أساسيات السيلينيوم
مكونات السيلينيوم
التطبيقات والاستخدامات
سمات
محددات
أساسيات ثعبان السيلينيوم

مقدمة وتثبيت سيلينيوم بايثون
تصفح الروابط باستخدام طريقة get
التعامل مع صفحة الويب
تحديد موقع العناصر الفردية
تحديد عناصر متعددة
استراتيجيات محدد المواقع - سيلينيوم بايثون
كتابة الاختبارات باستخدام Selenium Python
تحديد الاستراتيجيات

تحديد موقع العناصر الفردية -
find_element_by_id ()
find_element_by_name ()
find_element_by_xpath ()
find_element_by_link_text ()
find_element_by_partial_link_text ()
find_element_by_tag_name ()
find_element_by_class_name ()
find_element_by_css_selector ()
تحديد موقع عناصر متعددة -
find_elements_by_name ()
find_elements_by_xpath ()
find_elements_by_link_text ()
find_element_by_partial_link_text ()
find_elements_by_tag_name ()
find_elements_by_class_name ()
find_elements_by_css_selector ()
ينتظر

ينتظر صريح
ينتظر ضمني
سلاسل العمل

أساسيات سلاسل العمل
انقر
انقر مع الاستمرار
Context_click
نقرتين متتاليتين
السحب والإفلات
زر أسفل
key_up
نقل
نقل إلى عنصر
نقل إلى عنصر_مع_إزاحة
إفراج
إعادة التعيين
Send_keys
متقدم في السيلينيوم بايثون -

معالجة الاستثناءات - سيلينيوم بايثون
مفاتيح خاصة في Selenium Python
كيفية التعامل مع رسائل التنبيه في Selenium Python؟
إضافة ملفات تعريف الارتباط وحذفها في Selenium Python
كيفية التحرك للأمام والخلف في التاريخ باستخدام Selenium Python؟
مفاتيح خاصة في Selenium Python
التأكيد في سيلينيوم WebDriver باستخدام TestNg
حيل ثعبان السيلينيوم
نموذج كائن الصفحة (POM)
أمثلة المشروع

Whatsapp باستخدام Python!
أتمتة المتصفح باستخدام السيلينيوم
تسجيل الدخول إلى Facebook باستخدام Python
أتمتة منشور عيد ميلاد سعيد على Facebook باستخدام السيلينيوم
كيفية الوصول إلى نافذة تسجيل الدخول المنبثقة في السيلينيوم باستخدام Python
SMS Bomber باستخدام السيلينيوم
سيلينيوم ويب درايفر

Selenium Webdriver هو أصل جميع الأساليب والفئات المستخدمة في Selenium Python. إنها القوة الدافعة للسيلينيوم التي تسمح لنا بإجراء عمليات مختلفة على عناصر متعددة على صفحة ويب. للسائق طرق وسمات مختلفة يمكن للمرء استخدامها لأتمتة الاختبار في Selenium Python. للتحقق من كيفية استخدام webdriver ، قم بزيارة - Web Driver in Selenium Python . الطرق المختلفة التي يمكن للمرء استخدامها في سيلينيوم بايثون هي -
طريقة	وصف
add_cookie	يضيف ملف تعريف ارتباط إلى جلستك الحالية.
الى الخلف	يتقدم خطوة واحدة إلى الوراء في سجل المتصفح.
قريب	يغلق النافذة الحالية.
create_web_element	ينشئ عنصر ويب باستخدام element_id المحدد.
delete_all_cookies	احذف جميع ملفات تعريف الارتباط في نطاق الجلسة.
delete_cookie	يحذف ملف تعريف ارتباط واحد بالاسم المحدد.
execute_async_script	ينفذ JavaScript بشكل غير متزامن في النافذة / الإطار الحالي.
execute_script	ينفذ بشكل متزامن JavaScript في النافذة / الإطار الحالي.
إلى الأمام	يتقدم خطوة واحدة للأمام في سجل المتصفح.
ملء الشاشة_نافذة	استدعاء عملية "ملء الشاشة" الخاصة بمدير النوافذ
get_cookie	احصل على ملف تعريف ارتباط واحد بالاسم. ترجع ملف تعريف الارتباط إذا تم العثور عليه ، لا شيء إذا لم يتم إرجاعه.
get_cookies	تُرجع مجموعة من القواميس المطابقة لملفات تعريف الارتباط المرئية في الجلسة الحالية.
get_log	يحصل على السجل لنوع سجل معين
get_screenshot_as_base64	الحصول على لقطة شاشة للنافذة الحالية كسلسلة مشفرة باستخدام base64 وهي مفيدة في الصور المضمنة في HTML.
get_screenshot_as_file	يحفظ لقطة شاشة من النافذة الحالية في ملف صورة PNG.
get_screenshot_as_png	يحصل على لقطة الشاشة للنافذة الحالية كبيانات ثنائية.
get_window_position	الحصول على الموضع س ، ص للنافذة الحالية.
get_window_rect	الحصول على إحداثيات x و y للنافذة بالإضافة إلى ارتفاع وعرض النافذة الحالية.
get_window_size	الحصول على عرض وارتفاع النافذة الحالية.
انتظر ضمنيًا	تعيين مهلة ثابتة للانتظار ضمنيًا حتى يتم العثور على عنصر ،
تكبير النافذة	لتكبير النافذة الحالية التي يستخدمها webdriver
تصغير النافذة	استدعاء عملية "التصغير" الخاصة بمدير النوافذ
استقال	يخرج من السائق ويغلق كل نافذة مرتبطة.
تحديث	يحدّث الصفحة الحالية.
set_page_load_timeout	اضبط مقدار الوقت لانتظار اكتمال تحميل الصفحة قبل حدوث خطأ.
set_script_timeout	قم بتعيين مقدار الوقت الذي يجب أن ينتظره البرنامج النصي أثناء استدعاء execute_async_script قبل إلقاء خطأ.
set_window_position	يضبط موضع x و y للنافذة الحالية. (window.moveTo)
set_window_rect	يضبط إحداثيات x و y للنافذة وكذلك ارتفاع وعرض النافذة الحالية.
عنوان URL الحالي	يحصل على عنوان URL للصفحة الحالية.
التعامل مع النافذة الحالية	إرجاع مقبض النافذة الحالية.
مصدر الصفحة	يحصل على مصدر الصفحة الحالية.
لقب	يرجع عنوان الصفحة الحالية.
سيلينيوم ويبليمينت

يمكن أن يكون العنصر علامة أو خاصية أو أي شيء ، فهو مثيل للفئة selenium.webdriver.remote.webelement.WebElement. بعد العثور على عنصر على الشاشة باستخدام السيلينيوم ، قد ترغب في النقر فوقه أو البحث عن عناصر فرعية ، وما إلى ذلك. يوفر السيلينيوم طرقًا حول WebElement الخاص بالسيلينيوم. لمعرفة كيفية استخدام عنصر عنصر في السيلينيوم ، قم بزيارة - WebElement في Selenium Python . تتم مناقشة الطرق المختلفة التي يمكن للمرء استخدامها مع عنصر في Selenium Python أدناه -
طرق العنصر	وصف
تم الإختيار()	يتم استخدام طريقة is_selected للتحقق مما إذا كان العنصر محددًا أم لا. تقوم بإرجاع قيمة منطقية True أو False.
معروض ()	يتم استخدام طريقة is_displayed للتحقق مما إذا كان العنصر مرئيًا للمستخدم أم لا. تقوم بإرجاع قيمة منطقية True أو False.
ممكَّن ()	يتم استخدام طريقة is_enabled للتحقق مما إذا كان العنصر ممكّنًا أم لا. تقوم بإرجاع قيمة منطقية True أو False.
get_property ()	تُستخدم طريقة get_property للحصول على خصائص عنصر ، مثل الحصول على خاصية text_length لعلامة الارتساء.
get_attribute ()	تُستخدم طريقة get_attribute للحصول على سمات عنصر ، مثل الحصول على سمة href لعلامة الارتساء.
Send_keys ()	يتم استخدام طريقة send_keys لإرسال نص إلى أي حقل ، مثل حقل الإدخال لنموذج أو حتى لربط فقرة العلامة ، إلخ.
انقر()	تُستخدم طريقة النقر للنقر فوق أي عنصر ، مثل علامة الارتساء أو الارتباط وما إلى ذلك.
صافي()	يتم استخدام طريقة clear لمسح نص أي حقل ، مثل حقل الإدخال لنموذج أو حتى لربط فقرة العلامة ، إلخ.
لقطة شاشة()	تُستخدم طريقة لقطة الشاشة لحفظ لقطة شاشة للعنصر الحالي في ملف PNG.
إرسال()	يتم استخدام طريقة الإرسال لإرسال نموذج بعد إرسال البيانات إلى نموذج.
value_of_css_property ()	يتم استخدام طريقة value_of_css_property للحصول على قيمة خاصية css لعنصر.
موقعك	تُستخدم طريقة الموقع لتحديد موقع العنصر في لوحة الرسم القابلة للعرض.
screenshot_as_png	يتم استخدام طريقة screenshot_as_png للحصول على لقطة شاشة للعنصر الحالي كبيانات ثنائية.
الأبوين	يتم استخدام الطريقة الأصل للحصول على مرجع داخلي لمثيل WebDriver الذي تم العثور على هذا العنصر منه.
بحجم	تستخدم طريقة الحجم للحصول على حجم العنصر الحالي.
اسم_العلامة	يتم استخدام طريقة tag_name للحصول على اسم العلامة التي تشير إليها.
نص	يتم استخدام طريقة النص للحصول على نص العنصر الحالي.
مستقيم	يتم استخدام طريقة Rect للحصول على قاموس بحجم العنصر وموقعه.
لقطة شاشة	يتم استخدام طريقة screenshot_as_base64 للحصول على لقطة شاشة للعنصر الحالي كسلسلة مشفرة base64.


>>>>>>>>>>>>>>>>>>
أساسيات السيلينيوم - المكونات والميزات والاستخدامات والقيود
مستوى الصعوبة: سهل
آخر تحديث: 06 إبريل 2020
السيلينيوم هو أداة قوية للتحكم في متصفح الويب من خلال البرنامج. إنه وظيفي لجميع المتصفحات ، ويعمل على جميع أنظمة التشغيل الرئيسية ونصوصه مكتوبة بلغات مختلفة مثل Python و Java و C # وما إلى ذلك ، وسنعمل مع Python. يحتوي السيلينيوم على أربعة مكونات رئيسية - Selenium IDE و Selenium RC و Selenium Web driver و Selenium GRID.

مكونات السيلينيوم

أساسيات السيلينيوم
عناصر
سمات
التطبيقات
محددات
عناصر
يوجد السيلينيوم في الصناعة لفترة طويلة ويستخدمه مختبرو الأتمتة في جميع أنحاء العالم.
دعنا نتحقق من المكونات الأربعة الرئيسية للسيلينيوم -

السيلينيوم IDE
السيلينيوم أرسي
برنامج تشغيل الويب السيلينيوم
شبكة السيلينيوم
السيلينيوم IDE
السيلينيوم IDE (بيئة التطوير المتكاملة) هي الأداة الرئيسية في مجموعة السيلينيوم. إنها بيئة تطوير متكاملة (IDE) لاختبارات السيلينيوم. يتم تنفيذه كإضافة Firefox وكإضافة Chrome. يسمح بتسجيل الاختبارات الوظيفية وتحريرها وتصحيحها. كان يُعرف سابقًا باسم مسجل السيلينيوم. تم إنشاء Selenium-IDE في الأصل بواسطة Shinya Kasatani وتم التبرع به لمشروع السيلينيوم في عام 2006. وكان السيلينيوم IDE في السابق قليل الصيانة. بدأت عملية صيانة السيلينيوم IDE بنشاط في عام 2018.

يمكن تسجيل البرامج النصية تلقائيًا وتحريرها يدويًا لتوفير دعم الإكمال التلقائي والقدرة على نقل الأوامر بسرعة. يتم تسجيل النصوص في سيلينيز ، وهي لغة نصية اختبار خاصة للسيلينيوم. يوفر Selenese أوامر لتنفيذ الإجراءات في المستعرض (انقر فوق ارتباط ، وحدد خيارًا) ولاسترداد البيانات من الصفحات الناتجة.

السيلينيوم RC (جهاز التحكم عن بعد)
Selenium Remote Control (RC) هو خادم مكتوب بلغة Java يقبل أوامر المتصفح عبر HTTP. يتيح RC إمكانية كتابة اختبارات آلية لتطبيق ويب بأي لغة برمجة ، مما يسمح بتكامل أفضل للسيلينيوم في أطر اختبار الوحدة الحالية. لتسهيل اختبارات الكتابة ، يوفر مشروع Selenium حاليًا برامج تشغيل للعميل لـ PHP و Python و Ruby و .NET و Perl و Java. يمكن أيضًا استخدام برنامج تشغيل Java مع JavaScript (عبر محرك Rhino). هناك حاجة إلى مثيل لخادم السيلينيوم RC لبدء حالة اختبار html - مما يعني أن المنفذ يجب أن يكون مختلفًا لكل عملية تشغيل متوازية. ومع ذلك ، بالنسبة لحالة اختبار Java / PHP ، يلزم تشغيل مثيل Selenium RC واحد فقط بشكل مستمر.

برنامج تشغيل الويب السيلينيوم
سيلينيوم WebDriver هو خليفة سيلينيوم آر سي. يقبل Selenium WebDriver الأوامر (المرسلة في Selenese ، أو عبر Client API) ويرسلها إلى متصفح. يتم تنفيذ ذلك من خلال برنامج تشغيل متصفح خاص بالمتصفح ، والذي يرسل أوامر إلى المتصفح ويسترجع النتائج. تعمل معظم برامج تشغيل المستعرضات فعليًا على تشغيل تطبيق متصفح والوصول إليه (مثل Firefox أو Google Chrome أو Internet Explorer أو Safari أو Microsoft Edge) ؛ يوجد أيضًا برنامج تشغيل متصفح HtmlUnit ، والذي يحاكي متصفحًا باستخدام متصفح بدون رأس HtmlUnit.

لا يحتاج Selenium WebDriver إلى خادم خاص لإجراء الاختبارات. بدلاً من ذلك ، يبدأ WebDriver مباشرة مثيل المستعرض ويتحكم فيه. ومع ذلك ، يمكن استخدام شبكة السيلينيوم مع WebDriver لتنفيذ الاختبارات على الأنظمة البعيدة (انظر أدناه). حيثما أمكن ، يستخدم WebDriver وظائف مستوى نظام التشغيل الأصلية بدلاً من أوامر JavaScript المستندة إلى المستعرض لقيادة المتصفح. يؤدي ذلك إلى تجاوز المشكلات المتعلقة بالاختلافات الدقيقة بين الأوامر الأصلية وأوامر JavaScript ، بما في ذلك قيود الأمان.

شبكة السيلينيوم
شبكة السيلينيوم هي خادم يسمح بإجراء الاختبارات باستخدام مثيلات مستعرض الويب التي تعمل على الأجهزة البعيدة. مع شبكة السيلينيوم ، يعمل خادم واحد كمحور. تتصل الاختبارات بالمحور للحصول على حق الوصول إلى طبعات المستعرض. يحتوي الموزع على قائمة بالخوادم التي توفر الوصول إلى طبعات المستعرض (عقد WebDriver) ، ويتيح للاختبارات استخدام هذه المثيلات. تسمح شبكة السيلينيوم بإجراء الاختبارات بشكل متوازٍ على أجهزة متعددة وإدارة إصدارات مختلفة من المتصفح وتكوينات المتصفح بشكل مركزي (بدلاً من كل اختبار فردي).

تعد القدرة على إجراء الاختبارات على مثيلات المستعرض البعيد مفيدة لنشر حمل الاختبار عبر العديد من الأجهزة ولإجراء الاختبارات في المتصفحات التي تعمل على أنظمة أساسية أو أنظمة تشغيل مختلفة. هذا الأخير مفيد بشكل خاص في الحالات التي لا يمكن فيها تشغيل جميع المتصفحات التي سيتم استخدامها للاختبار على نفس النظام الأساسي.
للمزيد ، تحقق من - مكونات السيلينيوم .

سمات
المصدر المفتوح والمحمول - السيلينيوم هو إطار عمل اختبار ويب مفتوح المصدر ومحمول.
مزيج من الأداة و DSL - السيلينيوم هو مزيج من الأدوات و DSL (لغة خاصة بالمجال) من أجل إجراء أنواع مختلفة من الاختبارات.
أسهل في الفهم والتنفيذ - يتم تصنيف أوامر السيلينيوم من حيث الفئات المختلفة مما يسهل فهمها وتنفيذها.
تقليل وقت تنفيذ الاختبار - يدعم السيلينيوم تنفيذ الاختبار المتوازي الذي يقلل الوقت المستغرق في تنفيذ الاختبارات المتوازية.
مطلوب موارد أقل - يتطلب السيلينيوم موارد أقل عند مقارنته بمنافسيه مثل UFT و RFT وما إلى ذلك.
يدعم لغات برمجة متعددة - C # و Java و Python و PHP و Ruby و Perl و JavaScript
يدعم أنظمة تشغيل متعددة - Android و iOS و Windows و Linux و Mac و Solaris.
يدعم متصفحات متعددة - Google Chrome و Mozilla Firefox و Internet Explorer و Edge و Opera و Safari وما إلى ذلك.
تنفيذ الاختبار الموازي - كما أنه يدعم تنفيذ الاختبار المتوازي مما يقلل الوقت ويزيد من كفاءة الاختبارات.
لمزيد من المعلومات ، قم بتسجيل الخروج - ميزات Selenium Webdriver

التطبيقات
يتم استخدام Selenium WebDriver لأتمتة اختبار تطبيق الويب للتحقق من أنه يعمل كما هو متوقع. يدعم العديد من المتصفحات مثل Firefox و Chrome و IE و Safari. ومع ذلك ، باستخدام Selenium WebDriver ، يمكننا أتمتة الاختبار لتطبيقات الويب فقط.

المصدر المفتوح والمحمول - السيلينيوم هو إطار عمل اختبار ويب مفتوح المصدر ومحمول.
عبء وإجهاد أقل للمختبرين - كما هو مذكور أعلاه ، يتم تقليل مقدار الوقت المطلوب للقيام باختبار سيناريوهات الاختبار المتكررة على كل بناء جديد إلى الصفر تقريبًا. ومن ثم ، يتم تقليل عبء المختبر.
خفض التكلفة لعملاء الأعمال - يحتاج العمل إلى دفع رواتب المختبرين ، والتي يتم حفظها باستخدام أداة اختبار الأتمتة. لا توفر الأتمتة الوقت فحسب ، بل توفر أيضًا فوائد التكلفة للأعمال.
زيادة تغطية الاختبار - مع استخدامات السيلينيوم ، يتم تقليل وقت الاختبار ، وبالتالي يمكن للمختبر إجراء المزيد من الاختبارات على سيناريوهات الاختبار الأخرى في نفس الوقت.
تقليل وقت تنفيذ الاختبار - يدعم السيلينيوم تنفيذ الاختبار المتوازي الذي يقلل الوقت المستغرق في تنفيذ الاختبارات المتوازية.
لمزيد من المعلومات ، قم بتسجيل الخروج - تطبيقات واستخدامات سيلينيوم WebDriver

محددات
لا يوجد دعم لتطبيقات سطح المكتب - السيلينيوم لا يدعم اختبار تطبيقات سطح المكتب.
الخبرة - يتطلب السيلينيوم خبرة فريقك - وموارد لإدارتها.
الصيانة وقابلية التوسع - السيلينيوم هو إطار عمل ثقيل الصيانة - ويصعب قياسه مع نمو المرء.
منتديات مفتوحة المصدر - نظرًا لأن السيلينيوم هو برنامج مفتوح المصدر ، يتعين على المرء الاعتماد على منتديات المجتمع لحل مشكلاتك التقنية.
لا يوجد دعم لمنصتي REST و SOAP - لا يمكننا إجراء اختبارات الأتمتة على خدمات الويب مثل SOAP أو REST باستخدام السيلينيوم.
لا توجد إمكانية لإعداد التقارير - لا يوجد لدى السيلينيوم أي قدرة داخلية على إعداد التقارير ، يتعين على المرء الاعتماد على المكونات الإضافية مثل JUnit و TestNG لتقارير الاختبار.
اختبار الصور - لا يمكن إجراء اختبار على الصور. يحتاج المرء إلى دمج السيلينيوم مع سيكولي لاختبار الصور.
لمزيد من المعلومات ، قم بتسجيل الخروج - قيود السيلينيوم Webdriver


>>>>>>>>>>>>>>>>>>

مكونات السيلينيوم
مستوى الصعوبة: أساسي
آخر تحديث: 06 إبريل 2020
السيلينيوم هو أداة قوية للتحكم في متصفح الويب من خلال البرنامج. إنه وظيفي لجميع المتصفحات ، ويعمل على جميع أنظمة التشغيل الرئيسية ونصوصه مكتوبة بلغات مختلفة مثل Python و Java و C # وما إلى ذلك ، وسنعمل مع Python. يحتوي السيلينيوم على أربعة مكونات رئيسية - Selenium IDE و Selenium RC و Selenium Web driver و Selenium GRID.

مكونات السيلينيوم

مكونات السيلينيوم
يوجد السيلينيوم في الصناعة لفترة طويلة ويستخدمه مختبرو الأتمتة في جميع أنحاء العالم.
دعنا نتحقق من المكونات الأربعة الرئيسية للسيلينيوم -

السيلينيوم IDE
السيلينيوم أرسي
برنامج تشغيل الويب السيلينيوم
شبكة السيلينيوم
السيلينيوم IDE
السيلينيوم IDE (بيئة التطوير المتكاملة) هي الأداة الرئيسية في مجموعة السيلينيوم. إنها بيئة تطوير متكاملة (IDE) لاختبارات السيلينيوم. يتم تنفيذه كإضافة Firefox وكإضافة Chrome. يسمح بتسجيل الاختبارات الوظيفية وتحريرها وتصحيحها. كان يُعرف سابقًا باسم مسجل السيلينيوم. تم إنشاء Selenium-IDE في الأصل بواسطة Shinya Kasatani وتم التبرع به لمشروع السيلينيوم في عام 2006. وكان السيلينيوم IDE في السابق قليل الصيانة. بدأت عملية صيانة السيلينيوم IDE بنشاط في عام 2018.

يمكن تسجيل البرامج النصية تلقائيًا وتحريرها يدويًا لتوفير دعم الإكمال التلقائي والقدرة على نقل الأوامر بسرعة. يتم تسجيل النصوص في سيلينيز ، وهي لغة نصية اختبار خاصة للسيلينيوم. يوفر Selenese أوامر لتنفيذ الإجراءات في المستعرض (انقر فوق ارتباط ، وحدد خيارًا) ولاسترداد البيانات من الصفحات الناتجة.

السيلينيوم RC (جهاز التحكم عن بعد)
Selenium Remote Control (RC) هو خادم مكتوب بلغة Java يقبل أوامر المتصفح عبر HTTP. يتيح RC إمكانية كتابة اختبارات آلية لتطبيق ويب بأي لغة برمجة ، مما يسمح بتكامل أفضل للسيلينيوم في أطر اختبار الوحدة الحالية. لتسهيل اختبارات الكتابة ، يوفر مشروع Selenium حاليًا برامج تشغيل للعميل لـ PHP و Python و Ruby و .NET و Perl و Java. يمكن أيضًا استخدام برنامج تشغيل Java مع JavaScript (عبر محرك Rhino). هناك حاجة إلى مثيل لخادم السيلينيوم RC لبدء حالة اختبار html - مما يعني أن المنفذ يجب أن يكون مختلفًا لكل عملية تشغيل متوازية. ومع ذلك ، بالنسبة لحالة اختبار Java / PHP ، يلزم تشغيل مثيل Selenium RC واحد فقط بشكل مستمر.

برنامج تشغيل الويب السيلينيوم
سيلينيوم WebDriver هو خليفة سيلينيوم آر سي. يقبل Selenium WebDriver الأوامر (المرسلة في Selenese ، أو عبر Client API) ويرسلها إلى متصفح. يتم تنفيذ ذلك من خلال برنامج تشغيل متصفح خاص بالمتصفح ، والذي يرسل أوامر إلى المتصفح ويسترجع النتائج. تعمل معظم برامج تشغيل المستعرضات فعليًا على تشغيل تطبيق متصفح والوصول إليه (مثل Firefox أو Google Chrome أو Internet Explorer أو Safari أو Microsoft Edge) ؛ يوجد أيضًا برنامج تشغيل متصفح HtmlUnit ، والذي يحاكي متصفحًا باستخدام متصفح بدون رأس HtmlUnit.

لا يحتاج Selenium WebDriver إلى خادم خاص لإجراء الاختبارات. بدلاً من ذلك ، يبدأ WebDriver مباشرة مثيل المستعرض ويتحكم فيه. ومع ذلك ، يمكن استخدام شبكة السيلينيوم مع WebDriver لتنفيذ الاختبارات على الأنظمة البعيدة (انظر أدناه). حيثما أمكن ، يستخدم WebDriver وظائف مستوى نظام التشغيل الأصلية بدلاً من أوامر JavaScript المستندة إلى المستعرض لقيادة المتصفح. يؤدي ذلك إلى تجاوز المشكلات المتعلقة بالاختلافات الدقيقة بين الأوامر الأصلية وأوامر JavaScript ، بما في ذلك قيود الأمان.

شبكة السيلينيوم
شبكة السيلينيوم هي خادم يسمح بإجراء الاختبارات باستخدام مثيلات مستعرض الويب التي تعمل على الأجهزة البعيدة. مع شبكة السيلينيوم ، يعمل خادم واحد كمحور. تتصل الاختبارات بالمحور للحصول على حق الوصول إلى طبعات المستعرض. يحتوي الموزع على قائمة بالخوادم التي توفر الوصول إلى طبعات المستعرض (عقد WebDriver) ، ويتيح للاختبارات استخدام هذه المثيلات. تسمح شبكة السيلينيوم بإجراء الاختبارات بشكل متوازٍ على أجهزة متعددة وإدارة إصدارات مختلفة من المتصفح وتكوينات المتصفح بشكل مركزي (بدلاً من كل اختبار فردي).

تعد القدرة على إجراء الاختبارات على مثيلات المستعرض البعيد مفيدة لنشر حمل الاختبار عبر العديد من الأجهزة ولإجراء الاختبارات في المتصفحات التي تعمل على أنظمة أساسية أو أنظمة تشغيل مختلفة. هذا الأخير مفيد بشكل خاص في الحالات التي لا يمكن فيها تشغيل جميع المتصفحات التي سيتم استخدامها للاختبار على نفس النظام الأساسي.



>>>>>>>>>>>>>>>>>>
مقدمة وتثبيت سيلينيوم بايثون
مستوى الصعوبة: أساسي
آخر تحديث: 24 سبتمبر 2021
تم تصميم Python Module من السيلينيوم لإجراء اختبار آلي باستخدام Python. توفر روابط Selenium Python واجهة برمجة تطبيقات بسيطة لكتابة اختبارات وظيفية / قبول باستخدام Selenium WebDriver. من خلال Selenium Python API ، يمكنك الوصول إلى جميع وظائف Selenium WebDriver بطريقة بديهية. للتحقق من مزيد من التفاصيل حول السيلينيوم ، قم بزيارة - أساسيات السيلينيوم - المكونات والميزات والاستخدامات والقيود . 

مقدمة سيلينيوم بايثون
توفر روابط Selenium Python واجهة برمجة تطبيقات ملائمة للوصول إلى Selenium WebDrivers مثل Firefox و Ie و Chrome و Remote وما إلى ذلك. إصدارات Python الحالية المدعومة هي 2.7 و 3.5 وما فوق. 

المصدر المفتوح والمحمول - السيلينيوم هو إطار عمل اختبار ويب مفتوح المصدر ومحمول.
مزيج من الأداة و DSL - السيلينيوم هو مزيج من الأدوات و DSL (لغة خاصة بالمجال) من أجل إجراء أنواع مختلفة من الاختبارات.
أسهل في الفهم والتنفيذ - يتم تصنيف أوامر السيلينيوم من حيث الفئات المختلفة مما يسهل فهمها وتنفيذها.
تقليل وقت تنفيذ الاختبار - يدعم السيلينيوم تنفيذ الاختبار المتوازي الذي يقلل الوقت المستغرق في تنفيذ الاختبارات المتوازية.
مطلوب موارد أقل - يتطلب السيلينيوم موارد أقل عند مقارنته بمنافسيه مثل UFT و RFT وما إلى ذلك.
يدعم أنظمة تشغيل متعددة - Android و iOS و Windows و Linux و Mac و Solaris.
يدعم متصفحات متعددة - Google Chrome و Mozilla Firefox و Internet Explorer و Edge و Opera و Safari وما إلى ذلك.
تنفيذ الاختبار الموازي - كما أنه يدعم تنفيذ الاختبار المتوازي مما يقلل الوقت ويزيد من كفاءة الاختبارات.
تركيب سيلينيوم بايثون
يمكن تثبيت السيلينيوم لأي نظام تشغيل بعد تثبيت Python على نظام التشغيل الخاص بك. إذا لم يكن كذلك ، قم بتسجيل الخروج - قم بتنزيل وتثبيت أحدث إصدار من Python 3 

الطريقة الأولى
افتح Terminal / Cmd واكتب الأمر كما هو مكتوب أدناه 

python -m pip تثبيت السيلينيوم
الطريقة الثانية
بدلاً من ذلك ، يمكنك تنزيل توزيع المصدر هنا ، وإلغاء الأرشفة ، وتشغيل الأمر أدناه:  

تثبيت python
تثبيت Webdrivers
يمكن للمرء تثبيت Firefox و Chromium و PhantomJs (تم إيقافه الآن) وما إلى ذلك.  

لاستخدام Firefox ، قد تحتاج إلى تثبيت GeckoDriver 
لاستخدام Chrome ، قد تحتاج إلى تثبيت Chromium 
في هذه المقالة ، يتم استخدام Firefox بحيث يمكن للمرء اتباع الخطوات التالية للتثبيت: -

خطوات لينكس: -
1. اذهب إلى صفحة إصدارات geckodriver . ابحث عن أحدث إصدار من برنامج التشغيل لمنصتك وقم بتنزيله. 
علي سبيل المثال:  

wget https://github.com/mozilla/geckodriver/releases/download/v0.24.0/geckodriver-v0.24.0-linux64.tar.gz
2. استخراج الملف باستخدام:  

القطران -xvzf geckodriver *
3. اجعلها قابلة للتنفيذ:  

chmod + x geckodriver
4. نقل الملفات إلى usr / local / bin  

sudo mv geckodriver / usr / local / bin /
خطوات لنظام التشغيل Windows: -
1. مثل الخطوة 1 في Linux قم بتنزيل GeckoDriver
2. استخرجه باستخدام WinRar أو أي تطبيق قد يكون لديك.
3. قم بإضافته إلى المسار باستخدام موجه الأوامر

مسار setx "٪ path٪؛ GeckoDriver Path"
علي سبيل المثال:-  

مسار setx "٪ path٪؛ c: /user/eliote/Desktop/geckodriver-v0.26.0-win64/geckodriver.exe"
إنشاء كود بسيط 
# Python program to demonstrate
# selenium
 
# import webdriver
from selenium import webdriver
 
# create webdriver object
driver = webdriver.Firefox()
# get google.co.in
driver.get("https://google.co.in")

python -m pip install selenium
python setup.py install


>>>>>>>>>>>>>>>>>>
تصفح الروابط باستخدام طريقة get - Selenium Python
آخر تحديث: ١٠ أبريل ٢٠٢٠
تم تصميم Python Module من السيلينيوم لإجراء اختبار آلي باستخدام Python. توفر روابط Selenium Python واجهة برمجة تطبيقات بسيطة لكتابة اختبارات وظيفية / قبول باستخدام Selenium WebDriver. من خلال Selenium Python API ، يمكنك الوصول إلى جميع وظائف Selenium WebDriver بطريقة بديهية. توضح هذه المقالة كيفية استخدام Selenium Python للتنقل إلى أي رابط على الويب باستخدام طريقة get من Selenium Webdriver في Python.

إذا لم تقم بتثبيت السيلينيوم ومكوناته بعد ، فقم بتثبيتها من هنا - مقدمة وتثبيت Selenium Python .

كيفية التنقل في الروابط باستخدام Python Selenium
أول شيء يريد المرء فعله باستخدام WebDriver هو الانتقال إلى ارتباط. الطريقة العادية للقيام بذلك هي استدعاء طريقة get:
بناء الجملة -

driver.get (url)
مثال-

driver.get ("http://www.google.com")
سينتظر WebDriver حتى يتم تحميل الصفحة بالكامل (أي ، يتم تشغيل حدث التحميل) قبل إعادة التحكم إلى الاختبار أو البرنامج النصي. تجدر الإشارة إلى أنه إذا كانت صفحتك تستخدم الكثير من AJAX عند التحميل ، فقد لا يعرف WebDriver متى تم تحميلها بالكامل. إذا كنت بحاجة إلى التأكد من تحميل هذه الصفحات بالكامل ، فيمكنك استخدام فترات الانتظار.

مثال عن مشروع -
بعد تثبيت السيلينيوم ، قم بإنشاء ملف يسمى run.py as -
Program -

# Python program to demonstrate
# selenium
  
# import webdriver
from selenium import webdriver
  
# create webdriver object
driver = webdriver.Firefox()
  
# get google.co.in
driver.get("https://google.co.in / search?q = geeksforgeeks")
انتاج-

>>>>>>>>>>>>>>>>>>

التعامل مع صفحة الويب - سيلينيوم بايثون
مستوى الصعوبة: صعب
آخر تحديث: ١٠ سبتمبر ٢٠٢٠
تم تصميم Python Module من السيلينيوم لإجراء اختبار آلي باستخدام Python. توفر روابط Selenium Python واجهة برمجة تطبيقات بسيطة لكتابة اختبارات وظيفية / قبول باستخدام Selenium WebDriver. لفتح صفحة ويب باستخدام Selenium Python ، قم بتسجيل الخروج - تصفح الروابط باستخدام طريقة get - Selenium Python . مجرد القدرة على الذهاب إلى الأماكن ليس مفيدًا بشكل رهيب. ما نود فعله حقًا هو التفاعل مع الصفحات ، أو بشكل أكثر تحديدًا ، عناصر HTML داخل الصفحة. أولًا ، علينا إيجاد واحد. يقدم WebDriver عددًا من الطرق للعثور على العناصر. على سبيل المثال ، بالنظر إلى عنصر محدد على النحو التالي: 
 

<input type="text" name="passwd" id="passwd-id" />
للعثور على عنصر ما ، يحتاج المرء إلى استخدام إحدى استراتيجيات تحديد الموقع ، على سبيل المثال ،
 

element = driver.find_element_by_id ("passwd-id")
element = driver.find_element_by_name ("passwd")
element = driver.find_element_by_xpath ("// input [@ id = 'passwd-id']")
أيضًا ، للعثور على عناصر متعددة ، يمكننا استخدام - 
 

العناصر = driver.find_elements_by_name ("passwd")
يمكن للمرء أيضًا البحث عن ارتباط من خلال نصه ، ولكن كن حذرًا! يجب أن يكون النص مطابقًا تمامًا! يجب أن يكون المرء حذرًا أيضًا عند استخدام XPATH في WebDriver. إذا كان هناك أكثر من عنصر واحد يطابق الاستعلام ، فسيتم إرجاع العنصر الأول فقط. إذا لم يتم العثور على شيء ، فسيتم رفع NoSuchElementException. 
يحتوي WebDriver على واجهة برمجة تطبيقات "تعتمد على الكائنات" ، ونحن نمثل جميع أنواع العناصر باستخدام نفس الواجهة. هذا يعني أنه على الرغم من أن المرء قد يرى الكثير من الطرق الممكنة التي يمكن للمرء أن يستدعيها عندما يضرب المرء مجموعة مفاتيح الإكمال التلقائي لـ IDE ، فلن تكون جميعها منطقية أو صالحة. للتحقق من جميع الطرق ، تحقق من استراتيجيات محدد المواقع - Selenium Python 
، فماذا بعد الحصول على عنصر؟ قد يرغب المرء في إدخال نص في حقل ، على سبيل المثال ، 
 

element.send_keys ("بعض النص")
يمكن للمرء محاكاة الضغط على مفاتيح الأسهم باستخدام فئة "المفاتيح": 
 

element.send_keys ("وبعض" ، المفاتيح ARROW_DOWN)
لاحظ أيضًا أنه من الممكن استدعاء send_keys على أي عنصر ، مما يجعل من الممكن اختبار اختصارات لوحة المفاتيح مثل تلك المستخدمة في Gmail. 
يمكن للمرء بسهولة مسح محتويات حقل نصي أو منطقة نصية باستخدام الطريقة الواضحة:
 

element.clear ()
مثال على مشروع - 
لنحاول البحث عن شيء تلقائيًا في 
برنامج geeksforgeeks - 
 

# import webdriver
from selenium import webdriver
 
# create webdriver object
driver = webdriver.Firefox()
 
 
# get geeksforgeeks.org
driver.get("https://www.geeksforgeeks.org/")
 
# get element
element = driver.find_element_by_id("gsc-i-id1")
 
# send keys
element.send_keys("Arrays")
انتاج- 
 


>>>>>>>>>>>>>>>>>

آخر تحديث: 17 إبريل 2020
إستراتيجيات محددات المواقع في Selenium Python هي طرق تُستخدم لتحديد موقع العناصر من الصفحة وتنفيذ عملية على نفسها. تم تصميم Python Module من السيلينيوم لإجراء اختبار آلي باستخدام Python. توفر روابط Selenium Python واجهة برمجة تطبيقات بسيطة لكتابة اختبارات وظيفية / قبول باستخدام Selenium WebDriver. بعد أن يقوم المرء بتثبيت السيلينيوم والسحب - التنقل في الروابط باستخدام طريقة get ، قد يرغب المرء في اللعب أكثر باستخدام Selenium Python. بعد فتح صفحة باستخدام السيلينيوم مثل geeksforgeeks ، قد يرغب المستخدم في النقر فوق بعض الأزرار تلقائيًا أو ملء نموذج تلقائيًا أو أي مهمة آلية من هذا القبيل. تدور هذه المقالة حول تحديد موقع العناصر الفردية في Selenium Python.

استراتيجيات محدد المواقع لتحديد موقع العناصر الأولى الفردية
يتبع Selenium Python استراتيجيات تحديد مختلفة للعناصر. يمكن للمرء تحديد موقع عنصر في 8 طرق مختلفة. فيما يلي قائمة بإستراتيجيات تحديد موقع السيلينيوم في الثعبان -

محددات المواقع	وصف
find_element_by_id	سيتم إرجاع العنصر الأول مع قيمة سمة المعرف المتطابقة مع الموقع.
find_element_by_name	سيتم إرجاع العنصر الأول مع قيمة سمة الاسم المطابقة للموقع.
find_element_by_xpath	سيتم إرجاع العنصر الأول الذي يتطابق مع بناء جملة xpath مع الموقع.
find_element_by_link_text	سيتم إرجاع العنصر الأول مع قيمة نص الارتباط المطابقة للموقع.
find_element_by_partial_link_text	سيتم إرجاع العنصر الأول الذي يحتوي على قيمة نص ارتباط جزئية تطابق الموقع.
find_element_by_tag_name	سيتم إرجاع العنصر الأول مع اسم العلامة المحدد.
find_element_by_class_name	سيتم إرجاع العنصر الأول مع اسم سمة الفئة المطابقة.
find_element_by_css_selector	سيتم إرجاع العنصر الأول مع محدد CSS المطابق.
find_element_by_id
باستخدام هذه الإستراتيجية ، سيتم إرجاع العنصر الأول الذي يتطابق مع قيمة سمة المعرّف مع الموقع. إذا لم يكن لأي عنصر سمة معرف مطابقة ، فسيتم رفع NoSuchElementException.

بناء الجملة -
driver.find_element_by_id ("id_of_element")
مثال -
على سبيل المثال ، ضع في اعتبارك مصدر الصفحة هذا:

<html>
 <body>
  <form id="loginForm">
   <input name="username" type="text" />
   <input name="password" type="password" />
   <input name="continue" type="submit" value="Login" />
  </form>
 </body>
<html>
الآن بعد إنشاء برنامج التشغيل ، يمكنك الحصول على عنصر باستخدام -

login_form = driver.find_element_by_id ('loginForm')
للتحقق من التنفيذ العملي ، قم بزيارة - find_element_by_id () طريقة برنامج التشغيل - Selenium Python

find_element_by_name
باستخدام هذه الإستراتيجية ، سيتم إرجاع العنصر الأول الذي يتطابق مع قيمة سمة الاسم مع الموقع. إذا لم يكن لأي عنصر سمة اسم مطابقة ، فسيتم رفع NoSuchElementException.

بناء الجملة -
driver.find_element_by_name ("name_of_element")
مثال -
على سبيل المثال ، ضع في اعتبارك مصدر الصفحة هذا:

<html>
 <body>
  <form id="loginForm">
   <input name="username" type="text" />
   <input name="password" type="password" />
   <input name="continue" type="submit" value="Login" />
  </form>
 </body>
<html>
الآن بعد إنشاء برنامج التشغيل ، يمكنك الحصول على عنصر باستخدام -

element = driver.find_element_by_name ("اسم المستخدم")
للتحقق من التطبيق العملي ، قم بزيارة - find_element_by_name () طريقة برنامج التشغيل - Selenium Python

find_element_by_xpath
باستخدام هذه الإستراتيجية ، سيتم إرجاع العنصر الأول بنمط xpath الذي يطابق الموقع. إذا لم يكن لأي عنصر سمة عنصر مطابقة ، فسيتم رفع NoSuchElementException.

بناء الجملة -
driver.find_element_by_xpath ("xpath")
مثال -
على سبيل المثال ، ضع في اعتبارك مصدر الصفحة هذا:

<html>
 <body>
  <form id="loginForm">
   <input name="username" type="text" />
   <input name="password" type="password" />
   <input name="continue" type="submit" value="Login" />
  </form>
 </body>
<html>
الآن بعد إنشاء برنامج التشغيل ، يمكنك الحصول على عنصر باستخدام -

login_form = driver.find_element_by_xpath ("/ html / body / form [1]")
login_form = driver.find_element_by_xpath ("// النموذج [1]")
للتحقق من التطبيق العملي ، قم بزيارة - find_element_by_xpath () طريقة برنامج التشغيل - Selenium Python

find_element_by_link_text
باستخدام هذه الإستراتيجية ، سيتم إرجاع العنصر الأول الذي يحتوي على قيمة نص الارتباط المطابقة للموقع. إذا لم يكن لأي عنصر سمة نص ارتباط مطابقة ، فسيتم رفع NoSuchElementException.

بناء الجملة -
driver.find_element_by_link_text ("نص الارتباط")
مثال -
على سبيل المثال ، ضع في اعتبارك مصدر الصفحة هذا:

<html>
 <body>
  <p>Are you sure you want to do this?</p>
  <a href="continue.html">Continue</a>
  <a href="cancel.html">Cancel</a>
</body>
<html>
الآن بعد إنشاء برنامج التشغيل ، يمكنك الحصول على عنصر باستخدام -

login_form = driver.find_element_by_link_text ("متابعة")
للتحقق من التنفيذ العملي ، قم بزيارة - find_element_by_link_text () طريقة برنامج التشغيل - Selenium Python

find_element_by_partial_link_text
باستخدام هذه الإستراتيجية ، سيتم إرجاع العنصر الأول الذي يحتوي على قيمة نص ارتباط جزئية تطابق الموقع. إذا لم يكن لأي عنصر سمة نص ارتباط جزئية مطابقة ، فسيتم رفع NoSuchElementException.

بناء الجملة -
driver.find_element_by_partial_link_text ("نص الارتباط")
مثال -
على سبيل المثال ، ضع في اعتبارك مصدر الصفحة هذا:

<html>
 <body>
  <p>Are you sure you want to do this?</p>
  <a href="continue.html">Continue</a>
  <a href="cancel.html">Cancel</a>
</body>
<html>
الآن بعد إنشاء برنامج التشغيل ، يمكنك الحصول على عنصر باستخدام -

login_form = driver.find_element_by_partial_link_text ("متابعة")
للتحقق من التنفيذ العملي ، قم بزيارة - find_element_by_partial_link_text () طريقة برنامج التشغيل - Selenium Python

find_element_by_tag_name
باستخدام هذه الإستراتيجية ، سيتم إرجاع العنصر الأول الذي يحمل اسم العلامة المحدد. إذا لم يكن لأي عنصر اسم علامة مطابق ، فسيتم رفع NoSuchElementException.

بناء الجملة -
driver.find_element_by_tag_name ("اسم العلامة")
مثال -
على سبيل المثال ، ضع في اعتبارك مصدر الصفحة هذا:

<html>
 <body>
  <h1>Welcome</h1>
  <p>Site content goes here.</p>
</body>
<html>
الآن بعد إنشاء برنامج التشغيل ، يمكنك الحصول على عنصر باستخدام -

login_form = driver.find_element_by_tag_name ('h1')
للتحقق من التنفيذ العملي ، قم بزيارة - find_element_by_tag_name () طريقة برنامج التشغيل - Selenium Python

find_element_by_class_name
باستخدام هذه الإستراتيجية ، سيتم إرجاع العنصر الأول الذي يحمل اسم سمة الفئة المطابق. إذا لم يكن لأي عنصر اسم سمة فئة مطابق ، فسيتم رفع NoSuchElementException.

بناء الجملة -
driver.find_element_by_class_name ("class_of_element")
مثال -
على سبيل المثال ، ضع في اعتبارك مصدر الصفحة هذا:

<html>
 <body>
  <p class="content">Site content goes here.</p>
</body>
<html>
الآن بعد إنشاء برنامج التشغيل ، يمكنك الحصول على عنصر باستخدام -

content = driver.find_element_by_class_name ('content')
للتحقق من التنفيذ العملي ، قم بزيارة - find_element_by_class_name () طريقة برنامج التشغيل - Selenium Python

find_element_by_css_selector
باستخدام هذه الإستراتيجية ، سيتم إرجاع العنصر الأول مع محدد CSS المطابق. إذا لم يكن لأي عنصر محدد CSS مطابق ، فسيتم رفع NoSuchElementException.

بناء الجملة -
driver.find_element_by_css_selector ("محددات CSS")
مثال -
على سبيل المثال ، ضع في اعتبارك مصدر الصفحة هذا:

<html>
 <body>
  <p class="content">Site content goes here.</p>
</body>
<html>
الآن بعد إنشاء برنامج التشغيل ، يمكنك الحصول على عنصر باستخدام -

content = driver.find_element_by_css_selector ('p.content')
للتحقق من التنفيذ العملي ، قم بزيارة - find_element_by_css_selector () طريقة برنامج التشغيل - Selenium Python


>>>>>>>>>>>>>>>>>

تحديد موقع عناصر متعددة في Selenium Python
آخر تحديث: 20 إبريل 2020
استراتيجيات محددات المواقع في Selenium Python هي طرق تُستخدم لتحديد موقع عناصر مفردة أو متعددة من الصفحة وتنفيذ العمليات على نفسها. تم تصميم Python Module من السيلينيوم لإجراء اختبار آلي باستخدام Python. توفر روابط Selenium Python واجهة برمجة تطبيقات بسيطة لكتابة اختبارات وظيفية / قبول باستخدام Selenium WebDriver. بعد أن يقوم المرء بتثبيت السيلينيوم والسحب - التنقل في الروابط باستخدام طريقة get ، قد يرغب المرء في اللعب أكثر باستخدام Selenium Python. بعد فتح الصفحة باستخدام السيلينيوم مثل geeksforgeeks ، قد يرغب المرء في النقر فوق بعض الأزرار تلقائيًا أو ملء نموذج تلقائيًا أو أي مهمة آلية من هذا القبيل. تدور هذه المقالة حول تحديد موقع عناصر متعددة في Selenium Python.

استراتيجيات محدد المواقع لتحديد عناصر متعددة
يتبع Selenium Python استراتيجيات تحديد مختلفة للعناصر. يمكن للمرء تحديد موقع عناصر متعددة بسبع طرق مختلفة. فيما يلي قائمة بإستراتيجيات تحديد موقع السيلينيوم في الثعبان -

محددات المواقع	وصف
find_elements_by_name	سيتم إرجاع جميع العناصر التي لها قيمة سمة الاسم تطابق الموقع.
find_elements_by_xpath	سيتم إرجاع جميع العناصر التي تتطابق مع بناء جملة xpath مع الموقع.
find_elements_by_link_text	سيتم إرجاع جميع العناصر ذات قيمة نص الارتباط المطابقة للموقع.
find_elements_by_partial_link_text	سيتم إرجاع جميع العناصر التي تحتوي على قيمة نص ارتباط جزئية تطابق الموقع.
find_elements_by_tag_name	سيتم إرجاع جميع العناصر مع اسم العلامة المحدد.
find_elements_by_class_name	سيتم إرجاع جميع العناصر التي تطابق اسم سمة الفئة.
find_elements_by_css_selector	سيتم إرجاع جميع العناصر ذات محدد CSS المطابق.
find_elements_by_name
باستخدام هذه الإستراتيجية ، سيتم إرجاع جميع العناصر التي تطابق قيمة سمة الاسم مع الموقع. إذا لم يكن لأي عنصر سمة اسم مطابقة ، فسيتم رفع NoSuchElementException.

بناء الجملة -
driver.find_elements_by_name ("name_of_element")
مثال -
على سبيل المثال ، ضع في اعتبارك مصدر الصفحة هذا:

<html>
 <body>
  <form id="loginForm">
   <input name="username" type="text" />
   <input name="username" type="username" />
   <input name="continue" type="submit" value="Login" />
  </form>
 </body>
<html>
الآن بعد إنشاء برنامج التشغيل ، يمكنك الحصول على العناصر باستخدام -

العناصر = driver.find_elements_by_name ("اسم المستخدم")
للتحقق من التطبيق العملي ، قم بزيارة - find_elements_by_name () طريقة برنامج التشغيل - Selenium Python

find_elements_by_xpath
باستخدام هذه الإستراتيجية ، سيتم إرجاع جميع العناصر ذات نمط xpath المطابق للموقع. إذا لم يكن لأي عنصر سمة عنصر مطابقة ، فسيتم رفع NoSuchElementException.

بناء الجملة -
driver.find_elements_by_xpath ("xpath")
مثال -
على سبيل المثال ، ضع في اعتبارك مصدر الصفحة هذا:

<html>
 <body>
  <form id="loginForm">
   <input name="username" type="text" />
   <input name="password" type="password" />
   <input name="continue" type="submit" value="Login" />
  </form>
 </body>
<html>
الآن بعد إنشاء برنامج التشغيل ، يمكنك الحصول على العناصر باستخدام -

login_form = driver.find_elements_by_xpath ("/ html / body / form [1]")
login_form = driver.find_elements_by_xpath ("// النموذج [1]")
للتحقق من التطبيق العملي ، قم بزيارة - find_elements_by_xpath () طريقة التشغيل - Selenium Python

find_elements_by_link_text
باستخدام هذه الإستراتيجية ، سيتم إرجاع جميع العناصر التي تتطابق مع قيمة نص الارتباط مع الموقع. إذا لم يكن لأي عنصر سمة نص ارتباط مطابقة ، فسيتم رفع NoSuchElementException.

بناء الجملة -
driver.find_elements_by_link_text ("نص الارتباط")
مثال -
على سبيل المثال ، ضع في اعتبارك مصدر الصفحة هذا:

<html>
 <body>
  <p>Are you sure you want to do this?</p>
  <a href="continue.html">Continue</a>
  <a href="cancel.html">Cancel</a>
</body>
<html>
الآن بعد إنشاء برنامج التشغيل ، يمكنك الحصول على العناصر باستخدام -

login_form = driver.find_elements_by_link_text ("متابعة")
للتحقق من التنفيذ العملي ، قم بزيارة - find_elements_by_link_text () طريقة برنامج التشغيل - Selenium Python

find_elements_by_partial_link_text
باستخدام هذه الإستراتيجية ، سيتم إرجاع جميع العناصر التي تتطابق مع قيمة نص الارتباط الجزئي مع الموقع. إذا لم يكن لأي عنصر سمة نص ارتباط جزئية مطابقة ، فسيتم رفع NoSuchElementException.

بناء الجملة -
driver.find_elements_by_partial_link_text ("نص الارتباط")
مثال -
على سبيل المثال ، ضع في اعتبارك مصدر الصفحة هذا:

<html>
 <body>
  <p>Are you sure you want to do this?</p>
  <a href="continue.html">Continue</a>
  <a href="cancel.html">Cancel</a>
</body>
<html>
الآن بعد إنشاء برنامج التشغيل ، يمكنك الحصول على جميع العناصر باستخدام -

login_form = driver.find_elements_by_partial_link_text ("متابعة")
للتحقق من التنفيذ العملي ، قم بزيارة - find_elements_by_partial_link_text () طريقة التشغيل - Selenium Python

find_elements_by_tag_name
باستخدام هذه الإستراتيجية ، سيتم إرجاع جميع العناصر التي تحمل اسم العلامة المحدد. إذا لم يكن لأي عنصر اسم علامة مطابق ، فسيتم رفع NoSuchElementException.

بناء الجملة -
driver.find_elements_by_tag_name ("اسم العلامة")
مثال -
على سبيل المثال ، ضع في اعتبارك مصدر الصفحة هذا:

<html>
 <body>
  <h1>Welcome</h1>
  <p>Site content goes here.</p>
</body>
<html>
الآن بعد إنشاء برنامج التشغيل ، يمكنك الحصول على جميع العناصر باستخدام -

login_form = driver.find_elements_by_tag_name ('h1')
للتحقق من التنفيذ العملي ، قم بزيارة - find_elements_by_tag_name () طريقة برنامج التشغيل - Selenium Python

find_elements_by_class_name
باستخدام هذه الإستراتيجية ، سيتم إرجاع العناصر الأولى مع اسم سمة الفئة المطابقة. إذا لم يكن لأي عنصر اسم سمة فئة مطابق ، فسيتم رفع NoSuchElementException.

بناء الجملة -
driver.find_elements_by_class_name ("class_of_element")
مثال -
على سبيل المثال ، ضع في اعتبارك مصدر الصفحة هذا:

<html>
 <body>
  <p class="content">Site content goes here.</p>
</body>
<html>
الآن بعد إنشاء برنامج التشغيل ، يمكنك الحصول على جميع العناصر باستخدام -

content = driver.find_elements_by_class_name ('content')
للتحقق من التنفيذ العملي ، قم بزيارة - find_elements_by_class_name () طريقة برنامج التشغيل - Selenium Python

find_elements_by_css_selector
باستخدام هذه الإستراتيجية ، سيتم إرجاع جميع العناصر ذات محدد CSS المطابق. إذا لم يكن لأي عنصر محدد CSS مطابق ، فسيتم رفع NoSuchElementException.

بناء الجملة -
driver.find_elements_by_css_selector ("محددات CSS")
مثال -
على سبيل المثال ، ضع في اعتبارك مصدر الصفحة هذا:

<html>
 <body>
  <p class="content">Site content goes here.</p>
</body>
<html>
الآن بعد إنشاء برنامج التشغيل ، يمكنك الحصول على جميع العناصر باستخدام -

content = driver.find_elements_by_css_selector ('p.content')
للتحقق من التنفيذ العملي ، قم بزيارة - find_elements_by_css_selector () طريقة التشغيل - Selenium Python


>>>>>>>>>>>>>>>>>
استراتيجيات محدد المواقع - سيلينيوم بايثون
مستوى الصعوبة: أساسي
آخر تحديث: 20 إبريل 2020
إستراتيجيات محددات المواقع في Selenium Python هي طرق تُستخدم لتحديد موقع العناصر من الصفحة وتنفيذ عملية على نفسها. تم تصميم Python Module من السيلينيوم لإجراء اختبار آلي باستخدام Python. توفر روابط Selenium Python واجهة برمجة تطبيقات بسيطة لكتابة اختبارات وظيفية / قبول باستخدام Selenium WebDriver. بعد تثبيت عنصر السيلينيوم والتحقق منه - تنقل الروابط باستخدام طريقة get ، قد يرغب المرء في اللعب أكثر باستخدام Selenium Python. بعد فتح صفحة باستخدام السيلينيوم مثل geeksforgeeks ، قد يرغب المرء في النقر فوق بعض الأزرار تلقائيًا أو ملء نموذج تلقائيًا أو أي مهمة آلية من هذا القبيل. تدور هذه المقالة حول استراتيجيتين - تحديد موقع العناصر الفردية والعناصر المتعددة للموقع.
محدد المواقع استراتيجيات السيلينيوم بايثون

استراتيجيات محدد المواقع لتحديد موقع العناصر الأولى الفردية
يتبع Selenium Python استراتيجيات تحديد مختلفة للعناصر. يمكن للمرء تحديد موقع عنصر في 8 طرق مختلفة. فيما يلي قائمة بإستراتيجيات تحديد موقع السيلينيوم في الثعبان -

محددات المواقع	وصف
find_element_by_id	سيتم إرجاع العنصر الأول مع قيمة سمة المعرف المتطابقة مع الموقع.
find_element_by_name	سيتم إرجاع العنصر الأول مع قيمة سمة الاسم المطابقة للموقع.
find_element_by_xpath	سيتم إرجاع العنصر الأول الذي يتطابق مع بناء جملة xpath مع الموقع.
find_element_by_link_text	سيتم إرجاع العنصر الأول مع قيمة نص الارتباط المطابقة للموقع.
find_element_by_partial_link_text	سيتم إرجاع العنصر الأول الذي يحتوي على قيمة نص ارتباط جزئية تطابق الموقع.
find_element_by_tag_name	سيتم إرجاع العنصر الأول مع اسم العلامة المحدد.
find_element_by_class_name	سيتم إرجاع العنصر الأول مع اسم سمة الفئة المطابقة.
find_element_by_css_selector	سيتم إرجاع العنصر الأول مع محدد CSS المطابق.
استراتيجيات محدد المواقع لتحديد عناصر متعددة
يتبع Selenium Python استراتيجيات تحديد مختلفة للعناصر. يمكن للمرء تحديد موقع عناصر متعددة بـ 8 طرق مختلفة. فيما يلي قائمة بإستراتيجيات تحديد موقع السيلينيوم في الثعبان -

محددات المواقع	وصف
find_elements_by_name	سيتم إرجاع جميع العناصر التي لها قيمة سمة الاسم تطابق الموقع.
find_elements_by_xpath	سيتم إرجاع جميع العناصر التي تتطابق مع بناء جملة xpath مع الموقع.
find_elements_by_link_text	سيتم إرجاع جميع العناصر ذات قيمة نص الارتباط المطابقة للموقع.
find_elements_by_partial_link_text	سيتم إرجاع جميع العناصر التي تحتوي على قيمة نص ارتباط جزئية تطابق الموقع.
find_elements_by_tag_name	سيتم إرجاع جميع العناصر مع اسم العلامة المحدد.
find_elements_by_class_name	سيتم إرجاع جميع العناصر التي تطابق اسم سمة الفئة.
find_elements_by_css_selector	سيتم إرجاع جميع العناصر ذات محدد CSS المطابق.

>>>>>>>>>>>>>>>>>

سلاسل العمل في سيلينيوم بايثون
آخر تحديث: 19 مايو 2020
تم تصميم Python Module من السيلينيوم لإجراء اختبار آلي باستخدام Python. ActionChains هي طريقة لأتمتة التفاعلات منخفضة المستوى مثل حركات الماوس وإجراءات زر الماوس والضغط على المفاتيح وتفاعلات قائمة السياق. هذا مفيد للقيام بإجراءات أكثر تعقيدًا مثل التمرير والسحب والإفلات. تُستخدم طرق سلسلة الإجراءات بواسطة البرامج النصية المتقدمة حيث نحتاج إلى سحب عنصر ، والنقر فوق عنصر ، وتدور هذه المقالة حول كيفية التعامل مع DOM باستخدام سلاسل الإجراءات في السيلينيوم. لقد قمنا بتغطية جميع الطرق بأمثلة تفصيلية.

يتم تنفيذ ActionChains بمساعدة كائن سلسلة الإجراءات الذي يخزن الإجراءات في قائمة انتظار وعندما يتم استدعاء تنفيذ () ، يقوم بتنفيذ العمليات في قائمة الانتظار.

كيف تصنع كائن سلسلة العمل؟
لإنشاء كائن من Action Chain ، قم باستيراد فئة سلسلة ACtion من المستندات ومرر برنامج التشغيل باعتباره الوسيطة الرئيسية. بعد هذا يمكن للمرء استخدام هذا الكائن لأداء جميع عمليات سلاسل العمل.

# import webdriver
from selenium import webdriver
   
# import Action chains 
from selenium.webdriver.common.action_chains import ActionChains
   
# create webdriver object
driver = webdriver.Firefox()
   
# create action chain object
action = ActionChains(driver)
  
كيفية استخدام سلاسل العمل في السيلينيوم؟
بعد أن يقوم أحدهم بإنشاء كائن من سلسلة Action ، افتح صفحة ويب ، وقم بتنفيذ العديد من الطرق الأخرى باستخدام النحو التالي والأمثلة. يمكن استخدام سلاسل الإجراءات في نمط سلسلة على النحو التالي -

menu = driver.find_element_by_css_selector(".nav")
hidden_submenu = driver.find_element_by_css_selector(".nav # submenu1")
  
ActionChains(driver).move_to_element(menu).click(hidden_submenu).perform()
أو يمكن ترتيب الإجراءات واحدة تلو الأخرى ، ثم تنفيذها:

menu = driver.find_element_by_css_selector(".nav")
hidden_submenu = driver.find_element_by_css_selector(".nav # submenu1")
  
actions = ActionChains(driver)
actions.move_to_element(menu)
actions.click(hidden_submenu)
actions.perform()
مثال على المشروع -
دعنا نحاول تنفيذ سلاسل الإجراءات باستخدام https://www.geeksforgeeks.org/ واللعب بالطرق المختلفة لـ Selenium Python.

# import webdriver
from selenium import webdriver
   
# import Action chains 
from selenium.webdriver.common.action_chains import ActionChains
   
# create webdriver object
driver = webdriver.Firefox()
   
# get geeksforgeeks.org
driver.get("https://www.geeksforgeeks.org/")
   
# get element 
element = driver.find_element_by_link_text("Courses")
   
# create action chain object
action = ActionChains(driver)
   
# click the item
action.click(on_element = element)
   
# perform the operation
action.perform()
فوق الرمز ، يفتح أولاً https://www.geeksforgeeks.org/ ثم انقر فوق زر الدورات التدريبية في الرأس ، والذي يقوم بعد ذلك بإعادة توجيه المتصفح إلى https://practice.geeksforgeeks.org/ تلقائيًا.
الإخراج -
يفتح السائق الأول https://www.geeksforgeeks.org/ ،

سلسلة عمل سيلينيوم بايثون

ثم يعيد التوجيه إلى https://practice.geeksforgeeks.org/

انقر فوق طريقة عنصر السيلينيوم بايثون

طرق سلسلة العمل في سيلينيوم بايثون
يمكن للمرء إجراء عدد كبير من العمليات باستخدام سلاسل الإجراءات مثل النقر ، والنقر بزر الماوس الأيمن ، وما إلى ذلك. فيما يلي قائمة بالطرق المهمة المستخدمة في سلاسل الإجراءات.

طريقة	وصف
انقر	ينقر أحد العناصر.
انقر مع الاستمرار	الضغط باستمرار على زر الماوس الأيسر على عنصر.
Context_click	ينفذ نقرة السياق (النقر بزر الماوس الأيمن) على عنصر.
نقرتين متتاليتين	نقرًا مزدوجًا فوق عنصر.
السحب والإفلات	الضغط باستمرار على زر الماوس الأيسر على العنصر المصدر ، ثم الانتقال إلى العنصر الهدف وتحرير زر الماوس.
drag_and_drop_by_offset	الضغط باستمرار على زر الماوس الأيسر على العنصر المصدر ، ثم الانتقال إلى الإزاحة الهدف وتحرير زر الماوس.
زر أسفل	يرسل ضغطة مفتاح فقط دون تحريره.
key_up	يحرر مفتاح التعديل.
نقل	تحريك الماوس إلى إزاحة من موضع الماوس الحالي.
نقل إلى عنصر	تحريك الماوس إلى منتصف عنصر.
نقل إلى عنصر_مع_إزاحة	قم بتحريك الماوس عن طريق إزاحة العنصر المحدد ، وتكون الإزاحات متناسبة مع الزاوية العلوية اليسرى للعنصر.
نفذ	ينفذ جميع الإجراءات المخزنة.
وقفة	وقفة كل المدخلات للمدة المحددة في ثوان
إفراج	تحرير زر الماوس على عنصر.
إعادة التعيين	يمسح الإجراءات المخزنة بالفعل محليًا وعلى الطرف البعيد
Send_keys
>>>>>>>>>>>>>>>>>
استثناءات - سيلينيوم بايثون
مستوى الصعوبة: سهل
آخر تحديث: 30 إبريل 2020
الاستثناءات في Selenium Python هي الأخطاء التي تحدث عند فشل إحدى الطرق أو حدوث حدث غير متوقع. يجب أن تكون جميع المثيلات في Python عبارة عن حالات لفئة مشتقة من BaseException. لا تتكافئ فئتان من الاستثناءات غير المرتبطين عبر التصنيف الفرعي أبدًا ، حتى لو كان لهما نفس الاسم. يمكن إنشاء الاستثناءات المضمنة بواسطة المترجم الفوري أو الوظائف المضمنة. تدور هذه المقالة حول الاستثناءات المتعددة التي يمكن أن تحدث أثناء تشغيل برنامج السيلينيوم.

مثال -
دعنا نوضح الاستثناء بمحاولة العثور على عنصر غير موجود والنقر عليه في geeksforgeeks.org

# import webdriver
from selenium import webdriver
  
# create webdriver object
driver = webdriver.Firefox()
  
# get geeksforgeeks.org
driver.get("https://www.geeksforgeeks.org/")
  
# get element 
element = driver.find_element_by_link_text("abrakadabra")
  
# click the item
print(element.click())
الآن ، لنقم بتشغيل هذا البرنامج ، ففتح geeksforgeeks.org أولاً ثم رفع الاستثناء - selenium.common.exceptions.NoSuchElementException ، مما يعني أن هذا العنصر غير موجود على موقع الويب.
تصور الأنف- s- السيلينيوم- الثعبان

استثناءات في Selenium Python
تُعد الاستثناءات ذات استخدام أساسي عند كتابة تعليمات برمجية جاهزة للتطوير خاصة التي تكون معرضة بشكل كبير لخطر التسبب في نوع معين من الاستثناء. إذن هنا قائمة بجميع الاستثناءات في Selenium Python.

استثناء	وصف
ElementClickInterceptedException	تعذر إكمال أمر النقر فوق العنصر لأن العنصر الذي يستقبل الأحداث يحجب العنصر المطلوب النقر فوقه.
ElementNotInteractableException	يتم طرحه عند وجود عنصر في DOM ولكن التفاعلات مع هذا العنصر ستضرب عنصرًا آخر لتلوين الترتيب
ElementNotSelectableException	يُلقى عند محاولة تحديد عنصر غير قابل للتحديد.
ElementNotVisibleException	يتم طرحه عند وجود عنصر على DOM ، ولكنه غير مرئي ، وبالتالي لا يمكن التفاعل معه.
ErrorInResponseException	يتم طرحه عند حدوث خطأ من جانب الخادم.
ImeActivationFailedException	تم إلقاؤه عند فشل تنشيط محرك IME.
ImeNotAvailableException	يتم طرحه عند عدم توفر دعم محرر أسلوب الإدخال.
InsecureCertificateException	تسبب التنقل في وصول وكيل المستخدم إلى تحذير الشهادة ، والذي عادة ما يكون نتيجة لشهادة TLS منتهية الصلاحية أو غير صالحة.
InvalidArgumentException	الوسيطات التي تم تمريرها إلى أمر ما إما غير صالحة أو مشوهة.
InvalidCookieDomainException	يتم إلقاؤه عند محاولة إضافة ملف تعريف ارتباط ضمن مجال مختلف عن عنوان URL الحالي.
InvalidCoordinatesException	الإحداثيات المقدمة لعملية تفاعلات غير صالحة.
InvalidElementStateException	يتم طرحه عند تعذر إكمال أحد الأوامر لأن العنصر في حالة غير صالحة.
InvalidSelectorException	يتم إلقاؤه عندما لا يقوم المحدد المستخدم في البحث عن عنصر بإرجاع WebElement.
InvalidSessionIdException	يحدث إذا لم يكن معرف الجلسة المحدد موجودًا في قائمة الجلسات النشطة ، مما يعني أن الجلسة إما غير موجودة أو أنها غير نشطة.
InvalidSwitchToTargetException	يتم إلقاؤه عند عدم وجود الإطار أو هدف النافذة المراد تبديله.
MoveTargetOutOfBoundsException	يتم إلقاؤها عندما يكون الهدف المقدم لأسلوب ActionsChains move () غير صالح ، أي خارج المستند.
NoAlertPresentException	يتم إلقاؤها عند التبديل إلى عدم وجود تنبيه مقدم.
NoSuchAttributeException	يتم طرحه عند تعذر العثور على سمة العنصر.
NoSuchCookieException	لم يتم العثور على ملف تعريف ارتباط يطابق اسم المسار المحدد بين ملفات تعريف الارتباط المرتبطة بالمستند النشط لسياق التصفح الحالي.
NoSuchFrameException	يتم إلقاؤها عندما لا يكون هدف الإطار المراد تبديله موجودًا.
NoSuchWindowException	ألقيت عند عدم وجود هدف النافذة المراد تبديله.
StaleElementReferenceException	يتم طرحه عندما تصبح الإشارة إلى عنصر "قديمة" الآن.
TimeoutException	تُلقى عندما لا يكتمل الأمر في وقت كافٍ.
UnableToSetCookieException	يتم طرحه عندما يفشل السائق في تعيين ملف تعريف ارتباط.
UnlimitedAlertPresentException	تُلقى عند ظهور تنبيه غير متوقع.
UnlimitedTagNameException	يتم إلقاؤه عندما لا تحصل فئة الدعم على عنصر ويب متوقع
