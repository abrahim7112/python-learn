
بيان كسر بايثون
مستوى الصعوبة: متوسط
تاريخ التحديث الأخير: 22 تشرين الثاني (نوفمبر) 2019
يؤدي استخدام الحلقات في Python إلى أتمتة المهام وتكرارها بطريقة فعالة. لكن في بعض الأحيان ، قد تظهر حالة تريد فيها الخروج من الحلقة بالكامل أو تخطي تكرار أو تجاهل هذا الشرط. يمكن القيام بذلك عن طريق عبارات التحكم في الحلقة . تغير عبارات التحكم في الحلقة التنفيذ من تسلسله الطبيعي. عندما يترك التنفيذ نطاقًا ، يتم إتلاف جميع الكائنات التلقائية التي تم إنشاؤها في هذا النطاق. تدعم Python عبارات التحكم التالية.

تواصل البيان
بيان كسر
تمرير البيان
في هذه المقالة ، سيكون التركيز الرئيسي على break البيان.

بيان كسر
يتم استخدام عبارة Break في Python لإخراج التحكم من الحلقة عند تشغيل بعض الظروف الخارجية. يتم وضع عبارة Break داخل جسم الحلقة (بشكل عام بعد شرط if).

كسر بيان-الثعبان

بناء الجملة:

فترة راحة
مثال:


# Python program to
# demonstrate break statement
  
s = 'geeksforgeeks'
# Using for loop
for letter in s:
  
    print(letter)
    # break the loop as soon it sees 'e'
    # or 's'
    if letter == 'e' or letter == 's':
        break
  
print("Out of for loop")
print()
  
i = 0
  
# Using while loop
while True:
    print(s[i])
  
    # break the loop as soon it sees 'e'
    # or 's'
    if s[i] == 'e' or s[i] == 's':
        break
    i += 1
  
print("Out of while loop")
انتاج:

ز
ه
خارج الحلقة

ز
ه
خارج حلقة أثناء
في المثال أعلاه ، تقوم كلتا الحلقتين بتكرار السلسلة "geeksforgeeks" وبمجرد أن تصادف الحرف "e" أو "s" ، يصبح شرط if صحيحًا ويتم إخراج تدفق التنفيذ من الحلقة.



<<<<<<<<<<<<<<<<<<<<<
بيان متابعة بايثون
مستوى الصعوبة: متوسط
آخر تحديث: 27 أغسطس 2021
في هذه المقالة ، سنناقش تعليمات المتابعة في بايثون لتعديل تدفق الحلقات.

استخدام بيان المتابعة
Loops في Python تعمل على أتمتة المهام وتكرارها بطريقة فعالة. لكن في بعض الأحيان ، قد تظهر حالة تريد فيها الخروج من الحلقة بالكامل أو تخطي تكرار أو تجاهل هذا الشرط. يمكن القيام بذلك عن طريق عبارات التحكم في الحلقة . Continue هو نوع من عبارة التحكم في الحلقة التي يمكن أن تغير تدفق الحلقة. 

تواصل البيان
عبارة Continue عبارة عن عبارة تحكم حلقة تفرض تنفيذ التكرار التالي للحلقة أثناء تخطي باقي الكود داخل الحلقة للتكرار الحالي فقط ، أي عندما يتم تنفيذ عبارة المتابعة في الحلقة ، فإن الكود الموجود داخل الحلقة يتبع سيتم تخطي عبارة المتابعة للتكرار الحالي وسيبدأ التكرار التالي للحلقة.

بناء الجملة: 

استمر
مخطط انسيابي لبيان المتابعة
تواصل بيان بيثون 1

مثال: استمرار العبارة في بايثون
ضع في اعتبارك الموقف عندما تحتاج إلى كتابة برنامج يطبع الرقم من 1 إلى 10 ولكن ليس 6. فمن المحدد أنه يتعين عليك القيام بذلك باستخدام حلقة ولا يُسمح باستخدام سوى حلقة واحدة. هنا يأتي استخدام استمرار البيان. ما يمكننا القيام به هنا هو أنه يمكننا تشغيل حلقة من 1 إلى 10 وفي كل مرة يتعين علينا مقارنة قيمة المكرر بـ 6. إذا كانت تساوي 6 ، فسنستخدم تعليمة المتابعة للمتابعة إلى التكرار التالي دون طباعة أي شيء وإلا سنطبع القيمة.

فيما يلي تنفيذ الفكرة أعلاه:


# Python program to
# demonstrate continue
# statement
 
# loop from 1 to 10
for i in range(1, 11):
 
    # If i is equals to 6,
    # continue to next iteration
    # without printing
    if i == 6:
        continue
    else:
        # otherwise print the value
        # of i
        print(i, end=" ")
انتاج: 

1 2 3 4 5 7 8 9 10
ملاحظة: يمكن استخدام تعليمة المتابعة مع أي حلقة أخرى مثل حلقة while بطريقة مماثلة لاستخدامها مع حلقة for أعلاه.

مشكلة التمرين: 

بإعطائك رقم n ، قم بطباعة نمط مثلث. يسمح لنا باستخدام حلقة واحدة فقط.

المدخلات: 7
 الخرج:
*
* *
* * *
* * * *
* * * * *
* * * * * *
* * * * * * *
الحل: اطبع النمط باستخدام حلقة واحدة | المجموعة 2 (استخدام بيان المتابعة)


<<<<<<<<<<<<<<<<<<<<<
بيان تمرير بايثون
مستوى الصعوبة: سهل
آخر تحديث: 24 أغسطس 2021
بيان المرور هو بيان فارغ. لكن الاختلاف بين التمرير والتعليق هو أن المترجم يتجاهل التعليق بينما لا يتم تجاهل كلمة المرور. 

يتم استخدام عبارة المرور بشكل عام كعنصر نائب ، أي عندما لا يعرف المستخدم الرمز الذي يجب كتابته. لذلك ببساطة يمر المستخدم على هذا الخط. في بعض الأحيان ، يتم استخدام التمرير عندما لا يريد المستخدم تنفيذ أي رمز. لذلك يمكن للمستخدم ببساطة وضع كلمة مرور حيث لا يُسمح بالرمز الفارغ ، كما هو الحال في الحلقات أو تعريفات الوظائف أو تعريفات الفئة أو عبارات if. لذا فإن استخدام مستخدم عبارة المرور يتجنب هذا الخطأ.

بناء الجملة:

نجاح
مثال 1: يمكن استخدام عبارة المرور في وظائف فارغة


def geekFunction:
  pass
مثال 2: يمكن أيضًا استخدام عبارة pass في فئة فارغة


class geekClass:
  pass
مثال 3: يمكن استخدام عبارة pass في حلقة for عندما لا يعرف المستخدم ما الذي يجب ترميزه داخل الحلقة


n = 10
for i in range(n):
   
  # pass can be used as placeholder
  # when code is to added later
  pass
مثال 4: يمكن استخدام عبارة المرور مع العبارات الشرطية 


a = 10
b = 20
 
if(a<b):
  pass
else:
  print("b<a")
مثال 5: لنأخذ مثالًا آخر يتم فيه تنفيذ عبارة المرور عندما يكون الشرط صحيحًا 


li =['a', 'b', 'c', 'd']
 
for i in li:
    if(i =='a'):
        pass
    else:
        print(i)
انتاج:

ب
ج
د