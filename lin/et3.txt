
مساحات الأسماء والنطاق في بايثون
مستوى الصعوبة: سهل
آخر تحديث: 09 فبراير 2021
ما هي مساحة الاسم:
مساحة الاسم هي نظام له اسم فريد لكل كائن في Python. قد يكون الكائن متغيرًا أو طريقة. تحتفظ Python نفسها بمساحة اسم في شكل قاموس Python. لننتقل إلى مثال ، بنية نظام ملفات الدليل في أجهزة الكمبيوتر. وغني عن القول ، أنه يمكن للمرء أن يكون لديه عدة أدلة بها ملف يحمل نفس الاسم داخل كل دليل. ولكن يمكن توجيه المرء إلى الملف ، كما يرغب المرء ، فقط عن طريق تحديد المسار المطلق للملف. 
مثال في الوقت الفعلي ، يشبه دور مساحة الاسم اللقب. قد لا يجد المرء "أليس" واحدًا في الفصل ، فقد يكون هناك العديد من "Alice" ولكن عندما تسأل بشكل خاص عن "Alice Lee" أو "Alice Clark" (مع لقب) ، سيكون هناك واحد فقط (الوقت لا تفعل ذلك) أعتقد أن الاسم الأول واللقب متماثلان لعدة طلاب).
على نفس المنوال ، يفهم مفسر Python الطريقة الدقيقة أو المتغير الذي يحاول الشخص الإشارة إليه في الكود ، اعتمادًا على مساحة الاسم. لذا ، فإن تقسيم الكلمة نفسها يعطي القليل من المعلومات. اسمه (الذي يعني الاسم ، المعرف الفريد) + الفضاء (الذي يتحدث عن شيء متعلق بالنطاق). هنا ، قد يكون الاسم لأي طريقة أو متغير في Python وتعتمد المساحة على الموقع الذي تحاول من خلاله الوصول إلى متغير أو طريقة.
 

أنواع مساحات الأسماء:
 
عندما يعمل مترجم Python فقط بدون أي وحدات أو طرق أو فئات محددة من قبل المستخدم ، إلخ. بعض الوظائف مثل print () ، id () موجودة دائمًا ، فهذه مساحات أسماء مضمنة. عندما يقوم المستخدم بإنشاء وحدة نمطية ، يتم إنشاء مساحة اسم عالمية ، وبعد ذلك يؤدي إنشاء وظائف محلية إلى إنشاء مساحة الاسم المحلية. تشتمل مساحة الاسم المضمنة على مساحة الاسم العالمية وتشتمل مساحة الاسم العالمية على مساحة الاسم المحلية .
 



عمر مساحة الاسم:
 
يعتمد عمر مساحة الاسم على نطاق الكائنات ، إذا انتهى نطاق الكائن ، ينتهي عمر مساحة الاسم هذه. وبالتالي ، لا يمكن الوصول إلى كائنات مساحة الاسم الداخلية من مساحة اسم خارجية.
 

مثال: 

# var1 is in the global namespace
var1 = 5
def some_func():
 
    # var2 is in the local namespace
    var2 = 6
    def some_inner_func():
 
        # var3 is in the nested local
        # namespace
        var3 = 7
كما هو موضح في الشكل التالي ، يمكن أن يكون اسم الكائن نفسه موجودًا في مساحات أسماء متعددة حيث يتم الحفاظ على العزل بين نفس الاسم من خلال مساحة الاسم الخاصة بهم.



ولكن في بعض الحالات ، قد يكون المرء مهتمًا بتحديث أو معالجة المتغيرات العامة فقط ، كما هو موضح في المثال التالي ، يجب على المرء أن يميزها صراحةً على أنها عالمية والتحديث أو العملية. لاحظ أن السطر "count = count +1" يشير إلى المتغير الشامل وبالتالي يستخدم المتغير الشامل ، لكن قارن هذا مع نفس السطر المكتوب "count = 1". ثم هناك حاجة ماسة إلى سطر "العد الشامل" وفقًا لقواعد النطاق.


# Python program processing
# global variable
 
count = 5
def some_method():
    global count
    count = count + 1
    print(count)
some_method()
انتاج: 

6
نطاق الكائنات في بايثون:
 
يشير النطاق إلى منطقة التشفير التي يمكن من خلالها الوصول إلى كائن بايثون معين. ومن ثم لا يمكن للمرء الوصول إلى أي كائن معين من أي مكان من الكود ، يجب أن يسمح بالوصول من خلال نطاق الكائن.
لنأخذ مثالاً للحصول على فهم مفصل لنفسه: 
 

مثال 1: 


# Python program showing
# a scope of object
 
def some_func():
    print("Inside some_func")
    def some_inner_func():
        var = 10
        print("Inside inner function, value of var:",var)
    some_inner_func()
    print("Try printing var from outer function: ",var)
some_func()
انتاج: 

داخل some_func
داخل الوظيفة الداخلية ، قيمة var: 10

Traceback (آخر مكالمة أخيرة):
  ملف "/home/1eb47bb3eac2fa36d6bfe5d349dfcb84.py" ، السطر 8 ، في
    some_func ()
  ملف "/home/1eb47bb3eac2fa36d6bfe5d349dfcb84.py" ، السطر 7 ، في some_func
    طباعة ("جرب طباعة var من الوظيفة الخارجية:" ، var)
NameError: الاسم "var" غير محدد

>>>>>>>>>>>>>>>>>>>>>>>>
البيان والمسافة البادئة والتعليق في بايثون
مستوى الصعوبة: أساسي
آخر تحديث: 09 أغسطس 2021
صياغات
التعليمات المكتوبة في الكود المصدري للتنفيذ تسمى التعليمات. هناك أنواع مختلفة من العبارات في لغة برمجة Python مثل عبارات التعيين ، والعبارات الشرطية ، وعبارات Looping ، وما إلى ذلك ، وكلها تساعد المستخدم في الحصول على المخرجات المطلوبة. على سبيل المثال ، n = 50 عبارة عن بيان تخصيص.
عبارات متعددة الأسطر: يمكن تمديد العبارات في Python إلى سطر واحد أو أكثر باستخدام الأقواس () ، والأقواس الكبيرة {} ، والأقواس المربعة [] ، والفاصلة المنقوطة (؛) ، والشرطة المائلة للحرف التكميلي (\). عندما يحتاج المبرمج إلى إجراء عمليات حسابية طويلة ولا يمكنه احتواء عباراته في سطر واحد ، يمكن للمرء الاستفادة من هذه الأحرف. 
مثال : 
 

أعلن باستخدام الحرف التكميلي (\):
ق = 1 + 2 + 3 + \
    4 + 5 + 6 + \
    7 + 8 + 9

أعلن باستخدام الأقواس ():
ن = (1 * 2 * 3 + 7 + 8 + 9)

معلن باستخدام أقواس معقوفة []:
لاعب كرة قدم = ['MESSI' ،
          "نيمار"
          "سواريز"]

أعلن باستخدام الأقواس {}:
س = {1 + 2 + 3 + 4 + 5 + 6 +
     7 + 8 + 9}

معلن باستخدام الفاصلة المنقوطة (؛):
العلم = 2 ؛ الحبال = 3 ؛ القطب = 4
 

المسافة الفارغة
الكتلة هي مزيج من كل هذه العبارات. يمكن اعتبار الكتلة بمثابة تجميع للبيانات لغرض معين. تستخدم معظم لغات البرمجة مثل C و C ++ و Java الأقواس {} لتحديد كتلة من التعليمات البرمجية. إحدى السمات المميزة لـ Python هي استخدامها للمسافة البادئة لإبراز كتل الكود. يتم استخدام المسافة البيضاء للمسافة البادئة في بايثون. جميع العبارات التي لها نفس المسافة إلى اليمين تنتمي إلى نفس كتلة التعليمات البرمجية. إذا كان لابد من وجود كتلة متداخلة بشكل أكثر عمقًا ، فسيتم وضع مسافة بادئة لها على اليمين. يمكنك فهمه بشكل أفضل من خلال النظر في سطور التعليمات البرمجية التالية:
 


# Python program showing
# indentation
 
site = 'gfg'
 
if site == 'gfg':
    print('Logging on to geeksforgeeks...')
else:
    print('retype the URL.')
print('All set !')
انتاج: 
 

تسجيل الدخول إلى geeksforgeeks ...
اكتمل الإعداد!
الأسطر المطبوعة ("تسجيل الدخول إلى geeksforgeeks ...") والطباعة ("أعد كتابة عنوان URL.") هما كتلتان منفصلتان من كتل التعليمات البرمجية. تم وضع مسافة بادئة بين كتلتين من الكود في مثالنا if-statement لأربع مسافات. لم يتم وضع مسافة بادئة للطباعة النهائية ("تم ضبط كل شيء!") ، وبالتالي فهي لا تنتمي إلى كتلة else. 
 


j = 1
while(j<= 5):
     print(j)
     j = j + 1
انتاج: 
 

1
2
3
4
5
للإشارة إلى كتلة من التعليمات البرمجية في Python ، يجب أن تترك مسافة بادئة لكل سطر من الكتلة بنفس المسافة البيضاء. تم وضع مسافة بادئة بين سطري الكود في حلقة while loop وأربع مسافات. مطلوب للإشارة إلى كتلة التعليمات البرمجية التي تنتمي إليها العبارة. على سبيل المثال ، j = 1 و while (j <= 5): ليست مسافة بادئة ، وبالتالي فهي ليست داخل الكتلة while. لذلك ، تُنشئ كود Python عن طريق المسافة البادئة.
 

تعليقات
غالبًا ما يستخدم مطورو Python نظام التعليقات لأنه بدون استخدامه ، يمكن أن تصبح الأشياء مربكة حقًا وبسرعة حقيقية. التعليقات هي المعلومات المفيدة التي يوفرها المطورون لجعل القارئ يفهم كود المصدر. يشرح المنطق أو جزء منه المستخدم في الكود. عادة ما تكون التعليقات مفيدة لشخص ما يحافظ على شفرتك أو يعززها عندما لا تكون موجودًا للإجابة على الأسئلة المتعلقة بها. غالبًا ما يتم الاستشهاد بها على أنها اصطلاح برمجة مفيد لا يشارك في إخراج البرنامج ولكنه يحسن إمكانية قراءة البرنامج بأكمله. يوجد نوعان من التعليقات في بايثون: 
تعليقات سطر واحد:يبدأ تعليق سطر واحد من Python برمز علامة التجزئة بدون مسافات بيضاء (#) ويستمر حتى نهاية السطر. إذا تجاوز التعليق سطرًا واحدًا ، فضع علامة تصنيف في السطر التالي وتابع التعليق. أثبتت تعليقات Python أحادية السطر أنها مفيدة في توفير تفسيرات قصيرة للمتغيرات وإعلانات الوظائف والتعبيرات. راجع مقتطف الشفرة التالي الذي يوضح تعليق سطر واحد:
الرمز 1: 
 


# This is a comment
# Print “GeeksforGeeks !” to console
print("GeeksforGeeks")
الكود 2: 
 


a, b = 1, 3 # Declaring two integers
sum = a + b # adding two integers
print(sum) # displaying the output
سلسلة متعددة الأسطر كتعليق: تعليق Python متعدد الأسطر هو جزء من نص محاط بمحدد ("") في نهاية كل تعليق. مرة أخرى يجب ألا يكون هناك مسافة بيضاء بين المحدد (""). تكون مفيدة عندما لا يتناسب نص التعليق مع سطر واحد ؛ لذلك تحتاج إلى أن تمتد عبر الخطوط. تعمل التعليقات أو الفقرات متعددة الأسطر كوثائق للآخرين الذين يقرؤون التعليمات البرمجية الخاصة بك. راجع مقتطف الشفرة التالي الذي يوضح التعليق متعدد الأسطر:
الرمز 1: 
 


"""
This would be a multiline comment in Python that
spans several lines and describes geeksforgeeks.
A Computer Science portal for geeks. It contains
well written, well thought
and well-explained computer science
and programming articles,
quizzes and more.
…
"""
print("GeeksForGeeks")
الكود 2: 
 


'''This article on geeksforgeeks gives you a
perfect example of
multi-line comments'''
 
print("GeeksForGeeks")
