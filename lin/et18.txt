
بايثون للحلقات
مستوى الصعوبة: سهل
آخر تحديث: 25 أغسطس 2021
يتم استخدام Python For loop لاجتياز تسلسلي ، أي يتم استخدامه للتكرار على سلسلة متكررة مثل سلسلة ، أو tuple ، أو قائمة ، وما إلى ذلك. وهي تندرج تحت فئة التكرار المحدد . التكرارات المحددة تعني أن عدد التكرارات محدد بشكل صريح مقدمًا. في Python ، لا يوجد نمط C للحلقة ، على سبيل المثال ، لـ (i = 0 ؛ i <n ؛ i ++). هناك حلقة "for in" التي تشبه كل حلقة في اللغات الأخرى. دعونا نتعلم كيفية استخدام ل in loop لعمليات الاجتياز المتسلسلة. 

ملاحظة: في Python ، تنفذ for loops فقط التكرار المستند إلى المجموعة.

بناء الجملة:

لـ var in iterable:
    # صياغات
مخطط انسيابي لحلقة for
بايثون فور لوب

هنا المتكرر عبارة عن مجموعة من الكائنات مثل القوائم ، المجموعات. يتم تنفيذ العبارات ذات المسافة البادئة داخل حلقات for مرة واحدة لكل عنصر في تكرارات. يأخذ المتغير var قيمة العنصر التالي في كل مرة خلال الحلقة.

مثال:  Python For Loop باستخدام List ، Dictionary ، String

# Python program to illustrate
# Iterating over a list
print("List Iteration")
l = ["geeks", "for", "geeks"]
for i in l:
    print(i)
 
# Iterating over a tuple (immutable)
print("\nTuple Iteration")
t = ("geeks", "for", "geeks")
for i in t:
    print(i)
 
# Iterating over a String
print("\nString Iteration")
s = "Geeks"
for i in s:
    print(i)
 
# Iterating over dictionary
print("\nDictionary Iteration")
d = dict()
d['xyz'] = 123
d['abc'] = 345
for i in d:
    print("% s % d" % (i, d[i]))
انتاج: 

قائمة التكرار
المهوسون
ل
المهوسون

التكرار
المهوسون
ل
المهوسون

سلسلة التكرار
جي
ه
ه
ك
س

تكرار القاموس
س ص 123
اي بي سي 345
بيانات التحكم في الحلقة
تغير عبارات التحكم في الحلقة التنفيذ من تسلسله الطبيعي. عندما يترك التنفيذ نطاقًا ، يتم إتلاف جميع الكائنات التلقائية التي تم إنشاؤها في هذا النطاق. تدعم Python عبارات التحكم التالية.

متابعة البيان
يعيد بيان متابعة بايثون عنصر التحكم إلى بداية الحلقة.

مثال: Python for Loop with Continue Statement

# Prints all letters except 'e' and 's'
for letter in 'geeksforgeeks':
    if letter == 'e' or letter == 's':
        continue
    print('Current Letter :', letter)
انتاج: 

الرسالة الحالية: g
الرسالة الحالية: k
الرسالة الحالية: f
الرسالة الحالية: o
الرسالة الحالية: r
الرسالة الحالية: g
الرسالة الحالية: k
بيان كسر
بيان كسر بايثون يخرج السيطرة عن الحلقة.

مثال: Python For Loop with Break Statement

for letter in 'geeksforgeeks':
 
    # break the loop as soon it sees 'e'
    # or 's'
    if letter == 'e' or letter == 's':
        break
 
print('Current Letter :', letter)
انتاج: 

الرسالة الحالية: هـ
بيان التمرير
عبارة المرور لكتابة حلقات فارغة. يستخدم Pass أيضًا لبيانات التحكم والوظائف والفئات الفارغة.

مثال: Python For Loop with Pass Statement

# An empty loop
for letter in 'geeksforgeeks':
    pass
print('Last Letter :', letter)
انتاج: 

الحرف الأخير: s
نطاق () وظيفة
Python range () هي وظيفة مضمنة تُستخدم عندما يحتاج المستخدم إلى تنفيذ إجراء لعدد معين من المرات. range () في Python (3.x) هو مجرد نسخة أعيدت تسميتها من وظيفة تسمى xrange () في Python (2.x). يتم استخدام الدالة range () لتوليد سلسلة من الأرقام. اعتمادًا على عدد الوسائط التي يقوم المستخدم بتمريرها إلى الوظيفة ، يمكن للمستخدم تحديد المكان الذي ستبدأ فيه سلسلة الأرقام هذه ونهايتها بالإضافة إلى حجم الاختلاف بين رقم واحد والتالي. يستغرق النطاق () ثلاث وسائط بشكل أساسي. 

البدء: عدد صحيح يبدأ منه إرجاع تسلسل الأعداد الصحيحة
stop: عدد صحيح يتم إرجاع تسلسل الأعداد الصحيحة قبله. 
نطاق الأعداد الصحيحة ينتهي عند التوقف - 1.
الخطوة: قيمة عدد صحيح تحدد الزيادة بين كل عدد صحيح في التسلسل 
مثال: Python for loop مع دالة النطاق

# Python Program to
# show range() basics
 
# printing a number
for i in range(10):
    print(i, end=" ")
print()
 
# using range for iteration
l = [10, 20, 30, 40]
for i in range(len(l)):
    print(l[i], end=" ")
print()
 
# performing sum of first 10 numbers
sum = 0
for i in range(1, 10):
    sum = sum + i
print("Sum of first 10 numbers :", sum)
انتاج |
0 1 2 3 4 5 6 7 8 9
10 20 30 40
مجموع أول 10 أعداد: 45
Python for loop مع else
في معظم لغات البرمجة (C / C ++ ، Java ، إلخ) ، تم تقييد استخدام عبارات else بعبارات if الشرطية. لكن Python تسمح لنا أيضًا باستخدام شرط else مع حلقات for. 

ملاحظة: يتم تنفيذ كتلة else بعد for / while مباشرةً عندما لا يتم إنهاء الحلقة بواسطة تعليمة break 


# Python program to demonstrate
# for-else loop
 
for i in range(1, 4):
    print(i)
else:  # Executed because no break in for
    print("No Break\n")
 
for i in range(1, 4):
    print(i)
    break
else:  # Not executed as there is a break
    print("No Break")
انتاج: 

1
2
3
بدون استراحة



<<<<<<<<<<<<<<<<<<<<<
بايثون أثناء التكرار
مستوى الصعوبة: سهل
آخر تحديث: 25 أغسطس 2021
يتم استخدام Python while Loop لتنفيذ كتلة من العبارات بشكل متكرر حتى يتم استيفاء شرط معين. وعندما يصبح الشرط خاطئًا ، يتم تنفيذ السطر بعد الحلقة في البرنامج مباشرة. بينما تندرج الحلقة تحت فئة التكرار غير المحدود . التكرار إلى أجل غير مسمى يعني أن عدد مرات تنفيذ الحلقة لم يتم تحديده بشكل صريح مسبقًا. 

بناء الجملة: 

بينما التعبير:
    صياغات)
تمثل العبارات جميع العبارات التي تم تحديد مسافات بادئة لها بنفس عدد مسافات الأحرف بعد اعتبار بنية البرمجة جزءًا من كتلة واحدة من التعليمات البرمجية. تستخدم Python المسافة البادئة كطريقة لتجميع العبارات. عند تنفيذ حلقة while ، يتم تقييم expr أولاً في سياق منطقي وإذا كان صحيحًا ، يتم تنفيذ جسم الحلقة. ثم يتم فحص expr مرة أخرى ، إذا كان لا يزال صحيحًا ، فسيتم تنفيذ الجسم مرة أخرى ويستمر هذا حتى يصبح التعبير خطأ.

مخطط انسيابي أثناء التكرار: 
الثعبان أثناء التكرار

مثال 1: Python while Loop

# Python program to illustrate
# while loop
count = 0
while (count < 3):
    count = count + 1
    print("Hello Geek")
انتاج |
مرحبا المهوس
مرحبا المهوس
مرحبا المهوس
في المثال أعلاه ، سيكون شرط while صحيحًا طالما أن متغير العداد (العدد) أقل من 3. 

مثال 2: Python while loop with list

# checks if list still
# contains any element
a = [1, 2, 3, 4]
 
while a:
    print(a.pop())
انتاج |
4
3
2
1
في المثال أعلاه ، قمنا بتشغيل حلقة while loop على قائمة سيتم تشغيلها حتى يوجد عنصر موجود في القائمة.

بيان واحد أثناء الحظر
تمامًا مثل كتلة if ، إذا كانت الكتلة while تتكون من عبارة واحدة ، فيمكننا إعلان الحلقة بأكملها في سطر واحد. إذا كانت هناك عبارات متعددة في الكتلة التي تشكل جسم الحلقة ، فيمكن فصلها بفواصل منقوطة (؛). 


# Python program to illustrate
# Single statement while block
count = 0
while (count < 5): count += 1; print("Hello Geek")
انتاج: 

مرحبا المهوس
مرحبا المهوس
مرحبا المهوس
مرحبا المهوس
مرحبا المهوس
بيانات التحكم في الحلقة
تغير عبارات التحكم في الحلقة التنفيذ من تسلسله الطبيعي. عندما يترك التنفيذ نطاقًا ، يتم إتلاف جميع الكائنات التلقائية التي تم إنشاؤها في هذا النطاق. تدعم Python عبارات التحكم التالية.

متابعة البيان
بيان متابعة بايثون يعيد عنصر التحكم إلى بداية الحلقة.

مثال: Python while loop مع استمرار تعليمة

# Prints all letters except 'e' and 's'
i = 0
a = 'geeksforgeeks'
 
while i < len(a):
    if a[i] == 'e' or a[i] == 's':
        i += 1
        continue
         
    print('Current Letter :', a[i])
    i += 1
انتاج: 

الرسالة الحالية: g
الرسالة الحالية: k
الرسالة الحالية: f
الرسالة الحالية: o
الرسالة الحالية: r
الرسالة الحالية: g
الرسالة الحالية: k
بيان كسر
بيان كسر بايثون يخرج السيطرة عن الحلقة.

مثال: Python while loop مع تعليمة break

# break the loop as soon it sees 'e'
# or 's'
i = 0
a = 'geeksforgeeks'
 
while i < len(a):
    if a[i] == 'e' or a[i] == 's':
        i += 1
        break
         
    print('Current Letter :', a[i])
    i += 1
انتاج: 

الرسالة الحالية: g
بيان التمرير
عبارة Python pass لكتابة حلقات فارغة. يستخدم Pass أيضًا لبيانات التحكم والوظائف والفئات الفارغة.

مثال: Python while loop مع تمرير تعليمة

# An empty loop
a = 'geeksforgeeks'
i = 0
 
while i < len(a):
    i += 1
    pass
   
print('Value of i :', i)
انتاج: 

قيمة أنا: 13
بينما حلقة مع آخر
كما تمت مناقشته أعلاه ، بينما تقوم الحلقة بتنفيذ الكتلة حتى يتم استيفاء الشرط. عندما يصبح الشرط خطأ ، يتم تنفيذ العبارة مباشرة بعد الحلقة. يتم تنفيذ جملة else فقط عندما يصبح شرط while الخاص بك خاطئًا. إذا خرجت من الحلقة ، أو إذا ظهر استثناء ، فلن يتم تنفيذه.

ملاحظة: يتم تنفيذ كتلة else بعد for / while مباشرةً عندما لا يتم إنهاء الحلقة بواسطة تعليمة break. 


# Python program to demonstrate
# while-else loop
 
i = 0
while i < 4:
    i += 1
    print(i)
else:  # Executed because no break in for
    print("No Break\n")
 
i = 0
while i < 4:
    i += 1
    print(i)
    break
else:  # Not executed as there is a break
    print("No Break")
انتاج: 

1
2
3
4
بدون استراحة

1
بيان خاضع للرقابة
في هذا ، لا نستخدم أي متغير مضاد لأننا لا نعرف عدد مرات تنفيذ الحلقة. هنا يقرر المستخدم كم مرة يريد تنفيذ الحلقة. لهذا ، نستخدم قيمة الحارس. قيمة الحارس هي القيمة التي تُستخدم لإنهاء حلقة عندما يدخلها المستخدم ، وعمومًا ، تكون قيمة الحارس هي -1.

مثال: Python while loop بإدخال المستخدم
a = int(input('Enter a number (-1 to quit): '))
 
while a != -1:
    a = int(input('Enter a number (-1 to quit): '))
انتاج:



تفسير:

أولاً ، يطلب من المستخدم إدخال رقم. إذا قام المستخدم بإدخال -1 فلن يتم تنفيذ الحلقة
أدخل المستخدم 6 وينفذ جسم الحلقة ثم اطلب الإدخال مرة أخرى
هنا يمكن للمستخدم إدخال عدة مرات حتى يدخل -1 لإيقاف الحلقة
يمكن للمستخدم أن يقرر عدد المرات التي يريد فيها إدخال المدخلات
