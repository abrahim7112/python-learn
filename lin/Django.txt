
دروس جانغو
مستوى الصعوبة: سهل
آخر تحديث: 26 فبراير 2020
Django هو إطار عمل ويب مستند إلى Python يسمح لك بإنشاء تطبيقات ويب فعالة بسرعة. يطلق عليه أيضًا إطار عمل مضمّن للبطاريات لأن Django يوفر ميزات مدمجة لكل شيء بما في ذلك واجهة إدارة Django وقاعدة البيانات الافتراضية - SQLlite3 وما إلى ذلك. عند إنشاء موقع ويب ، فأنت بحاجة دائمًا إلى مجموعة مماثلة من المكونات: طريقة للتعامل مع المستخدم المصادقة (التسجيل ، تسجيل الدخول ، تسجيل الخروج) ، لوحة إدارة لموقع الويب الخاص بك ، النماذج ، طريقة لتحميل الملفات ، إلخ. يمنحك Django مكونات جاهزة للاستخدام وهذا أيضًا للتطوير السريع.

django- تعليمي

لماذا إطار عمل Django؟
وثائق ممتازة وقابلية تطوير عالية.
مستخدمة من قبل أفضل الشركات متعددة الجنسيات والشركات ، مثل Instagram و Disqus و Spotify و Youtube و Bitbucket و Dropbox وما إلى ذلك ، والقائمة لا تنتهي أبدًا.
أسهل إطار للتعلم والتطور السريع والبطاريات متضمنة بالكامل.
السبب الأخير وليس الأخير لتعلم Django هو Python ، حيث تمتلك Python مكتبة ضخمة وميزات مثل Web Scrapping والتعلم الآلي ومعالجة الصور والحوسبة العلمية وما إلى ذلك. يمكن للمرء دمج كل هذا مع تطبيق الويب والقيام بالكثير والكثير من التقدم أمور.
المقالات الأخيرة عن Django !!

أساسيات جانغو
أساسيات جانغو
مقدمة وتركيب Django
متى تستخدم Django؟ مقارنة مع حزم التطوير الأخرى
هيكل مشروع Django MVT
كيفية إنشاء مشروع أساسي باستخدام MVT في Django؟
كيفية إنشاء تطبيق في Django؟
أشكال جانغو
أشكال جانغو
كيفية إنشاء نموذج باستخدام نماذج Django؟
تقديم نماذج HTML (GET & POST) في Django
حقول نموذج Django
الحاجيات المخصصة لحقل النموذج
بيانات النموذج الأولي - نماذج Django
ModelForm - إنشاء نموذج من النماذج
تقديم حقول النموذج يدويًا
أشكال جانغو
Django ModelFormSets
قوالب جانغو
قوالب جانغو
مرشحات القوالب
علامات القالب
المتغيرات
العوامل المنطقية
لحلقة
إذا - قوالب جانغو
وراثة النموذج
متفرقات
معالجة طلب أياكس في جانغو
مجموعات المستخدمين بأذونات مخصصة في Django
واجهة إدارة Django
تمديد وتخصيص django-allauth
Django - التعامل مع التحذيرات
إطار الجلسات باستخدام Django
Django اشترك وتسجيل الدخول مع تأكيد البريد الإلكتروني
وجهات نظر جانغو
وجهات نظر جانغو
وجهات النظر القائمة على الوظيفة
إنشاء عرض
عرض القائمة
عرض التفاصيل
عرض التحديث
حذف العرض
وجهات النظر العامة القائمة على الفئة جانغو
Createview
عرض القائمة
عرض التفاصيل
UpdateView
DeleteView
FormView
موديلات جانغو
موديلات جانغو
ORM - إدخال وتحديث وحذف البيانات
نموذج التطبيق الأساسي - عمليات الترحيل والترحيل
أنواع بيانات النموذج وقائمة الحقول
أضف الحقل slug داخل نموذج Django
الحقول الوسيطة في Django
تحميل الصور في Django
نموذج التقديم في واجهة إدارة Django
تغيير اسم عرض الكائن باستخدام وظيفة __str__ - نماذج Django
عمليات التحقق الميدانية المضمنة - نماذج Django
عمليات التحقق الميدانية المخصصة في نماذج Django
كيفية استخدام خيارات Django الميدانية؟
تجاوز طريقة الحفظ - نماذج Django
المشاريع
مصادقة Google وجلب رسائل البريد من البداية
ToDo webapp باستخدام Django
تطبيق أخبار جانغو
تطبيق الطقس باستخدام Django

>>>>>>>>>>>>>>>>>>>>
أساسيات جانغو
مستوى الصعوبة: سهل
آخر تحديث: 11 فبراير 2020
Django هو إطار عمل ويب مستند إلى Python يسمح لك بإنشاء تطبيق ويب سريعًا بدون كل مشكلات التثبيت أو التبعية التي ستجدها عادةً مع أطر العمل الأخرى.
عندما تقوم بإنشاء موقع ويب ، فأنت بحاجة دائمًا إلى مجموعة مماثلة من المكونات: طريقة للتعامل مع مصادقة المستخدم (التسجيل ، وتسجيل الدخول ، وتسجيل الخروج) ، ولوحة إدارة لموقع الويب الخاص بك ، والنماذج ، وطريقة لتحميل الملفات ، إلخ. يمنحك Django مكونات جاهزة للاستخدام.

أساسيات django

لماذا Django؟
يعد Django إطارًا سريعًا لتطوير الويب يمكن استخدامه لتطوير تطبيقات الويب الكاملة في فترة زمنية قصيرة.
من السهل جدًا تبديل قاعدة البيانات في إطار عمل Django.
يحتوي على واجهة إدارة مدمجة تسهل التعامل معها.
Django هو إطار عمل كامل الوظائف ولا يتطلب أي شيء آخر.
لديها الآلاف من الحزم الإضافية المتاحة.
إنه قابل للتطوير للغاية. لمزيد من الزيارة متى تستخدم Django؟ مقارنة مع حزم التنمية الأخرى؟
عمارة جانغو
يعتمد Django على معمارية MVT (نموذج عرض نموذج). MVT هو نمط تصميم برمجي لتطوير تطبيق ويب.

يتكون هيكل MVT من الأجزاء الثلاثة التالية -

النموذج : سيعمل النموذج كواجهة لبياناتك. إنها مسؤولة عن الحفاظ على البيانات. إنها بنية البيانات المنطقية وراء التطبيق بأكمله ويتم تمثيلها بواسطة قاعدة بيانات (قواعد البيانات العلائقية عمومًا مثل MySql و Postgres).

طريقة العرض : العرض هو واجهة المستخدم - ما تراه في متصفحك عند عرض موقع ويب. يتم تمثيله بواسطة ملفات HTML / CSS / Javascript و Jinja.

القالب : يتكون القالب من أجزاء ثابتة من إخراج HTML المطلوب بالإضافة إلى بعض القواعد الخاصة التي تصف كيفية إدراج المحتوى الديناميكي.

للتحقق من المزيد حول فن العمارة في Django ، قم بزيارة Django Project MVT Structure

تركيب Django
قم بتثبيت python3 إذا لم يكن مثبتًا في نظامك (وفقًا لتكوين نظامك ونظام التشغيل) من هنا . حاول تنزيل أحدث إصدار من python وهو python3.6.4 هذه المرة.
ملاحظة - تثبيت Django في Linux و Mac مشابه ، وهنا أعرضه في windows لنظامي Linux و mac ، فقط افتح المحطة الطرفية بدلاً من موجه الأوامر وانتقل عبر الأوامر التالية.

قم بتثبيت pip- افتح موجه الأوامر وأدخل الأمر التالي-
تثبيت python -m pip -U pip
تثبيت بيئة افتراضية - أدخل الأمر التالي في cmd-
نقطة تثبيت virtualenv
تعيين البيئة الافتراضية - سيسمح لك إعداد البيئة الافتراضية بتعديل التبعية التي لا يسمح بها نظامك بشكل عام.
اتبع هذه الخطوات لإعداد بيئة افتراضية-
قم بإنشاء بيئة افتراضية من خلال إعطاء هذا الأمر في cmd-
موقع env_site للغة الافتراضية
قم بتغيير الدليل إلى env_site عن طريق هذا الأمر-
cd env_site
انتقل إلى دليل البرنامج النصي داخل env_site وقم بتنشيط البيئة الافتراضية-
برنامج نصي على القرص المضغوط
تفعيل
قم بتثبيت Django- قم بتثبيت django بإعطاء الأمر التالي-
نقطة تثبيت django


خلق المشروع
دعنا نتحقق من كيفية إنشاء مشروع أساسي باستخدام Django بعد تثبيته على جهاز الكمبيوتر الخاص بك.

لبدء مشروع Django على جهاز الكمبيوتر الخاص بك ، افتح Terminal وأدخل الأمر التالي
django-admin startproject projectName
سيتم إنشاء مجلد جديد باسم projectName. للدخول في المشروع باستخدام Terminal أدخل الأمر
cd projectName
الآن تشغيل ،

Python manager.py runserver
الآن قم بزيارة http: // localhost: 8000 / ،
مشروع أساسيات django

إنشاء التطبيق
تشتهر Django بهيكل التطبيق الفريد والمدار بالكامل. لكل وظيفة ، يمكن إنشاء تطبيق كوحدة مستقلة تمامًا. ستطلعك هذه المقالة على كيفية إنشاء تطبيق أساسي وإضافة وظائف باستخدام هذا التطبيق.

لإنشاء تطبيق أساسي في مشروع Django الخاص بك ، عليك الذهاب إلى الدليل الذي يحتوي على manage.pyومن هناك أدخل الأمر:
python manager.py startapp projectApp
الآن يمكنك رؤية هيكل الدليل الخاص بك على النحو التالي:



للنظر في التطبيق في مشروعك ، تحتاج إلى تحديد اسم مشروعك في قائمة INSTALLED_APPS كما يلي في settings.py:
# Application definition
  
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'projectApp'
]
لذلك ، أنشأنا تطبيقًا أخيرًا ولكن لعرض التطبيق باستخدام عناوين url ، نحتاج إلى تضمين التطبيق في مشروعنا الرئيسي بحيث يمكن عرض عناوين url المعاد توجيهها إلى هذا التطبيق. دعونا نستكشفها.
انتقل إلى projectName-> projectName -> urls.pyالرمز أدناه وأضفه في العنوان
من استيراد django.urls
الآن في قائمة أنماط عناوين URL ، تحتاج إلى تحديد اسم التطبيق لتضمين عناوين URL للتطبيق الخاص بك. هنا هو رمز لها -

from django.contrib import admin
from django.urls import path, include
  
urlpatterns = [
    path('admin/', admin.site.urls),
    # Enter the app name in following syntax for this to work
    path('', include("projectApp.urls")),
]
يمكنك الآن استخدام نموذج MVT الافتراضي لإنشاء عناوين URL ونماذج وطرق عرض وما إلى ذلك في تطبيقك وسيتم تضمينها تلقائيًا في مشروعك الرئيسي.
الميزة الرئيسية لتطبيقات Django هي الاستقلال ، حيث يعمل كل تطبيق كوحدة مستقلة في دعم المشروع الرئيسي. لمعرفة المزيد عن التطبيقات في Django ، قم بزيارة كيفية إنشاء تطبيق في Django؟

المزيد من الأعمال بمشاركة "جانغو" -
نماذج
Django نماذج Django نماذج
طرق
عرض Django
 
>>>>>>>>>>>>>>>>>>>>

مقدمة وتركيب Django
مستوى الصعوبة: سهل
آخر تحديث: 20 أكتوبر 2021
ما هو Django؟
Django هو إطار عمل ويب مستند إلى Python يسمح لك بإنشاء تطبيق ويب سريعًا بدون كل مشكلات التثبيت أو التبعية التي ستجدها عادةً مع أطر العمل الأخرى.
عندما تقوم بإنشاء موقع ويب ، فأنت بحاجة دائمًا إلى مجموعة مماثلة من المكونات: طريقة للتعامل مع مصادقة المستخدم (التسجيل ، وتسجيل الدخول ، وتسجيل الخروج) ، ولوحة إدارة لموقع الويب الخاص بك ، والنماذج ، وطريقة لتحميل الملفات ، إلخ. يمنحك Django مكونات جاهزة للاستخدام.

لماذا Django؟
من السهل جدًا تبديل قاعدة البيانات في إطار عمل Django.
يحتوي على واجهة إدارة مدمجة تسهل التعامل معها.
Django هو إطار عمل كامل الوظائف ولا يتطلب أي شيء آخر.
لديها الآلاف من الحزم الإضافية المتاحة.
إنه قابل للتطوير للغاية.
شعبية جانغو
يتم استخدام Django في العديد من المواقع الشهيرة مثل: Disqus و Instagram و Knight Foundation و MacArthur Foundation و Mozilla و National Geographic إلخ. وهناك أكثر من 5 آلاف موقع على الإنترنت تعتمد على إطار عمل Django. (المصدر)
تقوم مواقع مثل Hot Frameworks بتقييم شعبية إطار العمل من خلال حساب عدد مشاريع GitHub وأسئلة StackOverflow لكل منصة ، وهنا يحتل Django المركز السادس. غالبًا ما تشير أطر عمل الويب إلى نفسها على أنها "ذات رأي" أو "لا تتبنى رأيها" بناءً على آراء حول الطريقة الصحيحة للتعامل مع أي مهمة معينة. جانغو لديه رأي إلى حد ما ، ومن ثم يسلم في كلا العالمين (عنيد وغير عنيد).

ميزات Django
يمكن لتعدد استخدامات Django
Django بناء أي نوع من مواقع الويب تقريبًا. يمكنه أيضًا العمل مع أي إطار عمل من جانب العميل ويمكنه تقديم محتوى بأي تنسيق مثل HTML و JSON و XML وما إلى ذلك. بعض المواقع التي يمكن إنشاؤها باستخدام Django هي مواقع الويكي والشبكات الاجتماعية والمواقع الجديدة وما إلى ذلك.

الأمان
نظرًا لأن إطار عمل Django مصمم لجعل تطوير الويب أمرًا سهلاً ، فقد تم تصميمه بطريقة تجعله يقوم تلقائيًا بالأشياء الصحيحة لحماية الموقع. على سبيل المثال ، في إطار عمل Django بدلاً من وضع كلمة مرور في ملفات تعريف الارتباط ، يتم تخزين كلمة المرور المجزأة فيه بحيث لا يمكن للمتسللين جلبها بسهولة.

قابلية التوسع
ليس لعقد ويب Django حالة مخزنة ، فهي تتوسع أفقيًا - فقط قم بتشغيل المزيد منها عندما تحتاج إليها. القدرة على القيام بذلك هو جوهر قابلية التوسع الجيدة. Instagram و Disqus هما منتجان يستندان إلى Django ولهما ملايين المستخدمين النشطين ، ويُؤخذ هذا كمثال على قابلية تطوير Django.

قابلية النقل
تتم كتابة جميع أكواد إطار عمل Django بلغة Python ، والتي تعمل على العديد من الأنظمة الأساسية. مما يؤدي إلى تشغيل Django أيضًا في العديد من الأنظمة الأساسية مثل Linux و Windows و Mac OS.

تركيب Django

قم بتثبيت python3 إذا لم يكن مثبتًا في نظامك (وفقًا لتكوين نظامك ونظام التشغيل) من هنا . حاول تنزيل أحدث إصدار من python وهو python3.6.4 هذه المرة.
ملاحظة - تثبيت Django في Linux و Mac مشابه ، وهنا أعرضه في windows لنظامي Linux و mac ، فقط افتح المحطة الطرفية بدلاً من موجه الأوامر وانتقل عبر الأوامر التالية.

قم بتثبيت pip- افتح موجه الأوامر وأدخل الأمر التالي-
تثبيت python -m pip -U pip
مقدمة django

تثبيت بيئة افتراضية - أدخل الأمر التالي في cmd-
نقطة تثبيت virtualenv
django- أعرض

تعيين البيئة الافتراضية - سيسمح لك إعداد البيئة الافتراضية بتعديل التبعية التي لا يسمح بها نظامك بشكل عام.
اتبع هذه الخطوات لإعداد بيئة افتراضية-
قم بإنشاء بيئة افتراضية من خلال إعطاء هذا الأمر في cmd-
موقع env_site للغة الافتراضية
تركيب دجانغو

قم بتغيير الدليل إلى env_site عن طريق هذا الأمر-
cd env_site
تثبيت django

انتقل إلى دليل البرامج النصية داخل env_site وقم بتنشيط البيئة الافتراضية-
مخطوطات القرص المضغوط
تفعيل
تركيب django مقدمة

قم بتثبيت Django- قم بتثبيت django بإعطاء الأمر التالي-
نقطة تثبيت django
أساسيات django

العودة إلى دليل env_site-
قرص مضغوط ..
دجانغو

ابدأ مشروعًا باتباع الأمر-
بدء مشروع django-admin geeks_site
django-مقدمة-تثبيت

قم بتغيير الدليل إلى geeks_site
cd geeks_site
مشروع مقدمة django

ابدأ الخادم - ابدأ الخادم بكتابة الأمر التالي في cmd-
بيثون MANAGER.py runserver


للتحقق مما إذا كان الخادم يعمل أم لا ، انتقل إلى متصفح الويب وأدخل http://127.0.0.1:8000/ كعنوان url.


فوائد Django Architecture -

التطور السريع
المتباعدة
سهولة التعديل
عيوب هندسة MVC -

الكثير من التحميل على نموذج المكون
التعقيد التنموي مرتفع
عنصران يتحكمان في طريقة العرض
python -m pip install -U pip
pip install virtualenv
virtualenv env_site
cd env_site
cd Scripts
activate
pip install django
cd ..
django-admin startproject geeks_site
cd geeks_site
python manage.py runserver

>>>>>>>>>>>>>>>>>>>>
هيكل مشروع Django MVT
مستوى الصعوبة: سهل
آخر تحديث: 16 أغسطس 2021
يعتمد Django على معمارية MVT (نموذج عرض نموذج) . MVT هو نمط تصميم برمجي لتطوير تطبيق ويب. 

يتكون هيكل MVT من الأجزاء الثلاثة التالية - 

النموذج: سيعمل النموذج كواجهة لبياناتك. إنها مسؤولة عن الحفاظ على البيانات. إنها بنية البيانات المنطقية وراء التطبيق بأكمله ويتم تمثيلها بواسطة قاعدة بيانات (قواعد البيانات العلائقية عمومًا مثل MySql و Postgres). للتحقق من المزيد ، قم بزيارة - Django Models 

طريقة العرض: العرض هو واجهة المستخدم - ما تراه في متصفحك عند عرض موقع ويب. يتم تمثيله بواسطة ملفات HTML / CSS / Javascript و Jinja. للتحقق من المزيد ، قم بزيارة - Django Views . 

القالب: يتكون القالب من أجزاء ثابتة من إخراج HTML المطلوب بالإضافة إلى بعض القواعد الخاصة التي تصف كيفية إدراج المحتوى الديناميكي. للتحقق من المزيد ، قم بزيارة - قوالب Django 

 



 هيكل المشروع:
يحتوي مشروع Django عند تهيئته على الملفات الأساسية افتراضيًا مثل manager.py و view.py وما إلى ذلك. تكفي بنية المشروع البسيطة لإنشاء تطبيق من صفحة واحدة. فيما يلي الملفات الرئيسية وشروحها. داخل مجلد geeks_site (مجلد المشروع) ، ستكون هناك الملفات التالية- 
 



management.py- يُستخدم هذا الملف للتفاعل مع مشروعك عبر سطر الأوامر (ابدأ الخادم ، قم بمزامنة قاعدة البيانات ... إلخ). للحصول على القائمة الكاملة للأوامر التي يمكن تنفيذها عن طريق إدارة. اكتب هذا الرمز في نافذة الأوامر- 

$ python manage.py help

 المجلد (geeks_site) - يحتوي هذا المجلد على جميع حزم مشروعك. في البداية ، يحتوي على أربعة ملفات - 



_init_.py - إنها حزمة بايثون. يتم استدعاؤه عند استيراد الحزمة أو الوحدة النمطية في الحزمة. نستخدم هذا عادةً لتنفيذ كود تهيئة الحزمة ، على سبيل المثال لتهيئة بيانات مستوى الحزمة.
settings.py - كما يشير الاسم ، فإنه يحتوي على جميع إعدادات موقع الويب. في هذا الملف ، نسجل أي تطبيقات نقوم بإنشائها ، وموقع ملفاتنا الثابتة ، وتفاصيل تكوين قاعدة البيانات ، وما إلى ذلك.
urls.py - في هذا الملف ، نقوم بتخزين جميع روابط المشروع والوظائف المراد الاتصال بها.
wsgi.py - يُستخدم هذا الملف في نشر المشروع في WSGI. يتم استخدامه لمساعدة تطبيق Django على التواصل مع خادم الويب.


>>>>>>>>>>>>>>>>>>>>

كيفية إنشاء مشروع أساسي باستخدام MVT في Django؟
مستوى الصعوبة: سهل
آخر تحديث: 16 أغسطس 2021
المتطلبات المسبقة - هيكل مشروع Django MVT
 

بافتراض أنك قمت بالاطلاع على المقالة السابقة. تركز هذه المقالة على إنشاء مشروع أساسي لتقديم قالب باستخدام هندسة MVT. سنستخدم MVT (النماذج ، المشاهدات ، القوالب) لتقديم البيانات إلى خادم محلي.
 

قم بإنشاء مشروع أساسي: 

لبدء مشروع Django على جهاز الكمبيوتر الخاص بك ، افتح Terminal وأدخل الأمر التالي 
django-admin startproject projectName
سيتم إنشاء مجلد جديد باسم projectName . للدخول في المشروع باستخدام المحطة أدخل الأمر 
cd projectName
قم بإنشاء ملف جديد views.py داخل مجلد المشروع حيث يتم تخزين settings.py و urls.py والملفات الأخرى وحفظ الكود التالي فيه- 
# HttpResponse is used to
# pass the information
# back to view
from django.http import HttpResponse
 
# Defining a function which
# will receive request and
# perform task depending
# upon function definition
def hello_geek (request) :
 
    # This will return Hello Geeks
    # string as HttpResponse
    return HttpResponse("Hello Geeks")


افتح urls.py داخل مجلد المشروع (اسم المشروع) وأضف الإدخال الخاص بك- 
استيراد وظيفة hello_geek من ملف views.py. 
من projectName.views استيراد hello_geeks


إضافة إدخال في حقل عنوان url داخل أنماط عنوان url- 
المسار ('geek /' ، hello_geek) ، 


الآن لتشغيل الخادم ، اتبع هذه الخطوات- 
افتح موجه الأوامر وقم بتغيير الدليل إلى env_site بواسطة هذا الأمر- 
$ cd env_site
انتقل إلى دليل البرنامج النصي داخل env_site وقم بتنشيط البيئة الافتراضية- 
سيناريو $ cd
تفعيل $
ارجع إلى دليل env_site وانتقل إلى دليل المشروع- 
$ cd ..
$ cd geeks_site
ابدأ الخادم - ابدأ الخادم بكتابة الأمر التالي في cmd- 
$ python manager.py runserver
التحقق - افتح المتصفح واكتب عنوان url هذا- 
http://127.0.0.1:8000/geek/
>>>>>>>>>>>>>>>>>>>>
كيفية إنشاء تطبيق في Django؟
مستوى الصعوبة: أساسي
آخر تحديث: 30 كانون الثاني (يناير) 2022
المتطلبات المسبقة - كيفية إنشاء مشروع أساسي باستخدام MVT في Django؟

تشتهر Django بهيكل التطبيق الفريد والمدار بالكامل. لكل وظيفة ، يمكن إنشاء تطبيق كوحدة مستقلة تمامًا. ستطلعك هذه المقالة على كيفية إنشاء تطبيق أساسي وإضافة وظائف باستخدام هذا التطبيق.
على سبيل المثال ، إذا كنت تقوم بإنشاء مدونة ، فيجب إنشاء وحدات منفصلة للتعليقات ، والمنشورات ، وتسجيل الدخول / تسجيل الخروج ، وما إلى ذلك. في Django ، تُعرف هذه الوحدات باسم التطبيقات. هناك تطبيق مختلف لكل مهمة. 
 

فوائد استخدام تطبيقات Django -
تطبيقات Django قابلة لإعادة الاستخدام ، أي يمكن استخدام تطبيق Django مع عدة مشاريع.
لقد قمنا بربط أي مكونات مستقلة تقريبًا
يمكن للمطورين المتعددين العمل على مكونات مختلفة
التصحيح وتنظيم التعليمات البرمجية أمر سهل. يمتلك Django أداة ممتازة لتصحيح الأخطاء.
يحتوي على ميزات مدمجة مثل صفحات المسؤول وما إلى ذلك ، مما يقلل من جهد بناء نفس الشيء من stratch
التطبيقات المثبتة مسبقًا - 
يوفر Django بعض التطبيقات المثبتة مسبقًا للمستخدمين. لمشاهدة التطبيقات المثبتة مسبقًا ، انتقل إلى projectName -> projectName -> settings.py 
في ملف settings.py ، ستجد INSTALLED_APPS. التطبيقات المدرجة في INSTALLED_APPS مقدمة من Django لراحة المطور.
 



 

قم أيضًا بزيارة: Django ORM - إدخال وتحديث وحذف البيانات 

إنشاء تطبيق في Django:
دعونا نبدأ في بناء التطبيق. 

طريقة 1
لإنشاء تطبيق أساسي في مشروع Django ، يجب أن تذهب إلى الدليل الذي يحتوي على manager.py ومن هناك أدخل الأمر:
python manager.py startapp projectApp
 الطريقة الثانية
لإنشاء تطبيق أساسي في مشروع Django ، يجب أن تذهب إلى الدليل الذي يحتوي على manager.py ومن هناك أدخل الأمر:
django-admin startapp projectApp
الآن يمكنك رؤية هيكل الدليل الخاص بك على النحو التالي:
 



للنظر في التطبيق في مشروعك ، تحتاج إلى تحديد اسم مشروعك في قائمة INSTALLED_APPS كما يلي في settings.py:
# Application definition
 
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'projectApp'
]
لذلك ، أنشأنا تطبيقًا أخيرًا ولكن لعرض التطبيق باستخدام عناوين URL ، نحتاج إلى تضمين التطبيق في مشروعنا الرئيسي بحيث يمكن عرض عناوين URL المعاد توجيهها إلى هذا التطبيق. دعونا نستكشفها. 
انتقل إلى projectName-> projectName -> urls.py وأضف الكود أدناه في العنوان
كيفية إنشاء تطبيق في Django؟
مستوى الصعوبة: أساسي
آخر تحديث: 30 كانون الثاني (يناير) 2022
المتطلبات المسبقة - كيفية إنشاء مشروع أساسي باستخدام MVT في Django؟

تشتهر Django بهيكل التطبيق الفريد والمدار بالكامل. لكل وظيفة ، يمكن إنشاء تطبيق كوحدة مستقلة تمامًا. ستطلعك هذه المقالة على كيفية إنشاء تطبيق أساسي وإضافة وظائف باستخدام هذا التطبيق.
على سبيل المثال ، إذا كنت تقوم بإنشاء مدونة ، فيجب إنشاء وحدات منفصلة للتعليقات ، والمنشورات ، وتسجيل الدخول / تسجيل الخروج ، وما إلى ذلك. في Django ، تُعرف هذه الوحدات باسم التطبيقات. هناك تطبيق مختلف لكل مهمة. 
 

فوائد استخدام تطبيقات Django -
تطبيقات Django قابلة لإعادة الاستخدام ، أي يمكن استخدام تطبيق Django مع عدة مشاريع.
لقد قمنا بربط أي مكونات مستقلة تقريبًا
يمكن للمطورين المتعددين العمل على مكونات مختلفة
التصحيح وتنظيم التعليمات البرمجية أمر سهل. يمتلك Django أداة ممتازة لتصحيح الأخطاء.
يحتوي على ميزات مدمجة مثل صفحات المسؤول وما إلى ذلك ، مما يقلل من جهد بناء نفس الشيء من stratch
التطبيقات المثبتة مسبقًا - 
يوفر Django بعض التطبيقات المثبتة مسبقًا للمستخدمين. لمشاهدة التطبيقات المثبتة مسبقًا ، انتقل إلى projectName -> projectName -> settings.py 
في ملف settings.py ، ستجد INSTALLED_APPS. التطبيقات المدرجة في INSTALLED_APPS مقدمة من Django لراحة المطور.
 



 

قم أيضًا بزيارة: Django ORM - إدخال وتحديث وحذف البيانات 

الآن في قائمة أنماط عناوين URL ، تحتاج إلى تحديد اسم التطبيق لتضمين عناوين URL للتطبيق الخاص بك. هنا هو رمز لها -
from django.contrib import admin
from django.urls import path, include
 
urlpatterns = [
    path('admin/', admin.site.urls),
    # Enter the app name in following
    # syntax for this to work
    path('', include("projectApp.urls")),
]
يمكنك الآن استخدام نموذج MVT الافتراضي لإنشاء عناوين URL ونماذج وطرق عرض وما إلى ذلك في تطبيقك وسيتم تضمينها تلقائيًا في مشروعك الرئيسي.
الميزة الرئيسية لتطبيقات Django هي الاستقلال ، حيث يعمل كل تطبيق كوحدة مستقلة في دعم المشروع الرئيسي. 
from django.urls import include

الآن لن يصل urls.py في ملف المشروع إلى عنوان url للتطبيق.

لتشغيل تطبيق ويب Django بشكل صحيح ، يجب اتخاذ الإجراءات التالية: -

1. قم بإنشاء ملف في دليل التطبيقات يسمى urls.py

2. ضمّن الكود التالي:


from django.urls import path
#now import the views.py file into this code
from . import views
urlpatterns=[
  path('',views.index)
ستستدعي الكود أعلاه أو تستدعي الوظيفة المحددة في ملف views.py بحيث يمكن رؤيتها بشكل صحيح في متصفح الويب. من المفترض هنا أن موقع views.py يحتوي على الكود التالي: - 


from django.http import HttpResponse
 
 
def index(request):
  return HttpResponse("Hello Geeks")
بعد إضافة الكود أعلاه ، انتقل إلى ملف settings.py الموجود في دليل المشروع ، وقم بتغيير قيمة ROOT_URLCONF من "project.urls" إلى "app.urls"

من هذا:-



الى هذا:



3. وبعد ذلك يمكنك تشغيل الخادم (127.0.0.1:8000) وستحصل على الناتج المطلوب


>>>>>>>>>>>>>>>>>>>>
أشكال جانغو
مستوى الصعوبة: أساسي
آخر تحديث: ١٢ يناير ٢٠٢٢
عندما يقوم المرء بإنشاء فئة النموذج ، فإن الجزء الأكثر أهمية هو تحديد حقول النموذج. يحتوي كل حقل على منطق تحقق مخصص ، إلى جانب بعض الروابط الأخرى. تدور هذه المقالة حول مختلف المجالات التي يمكن للمرء استخدامها في نموذج جنبًا إلى جنب مع العديد من الميزات والتقنيات المتعلقة بنماذج Django. تُستخدم النماذج أساسًا لأخذ المدخلات من المستخدم بطريقة ما واستخدام تلك المعلومات للعمليات المنطقية في قواعد البيانات. على سبيل المثال ، تسجيل مستخدم بأخذ المدخلات مثل الاسم والبريد الإلكتروني وكلمة المرور وما إلى ذلك.

يقوم Django بتعيين الحقول المحددة في نماذج Django في حقول إدخال HTML. يعالج Django ثلاثة أجزاء متميزة من العمل المتضمن في النماذج:

تحضير البيانات وإعادة هيكلتها لتكون جاهزة للعرض
إنشاء نماذج HTML للبيانات
استلام ومعالجة النماذج والبيانات المقدمة من العميل
مخطط انسيابي -1

لاحظ أن جميع أنواع العمل الذي تقوم به نماذج Django يمكن إجراؤه باستخدام عناصر HTML المتقدمة ، لكن Django يجعل الأمر أسهل وأكثر كفاءة خاصةً جزء التحقق من الصحة. بمجرد الحصول على نماذج Django ، سوف تنسى نماذج HTML.

التركيب اللغوي:  تعمل حقول Django مثل Django Model Fields ولها بناء الجملة:

اسم الحقل = النماذج. نوع الحقل (** خيارات)
مثال:

from django import forms
 
# creating a form
class GeeksForm(forms.Form):
    title = forms.CharField()
    description = forms.CharField()
استخدام نماذج Django
لاستخدام نماذج Django ، يحتاج المرء أن يكون لديه مشروع وتطبيق يعمل فيه. بعد أن تبدأ تطبيقًا ، يمكنك إنشاء نموذج في app / forms.py. قبل البدء في استخدام نموذج ، دعنا نتحقق من كيفية بدء مشروع وتنفيذ نماذج Django.

راجع المقالات التالية للتحقق من كيفية إنشاء مشروع وتطبيق في Django. 

كيفية إنشاء مشروع أساسي باستخدام MVT في Django؟
كيفية إنشاء تطبيق في Django؟
إنشاء نموذج Django
إنشاء نموذج في Django مشابه تمامًا لإنشاء نموذج ، يحتاج المرء إلى تحديد الحقول الموجودة في النموذج والنوع. على سبيل المثال ، للإدخال ، قد يحتاج نموذج التسجيل إلى الاسم الأول (CharField) ورقم الملف (حقل صحيح) وما إلى ذلك. 

بناء الجملة: 

من نماذج الاستيراد django
        
فئة FormName (Forms.Form):
         # سيتم تعيين كل حقل كحقل إدخال في HTML
        field_name = Forms.Field (** خيارات)
لإنشاء نموذج ، في geeks / Forms.py أدخل الرمز ،

# import the standard Django Forms
# from built-in library
from django import forms
   
# creating a form 
class InputForm(forms.Form):
   
    first_name = forms.CharField(max_length = 200)
    last_name = forms.CharField(max_length = 200)
    roll_number = forms.IntegerField(
                     help_text = "Enter 6 digit roll number"
                     )
    password = forms.CharField(widget = forms.PasswordInput())
لمعرفة المزيد حول كيفية إنشاء نموذج باستخدام نماذج Django ، قم بزيارة كيفية إنشاء نموذج باستخدام نماذج Django؟ .

تقديم نماذج Django
تحتوي حقول نموذج Django على عدة طرق مضمنة لتسهيل عمل المطور ولكن في بعض الأحيان يحتاج المرء إلى تنفيذ الأشياء يدويًا لتخصيص واجهة المستخدم (UI). يأتي النموذج بثلاث طرق مضمنة يمكن استخدامها لتصيير حقول نموذج Django. 

سيعرضها {{form.as_table}} كخلايا جدول ملفوفة في علامات <tr>
{{form.as_p}} سيجعلها ملفوفة في علامات <p>
{{form.as_ul}} سيجعلها ملفوفة في <li> علامات
لتحويل هذا النموذج إلى طريقة عرض ، انتقل إلى views.py وأنشئ طريقة عرض home على النحو التالي. 

from django.shortcuts import render
from .forms import InputForm
 
# Create your views here.
def home_view(request):
    context ={}
    context['form']= InputForm()
    return render(request, "home.html", context)
من وجهة النظر ، يحتاج المرء فقط إلى إنشاء مثيل لفئة النموذج التي تم إنشاؤها أعلاه في Forms.py. الآن دعنا نعدل القوالب> home.html 

<form action = "" method = "post">
    {% csrf_token %}
    {{form }}
    <input type="submit" value=Submit">
</form>
الآن ، قم بزيارة http: // localhost: 8000 /

إنشاء شكل django

. 
للتحقق من كيفية استخدام البيانات التي تقدمها نماذج Django ، قم بزيارة Render Django Form Fields 

إنشاء نموذج Django من النماذج
Django ModelForm هي فئة تستخدم لتحويل النموذج مباشرة إلى نموذج Django. إذا كنت تقوم ببناء تطبيق يعتمد على قاعدة البيانات ، فمن المحتمل أن يكون لديك نماذج ترتبط بشكل وثيق بنماذج Django. الآن عندما يكون مشروعنا جاهزًا ، قم بإنشاء نموذج في geeks / Models.py ،

# import the standard Django Model
# from built-in library
from django.db import models
   
# declare a new model with a name "GeeksModel"
class GeeksModel(models.Model):
        # fields of the model
    title = models.CharField(max_length = 200)
    description = models.TextField()
    last_modified = models.DateTimeField(auto_now_add = True)
    img = models.ImageField(upload_to = "images/")
   
        # renames the instances of the model
        # with their title name
    def __str__(self):
        return self.title
لإنشاء نموذج مباشرة لهذا النموذج ، تعمق في geeks / Forms.py وأدخل الكود التالي:

# import form class from django
from django import forms
  
# import GeeksModel from models.py
from .models import GeeksModel
  
# create a ModelForm
class GeeksForm(forms.ModelForm):
    # specify the name of model to use
    class Meta:
        model = GeeksModel
        fields = "__all__"
الآن قم بزيارة http://127.0.0.1:8000/ ، 

المزيد عن نماذج Django:
تقديم نماذج HTML (GET & POST) في Django
{{form.as_p}} - تصيير نماذج Django على هيئة فقرة
{{form.as_table}} - عرض نماذج Django كجدول
{{form.as_ul}} - تصيير نماذج Django على شكل قائمة
الحاجيات المخصصة لمجال شكل Django
بايثون | التحقق من صحة النموذج باستخدام Django
؛ Django ModelForm - إنشاء نموذج من النماذج
تقديم حقول نموذج Django يدويًا
أشكال جانغو
Django ModelFormSets
أنواع بيانات النموذج الأساسية وقائمة الحقول
أهم جزء في النموذج والجزء الوحيد المطلوب هو قائمة الحقول التي يحددها. يتم تحديد الحقول بواسطة سمات الفئة. فيما يلي قائمة بجميع أنواع حقول النموذج المستخدمة في Django

اسم	فصل	إدخال HTML
منطقية	فئة BooleanField (** kwargs)	خانة الاختيار
CharField	فئة CharField (** kwargs)	إدخال النص
تشويسفيلد	فئة ChoiceField (** kwargs)	يختار
TypedChoiceField	فئة TypedChoiceField (** kwargs)	يختار
DateField	فئة DateField (** kwargs)	تاريخ الإدخال
DateTimeField	فئة DateTimeField (** kwargs)	DateTimeInput
المجال العشري	فئة DecimalField (** kwargs)	NumberInput عندما يكون Field.localize خطأ ، وإلا TextInput
المدة	فئة DurationField (** kwargs)	إدخال النص
حقل البريد الإلكتروني	فئة EmailField (** kwargs	إدخال البريد الإلكتروني
FileField	فئة FileField (** kwargs)	ClearableFileInput
FilePathField	فئة FilePathField (** kwargs)	يختار
فلوتفيلد	فئة FloatField (** kwargs)	NumberInput عندما يكون Field.localize خطأ ، وإلا TextInput
حقل الصورة	فئة ImageField (** kwargs)	ClearableFileInput
صحيح	فئة IntegerField (** kwargs)	NumberInput عندما يكون Field.localize خطأ ، وإلا TextInput
GenericIPAddressField	فئة GenericIPAddressField (** kwargs)	إدخال النص
MultiChoiceField	فئة MultipleChoiceField (** kwargs)	حدد متعدد
TypedMultipleChoiceField	فئة TypedMultipleChoiceField (** kwargs)	حدد متعدد
حقل NullBooleanField	فئة NullBooleanField (** kwargs)	NullBoolean اختر
RegexField	فئة RegexField (** kwargs)	إدخال النص
SlugField	فئة SlugField (** kwargs)	إدخال النص
TimeField	فئة TimeField (** kwargs)	إدخال الوقت
URLField	فئة URLField (** kwargs)	URLInput
UUIDField	فئة UUIDField (** kwargs)	إدخال النص
الحجج الميدانية الأساسية
حجج المجال الأساسي هي الحجج المعطاة لكل حقل لتطبيق بعض القيود أو نقل خاصية معينة إلى حقل معين. على سبيل المثال ، ستؤدي إضافة وسيطة مطلوبة = False إلى CharField إلى تركها فارغة من قِبل المستخدم. يأخذ كل مُنشئ فئة Field هذه الحجج على الأقل. تأخذ بعض الفئات الميدانية حججًا إضافية خاصة بالمجال ، ولكن يجب دائمًا قبول ما يلي:

.math-table {border-collapse: collapse؛ العرض: 100٪؛ } .math-table td {border: 1px solid # 5fb962؛ محاذاة النص: يسار! مهم ؛ الحشو: 8 بكسل ؛ } .math-table th {border: 1px solid # 5fb962؛ الحشو: 8 بكسل ؛ } .math-table tr> th {background-color: # c6ebd9؛ محاذاة عمودية: وسط ؛ } .math-table tr: nth-child (فردي) {background-color: #ffffff؛ }

خيارات المجال	وصف
مطلوب	بشكل افتراضي ، تفترض كل فئة Field أن القيمة مطلوبة ، لذلك لجعلها غير مطلوبة ، تحتاج إلى تعيين required = False
ضع الكلمة المناسبة	تتيح لك وسيطة التسمية تحديد التسمية "الملائمة للإنسان" لهذا الحقل. يستخدم هذا عندما يتم عرض الحقل في نموذج.
label_suffix	تسمح لك الوسيطة label_suffix بتجاوز تسمية النموذج على أساس كل حقل.
القطعة	يتيح لك وسيط عنصر واجهة المستخدم تحديد فئة عنصر واجهة المستخدم لاستخدامها عند عرض هذا الحقل. انظر الحاجيات لمزيد من المعلومات.
help_text	تتيح لك الوسيطة help_text تحديد نص وصفي لهذا الحقل. إذا قمت بتوفير help_text ، فسيتم عرضه بجوار الحقل عندما يتم تقديم الحقل بإحدى طرق النموذج الملائمة. 
 
رسائل خاطئة	The error_messages argument lets you override the default messages that the field will raise. Pass in a dictionary with keys matching the error messages you want to override.
validators	The validators argument lets you provide a list of validation functions for this field. 
 
localize	The localize argument enables the localization of form data input, as well as the rendered output.
disabled.	The disabled boolean argument, when set to True, disables a form field using the disabled HTML attribute so that it won’t be editable by users. 
 


>>>>>>>>>>>>>>>>>>>>
تقديم نماذج HTML (GET & POST) في Django
مستوى الصعوبة: متوسط
آخر تحديث: 16 أغسطس 2021
غالبًا ما يُطلق على Django اسم "إطار عمل البطاريات" لأنه يحتوي على إعداد افتراضي لكل شيء وله ميزات يمكن أن تساعد أي شخص في تطوير موقع ويب بسرعة. بالحديث عن النماذج ، في HTML ، النموذج عبارة عن مجموعة من العناصر داخل <form>… </form> التي تسمح للزائر بفعل أشياء مثل إدخال نص ، وتحديد الخيارات ، والتعامل مع الكائنات أو عناصر التحكم ، وما إلى ذلك ، ثم إرسال ذلك عودة المعلومات إلى الخادم. في الأساس ، هي عبارة عن مجموعة من البيانات لمعالجتها لأي غرض بما في ذلك حفظها في قاعدة البيانات أو جلب البيانات من قاعدة البيانات. يدعم Django جميع أنواع نماذج HTML وتقديم البيانات منها إلى طريقة عرض للمعالجة باستخدام عمليات منطقية مختلفة.

لمعرفة المزيد حول نماذج HTML ، قم بزيارة HTML | شكل العلامة .

يوفر Django أيضًا ميزة مضمنة في نماذج Django تمامًا مثل نماذج Django . يمكن للمرء إنشاء نماذج في Django واستخدامها لجلب البيانات من المستخدم بطريقة مناسبة.
لبدء النماذج ، يحتاج المرء إلى أن يكون على دراية بطلبات GET و POST في النماذج.

GET: على النقيض من ذلك ، يقوم GET بتجميع البيانات المرسلة في سلسلة ، ويستخدم هذا لإنشاء عنوان URL. يحتوي عنوان URL على العنوان الذي يجب إرسال البيانات إليه ، بالإضافة إلى مفاتيح البيانات والقيم. يمكنك رؤية هذا عمليًا إذا أجريت بحثًا في وثائق Django ، والتي ستنتج عنوان URL للنموذج https://docs.djangoproject.com/search/؟q=forms&release=1.
POST: أي طلب يمكن استخدامه لتغيير حالة النظام - على سبيل المثال ، طلب يقوم بإجراء تغييرات في قاعدة البيانات - يجب أن يستخدم طريقة POST.
تقديم نماذج HTML في شرح Django
رسم توضيحي لنماذج Django باستخدام مثال. ضع في اعتبارك مشروعًا يسمى geeksforgeeks به تطبيق يسمى geeks.

راجع المقالات التالية للتحقق من كيفية إنشاء مشروع وتطبيق في Django.

كيفية إنشاء مشروع أساسي باستخدام MVT في Django؟
كيفية إنشاء تطبيق في Django؟
دعنا ننشئ نموذج HTML بسيطًا لتوضيح كيف يمكنك إدخال البيانات من مستخدم واستخدامها في طريقة العرض الخاصة بك. أدخل الكود التالي في geeks> قوالب> home.html

<form action = "" method = "get">
    <label for="your_name">Your name: </label>
    <input id="your_name" type="text" name="your_name">
    <input type="submit" value="OK">
</form>
الآن لعرضه في رأينا ، نحتاج إلى تعديل urls.py لتطبيق geeks.
أدخل الكود التالي في geeksforgeeks> urls.py

from django.urls import path
 
# importing views from views..py
from .views import geeks_view
 
urlpatterns = [
    path('', home_view ),
]
الآن ، دعنا ننتقل إلى home_view الخاص بنا ونبدأ في التحقق من كيفية الحصول على البيانات. يتم نقل البيانات الكاملة من نموذج HTML في Django ككائن JSON يسمى طلب. لنقم بإنشاء طريقة عرض أولاً ثم سنحاول جميع الطرق لجلب البيانات من النموذج.

from django.shortcuts import render
 
# Create your views here.
def home_view(request):
 
    # logic of view will be implemented here
    return render(request, "home.html")
نظرًا لأننا قمنا بإعداد كل شيء ، فلنقم بتشغيل خادم Python manager.py للتشغيل والتحقق مما إذا كان النموذج موجودًا في الصفحة الرئيسية.

django-أشكال-الثعبان

بشكل افتراضي ، يقوم كل نموذج مكتوب بلغة HTML بتقديم طلب GET إلى النهاية الخلفية للتطبيق ، ويعمل طلب GET بشكل طبيعي باستخدام الاستعلامات في عنوان URL. دعنا نوضح ذلك باستخدام النموذج أعلاه ، املأ النموذج باستخدام اسمك ، ودعنا نتحقق مما يحدث.

أشكال الثعبان دجانغو

يتم إلحاق عنوان URL أعلاه بسمة اسم لعلامة الإدخال والاسم الذي تم إدخاله في النموذج. هذه هي الطريقة التي يعمل بها طلب GET مهما كان عدد المدخلات التي سيتم إلحاقها بعنوان URL لإرسال البيانات إلى النهاية الخلفية للتطبيق. دعنا نتحقق من كيفية الحصول أخيرًا على هذه البيانات في رأينا حتى يمكن تطبيق المنطق بناءً على المدخلات. 
في views.py

from django.shortcuts import render
 
# Create your views here.
def home_view(request):
    print(request.GET)
    return render(request, "home.html")
الآن عندما نملأ النموذج يمكننا أن نرى الإخراج في المحطة على النحو التالي:

طلب الحصول على نماذج python-django

request.GET يقوم بإرجاع قاموس استعلام يمكن الوصول إليه مثل أي قاموس Python آخر واستخدام بياناته في النهاية لتطبيق بعض المنطق. 
وبالمثل ، إذا كانت طريقة الإرسال هي POST ، فيمكنك استخدام request.POST كقاموس استعلام لتحويل البيانات من النموذج إلى طرق عرض.

في home.html

<form action = "" method = "POST">
    {% csrf_token %}
    <label for="your_name">Your name: </label>
    <input id="your_name" type="text" name="your_name">
    <input type="submit" value="OK">
</form>
لاحظ أنه عندما نقوم بإنشاء طلب نموذج ، يطلب منك Django إضافة {٪ csrf_token٪} في النموذج لأغراض أمنية 
الآن ، في views.py دعنا نتحقق من الطلب الذي حصلت عليه POST.

from django.shortcuts import render
 
# Create your views here.
def home_view(request):
    print(request.POST)
    return render(request, "home.html")
الآن عندما نقدم النموذج يظهر البيانات على النحو التالي.

python-django-Forms-render-post-request

بهذه الطريقة يمكن للمرء استخدام هذه البيانات للاستعلام في قاعدة البيانات أو للمعالجة باستخدام بعض العمليات المنطقية وتمريرها باستخدام قاموس السياق إلى القالب.

>>>>>>>>>>>>>>>>>>>>

مستوى الصعوبة: أساسي
تاريخ التحديث الأخير: 29 ديسمبر 2019
عنصر واجهة المستخدم هو تمثيل Django لعنصر إدخال HTML. يتعامل عنصر واجهة المستخدم مع عرض HTML ، واستخراج البيانات من قاموس GET / POST الذي يتوافق مع عنصر واجهة المستخدم. عندما تحدد حقلاً في نموذج ما ، سيستخدم Django عنصر واجهة مستخدم افتراضيًا يتناسب مع نوع البيانات التي سيتم عرضها. للعثور على عنصر واجهة المستخدم المستخدم في أي حقل ، راجع الوثائق الخاصة بفئات الحقول المضمنة . يدور هذا المنشور حول الاستخدام المتقدم للأدوات لتعديل بنية النموذج ونوع الإدخال.

عنصر واجهة المستخدم الافتراضي في حقول النموذج
يحتوي كل حقل على عنصر واجهة مستخدم محدد مسبقًا ، على سبيل المثال ، يحتوي IntegerField على عنصر واجهة مستخدم افتراضي من NumberInput . دعنا نوضح ذلك بمساعدة خبراء مشروعنا الأساسي.

راجع المقالات التالية للتحقق من كيفية إنشاء مشروع وتطبيق في Django.

كيفية إنشاء مشروع أساسي باستخدام MVT في Django؟
كيفية إنشاء تطبيق في Django؟
لنقم الآن بإنشاء نموذج تجريبي في "geeks / Forms.py" ،

from django import forms
  
// creating a django form
class GeeksForm(forms.Form):
    title = forms.CharField()
    description = forms.CharField()
    views = forms.IntegerField()
    available = forms.BooleanField()
الآن لتقديم هذا النموذج ، نحتاج إلى إنشاء طريقة العرض والقالب الذي سيتم استخدامه لعرض النموذج للمستخدم. في geeks / views.py ، أنشئ عرضًا

from django.shortcuts import render
from .forms import GeeksForm
  
# creating a home view
def home_view(request):
    context = {}
    form = GeeksForm(request.POST or None)
    context['form'] = form
    return render(request, "home.html", context)
وفي القوالب / home.html ،

<form method="POST">
    {% csrf_token %}
    {{ form.as_p }}
    <input type="submit" value="Submit">
</form>
الآن دعنا نعرض النموذج عن طريق التشغيل

Python manager.py runserver
قم بزيارة http://127.0.0.1:8000/
الحاجيات أشكال django

كما هو موضح في لقطة الشاشة أعلاه ، هناك نوع مختلف من حقول الإدخال لـ IntegerField و BooleanField وما إلى ذلك. يمكن تعديل هذا باستخدام الطرق التالية.

أدوات حقل نموذج Django المخصصة
يمكن للمرء تجاوز عنصر واجهة المستخدم الافتراضي لكل حقل لأغراض مختلفة. يمكن رؤية قائمة الأدوات هنا - Widgets | توثيق جانغو . لتجاوز عنصر واجهة المستخدم الافتراضي ، نحتاج إلى تحديد عنصر واجهة المستخدم بشكل صريح الذي نريد تعيينه إلى حقل.
قم بإجراء التغييرات التالية على geeks/forms.py،

from django import forms
  
class GeeksForm(forms.Form):
    title = forms.CharField(widget = forms.Textarea)
    description = forms.CharField(widget = forms.CheckboxInput)
    views = forms.IntegerField(widget = forms.TextInput)
    available = forms.BooleanField(widget = forms.Textarea)
الآن قم بزيارة http://127.0.0.1:8000/ ،
django-Forms-widgets-ss
وبالتالي يمكننا تخصيص أي عنصر واجهة مستخدم لأي حقل باستخدام widgetالسمة. ملاحظة - ستظل عمليات التحقق المفروضة على الحقول كما هي ، على سبيل المثال ، حتى إذا تم إنشاء IntegerField مثل CharField ، فلن يقبل سوى مدخلات عدد صحيح.

استخدام الأدوات لتخصيص DateField
تستخدم الأدوات المصغّرة بشكل كبير في حقول النموذج خاصةً باستخدام تحديد نوع عناصر واجهة المستخدم حيث يريد المرء تحديد نوع وعدد المدخلات من المستخدم. دعنا نوضح ذلك بمساعدة تعديل DateField. النظر في Forms.py as ،

from django import forms
  
class GeeksForm(forms.Form):
    title = forms.CharField()
    description = forms.CharField()
    views = forms.IntegerField()
    date = forms.DateField()
بشكل افتراضي ، DateField كعنصر واجهة مستخدم TextInput. يمكن رؤيتها على أنها
django-wisdget-datefield

الآن دعنا نغير الأداة لإدخال أفضل وملائم من مستخدم التاريخ. إضافة SelectDateWidget إلى DateField في forms.py،

from django import forms
  
class GeeksForm(forms.Form):
    title = forms.CharField()
    description = forms.CharField()
    views = forms.IntegerField()
    date = forms.DateField(widget = forms.SelectDateWidget)
يمكن الآن رؤية إدخال التاريخ على أنه سهل للغاية ومفيد في الواجهة الأمامية للتطبيق. بهذه الطريقة يمكننا استخدام أدوات متعددة لتعديل حقول الإدخال.



>>>>>>>>>>>>>>>>>>>>

؛ Django ModelForm - إنشاء نموذج من النماذج
مستوى الصعوبة: أساسي
آخر تحديث: 22 فبراير 2021
Django ModelForm هي فئة تستخدم لتحويل النموذج مباشرة إلى نموذج Django. إذا كنت تقوم ببناء تطبيق يعتمد على قاعدة البيانات ، فمن المحتمل أن يكون لديك نماذج ترتبط بشكل وثيق بنماذج Django. على سبيل المثال ، سيكون لنموذج ونموذج تسجيل المستخدم نفس النوعية والكمية لحقول النموذج وحقول النموذج. لذلك بدلاً من إنشاء رمز فائض لإنشاء نموذج أولاً ثم تعيينه إلى النموذج في طريقة عرض ، يمكننا استخدام ModelForm مباشرةً. يأخذ اسم النموذج كحجة ويحوله إلى نموذج Django. ليس هذا فقط ، يقدم ModelForm الكثير من الأساليب والميزات التي تعمل على أتمتة العملية بأكملها وتساعد على إزالة التكرار في التعليمات البرمجية.

كيفية تحويل نموذج إلى نموذج Django؟
لشرح عمل المشروع ، سنستخدم مشروع geeksforgeeks ، وننشئ نموذجًا ونرسمه إلى نماذج Django.

راجع المقالات التالية للتحقق من كيفية إنشاء مشروع وتطبيق في Django.

كيفية إنشاء مشروع أساسي باستخدام MVT في Django؟
كيفية إنشاء تطبيق في Django؟
الآن عندما يكون مشروعنا جاهزًا ، أنشئ نموذجًا geeks/models.pyفي

# import the standard Django Model
# from built-in library
from django.db import models
   
# declare a new model with a name "GeeksModel"
class GeeksModel(models.Model):
        # fields of the model
    title = models.CharField(max_length = 200)
    description = models.TextField()
    last_modified = models.DateTimeField(auto_now_add = True)
    img = models.ImageField(upload_to = "images/")
   
        # renames the instances of the model
        # with their title name
    def __str__(self):
        return self.title
الآن ، قم بتشغيل الأوامر التالية لإنشاء النموذج ،

Python manager.py makemigrations
Python management.py الهجرة
يمكننا التحقق من إنشاء هذا النموذج بنجاح في http://127.0.0.1:8000/admin/geeks/geeksmodel/add/ ،
django-modelform-model

لإنشاء نموذج مباشرة لهذا النموذج ، تعمق في geeks/forms.pyوأدخل الكود التالي ،

# import form class from django
from django import forms
  
# import GeeksModel from models.py
from .models import GeeksModel
  
# create a ModelForm
class GeeksForm(forms.ModelForm):
    # specify the name of model to use
    class Meta:
        model = GeeksModel
        fields = "__all__"
يأخذ هذا النموذج حقلي وسيطات أو استبعاد .

الحقول - يوصى بشدة أن تحدد صراحةً جميع الحقول التي يجب تحريرها في النموذج باستخدام سمة الحقول. يمكن أن يؤدي عدم القيام بذلك بسهولة إلى مشاكل أمنية عندما يسمح النموذج بشكل غير متوقع للمستخدم بتعيين حقول معينة ، خاصةً عند إضافة حقول جديدة إلى نموذج. اعتمادًا على كيفية عرض النموذج ، قد لا تكون المشكلة مرئية حتى على صفحة الويب. قم بتعيين سمة الحقول على القيمة الخاصة "__all__" للإشارة إلى أنه يجب استخدام جميع الحقول في النموذج.
استبعاد - قم بتعيين سمة الاستبعاد لفئة التعريف الداخلية لـ ModelForm على قائمة الحقول التي سيتم استبعادها من النموذج.
علي سبيل المثال:
فئة PartialAuthorForm (ModelForm):
    فئة ميتا:
        النموذج = المؤلف
        استبعاد = ["العنوان"]
أخيرًا ، لإكمال هيكل MVT الخاص بنا ، قم بإنشاء عرض من شأنه أن يعرض النموذج وحفظه مباشرة في قاعدة البيانات. في geeks / views.py ،

from django.shortcuts import render
from .forms import GeeksForm
  
def home_view(request):
    context ={}
  
    # create object of form
    form = GeeksForm(request.POST or None, request.FILES or None)
      
    # check if form data is valid
    if form.is_valid():
        # save the form data to model
        form.save()
  
    context['form']= form
    return render(request, "home.html", context)
تم تعيين كل شيء ، الآن قم بزيارة http://127.0.0.1:8000/ ،
django- نموذج- شكل
الآن يمكنك أن ترى أن كل حقل نموذج قد تم تعيينه في حقل نموذج وعرضه في المقابل. تمت مناقشة تعيينات الحقول لاحقًا في هذه المقالة. لنحاول الآن إدخال البيانات في النموذج ومعرفة ما إذا تم حفظها في قاعدة البيانات.
django-modelform- إدخال البيانات
اضغط على إرسال وسيتم حفظ النموذج بنغو تلقائيًا في قاعدة البيانات. يمكننا التحقق من ذلك على http: // localhost: 8000 / admin / geeks / geeksmodel / .
django-modelform-save-model

أنواع الحقول
سيكون لفئة النموذج التي تم إنشاؤها حقل نموذج لكل حقل نموذج محدد ، بالترتيب المحدد في سمة الحقول. يحتوي كل حقل نموذج على حقل نموذج افتراضي مطابق. على سبيل المثال ، يتم تمثيل CharField على نموذج كـ CharField في نموذج. يتم تمثيل نموذج ManyToManyField على أنه حقل متعدد الخيارات. فيما يلي القائمة الكاملة للتحويلات:

مجال النموذج	حقل النموذج
مجال تلقائي	غير ممثلة في النموذج
BigAutoField	غير ممثلة في النموذج
BigIntegerField	IntegerField مع min_value مضبوطًا على -9223372036854775808 وتعيين max_value على 9223372036854775807.
بيناري فيلد	CharField ، إذا تم تعيين قابل للتحرير على True في حقل النموذج ، وإلا فلن يتم تمثيله في النموذج.
منطقية	BooleanField أو NullBooleanField إذا كانت القيمة خالية = True.
CharField	CharField مع max_length مضبوط على max_length لحقل النموذج و blank_value مضبوطًا على None إذا كان null = True.
DateField	DateField
DateTimeField	DateTimeField
المجال العشري	المجال العشري
المدة	المدة
حقل البريد الإلكتروني	حقل البريد الإلكتروني
FileField	FileField
FilePathField	FilePathField
فلوتفيلد	فلوتفيلد
مفتاح غريب	ModelChoiceField
حقل الصورة	حقل الصورة
صحيح	صحيح
IPAddressField	IPAddressField
GenericIPAddressField	GenericIPAddressField
ManyToManyField	ModelMultipleChoiceField
حقل NullBooleanField	حقل NullBooleanField
حقل PositiveIntegerField	صحيح
حقل ايجابي صغير الحجم	صحيح
SlugField	SlugField
SmallAutoField	غير ممثلة في النموذج
حقل النص	CharField مع القطعة = Forms.Textarea
TimeField	TimeField
URLField	URLField\

>>>>>>>>>>>>>>>>>>>>

أشكال جانغو
آخر تحديث: 09 يناير 2020
Formsets في Django هي طريقة متقدمة للتعامل مع نماذج متعددة في صفحة ويب واحدة. بمعنى آخر ، النماذج هي مجموعة من النماذج في Django. قد يرغب المرء في تهيئة نماذج متعددة على صفحة واحدة والتي قد تتضمن جميعها طلبات POST ، على سبيل المثال

من نماذج الاستيراد django
فئة GeeksForm (أشكال. شكل):
    العنوان = النماذج.
    pub_date = Forms.DateField ()
الآن قد يرغب المرء في السماح للمستخدم بإنشاء مقالات مرة واحدة ، لذلك إذا تم التفكير بطريقة تقليدية ، يستخدم المرء نماذج متعددة وأسماء مختلفة لكل نموذج للتعامل مع البيانات على صفحة واحدة ولكن هذا من شأنه أن يعقد الكود بالإضافة إلى الوظائف. مجموعة الصيغ هي طبقة من التجريد للعمل مع نماذج متعددة في نفس الصفحة. يمكن مقارنتها بشبكة البيانات بشكل أفضل.
الآن لإنشاء مجموعة من نموذج GeeksForm ،

من django.forms استيراد formset_factory
GeeksFormSet = formset_factory (GeeksForm)
إنشاء واستخدام نماذج Django
رسم توضيحي لتصيير نماذج Django يدويًا باستخدام مثال. ضع في اعتبارك مشروعًا باسم geeksforgeeksيحتوي على تطبيق مسمى geeks.

راجع المقالات التالية للتحقق من كيفية إنشاء مشروع وتطبيق في Django.

كيفية إنشاء مشروع أساسي باستخدام MVT في Django؟
كيفية إنشاء تطبيق في Django؟
في تطبيق geeks الخاص بك ، قم بإنشاء ملف جديد يسمى Forms.py حيث ستقوم بإنشاء جميع النماذج الخاصة بك. لإنشاء نموذج Django ، تحتاج إلى استخدام فئة نموذج Django . دعنا نوضح كيف ،
في forms.pyإدخال ما يلي ،

from django import forms
  
# create a form
class GeeksForm(forms.Form):
    title = forms.CharField()
    description = forms.CharField()
دعنا نشرح ما يحدث بالضبط ، يشير الجانب الأيسر إلى اسم الحقل وعلى يمينه ، يمكنك تحديد الوظائف المختلفة لحقل الإدخال في المقابل. يُشار إلى بناء جملة الحقل على أنه
بناء الجملة:

اسم_المجال = نماذج. نوع الحقل (سمات)
الآن لإنشاء مجموعة نموذجية بسيطة من هذا النموذج ، انتقل إلى views.py وإنشاء ملف على formset_viewالنحو التالي.

from django.shortcuts import render
  
# relative import of forms
from .forms import GeeksForm
  
# importing formset_factory
from django.forms import formset_factory
  
def formset_view(request):
    context ={}
  
    # creating a formset
    GeeksFormSet = formset_factory(GeeksForm)
    formset = GeeksFormSet()
      
    # Add the formset to context dictionary
    context['formset']= formset
    return render(request, "home.html", context)
لعرض مجموعة الصيغة من خلال HTML ، قم بإنشاء ملف html "home.html". الآن دعنا نعدلtemplates > home.html

<form method="POST" enctype="multipart/form-data">
    {% csrf_token %}
    {{ formset.as_p }}
    <input type="submit" value="Submit">
</form>
تم تعيين كل شيء للتحقق مما إذا كانت مجموعة النموذج الخاصة بنا تعمل أم لا ، دعنا نزور http: // localhost: 8000 / .
مجموعات دجانغو.
شكلنا يعمل بشكل كامل. دعنا نتعلم كيفية تعديل مجموعة الشكل هذه لاستخدام ميزات إضافية لهذه المجموعة.

كيفية إنشاء نماذج متعددة باستخدام Django Formsets
تُستخدم مجموعات أشكال Django للتعامل مع مثيلات متعددة للنموذج. يمكن للمرء إنشاء نماذج متعددة بسهولة باستخدام extraسمات Django Formsets. في geeks / views.py ،

from django.shortcuts import render
  
# relative import of forms
from .forms import GeeksForm
  
# importing formset_factory
from django.forms import formset_factory
  
def formset_view(request):
    context ={}
  
    # creating a formset and 5 instances of GeeksForm
    GeeksFormSet = formset_factory(GeeksForm, extra = 5)
    formset = GeeksFormSet()
      
    # Add the formset to context dictionary
    context['formset']= formset
    return render(request, "home.html", context)
تقوم الوسيطة الأساسية extraبعمل نسخ متعددة من نفس النموذج. إذا أراد المرء إنشاء 5 نماذج أدخل extra = 5وبالمثل للآخرين. قم بزيارة http: // localhost: 8000 / للتحقق مما إذا تم إنشاء 5 نماذج.
مجموعات أشكال متعددة django

التعامل مع نماذج متعددة باستخدام نماذج Django
يعد إنشاء نموذج أسهل بكثير من معالجة البيانات المدخلة في تلك الحقول في النهاية الخلفية. دعنا نحاول توضيح كيف يمكن للمرء بسهولة استخدام بيانات مجموعة النموذج في طريقة عرض. عند محاولة معالجة formset ، تطلبت مجموعات صيغ Django وسيطة إضافية واحدة {{formset.management_data}} . لمعرفة المزيد حول بيانات الإدارة ، قم بزيارة فهم نموذج الإدارة .
في templates/home.html،

<form method="POST" enctype="multipart/form-data">
      
    <!-- Management data of formset -->
    {{ formset.management_data }}
  
    <!-- Security token -->
    {% csrf_token %}
  
    <!-- Using the formset -->
    {{ formset.as_p }}
      
    <input type="submit" value="Submit">
</form>
الآن للتحقق من كيفية ونوع البيانات التي يتم تقديمها ، قم بتحرير formset_view لطباعة البيانات. في geeks/view.py،

from django.shortcuts import render
  
# relative import of forms
from .forms import GeeksForm
  
# importing formset_factory
from django.forms import formset_factory
  
def formset_view(request):
    context ={}
  
    # creating a formset and 5 instances of GeeksForm
    GeeksFormSet = formset_factory(GeeksForm, extra = 3)
    formset = GeeksFormSet(request.POST or None)
      
    # print formset data if it is valid
    if formset.is_valid():
        for form in formset:
            print(form.cleaned_data)
              
    # Add the formset to context dictionary
    context['formset']= formset
    return render(request, "home.html", context)
لنحاول الآن إدخال البيانات في شكل مجموعة من خلال http: // localhost: 8000 /
أدخل-formset-data-django-formets
Hit إرسال وسيتم عرض البيانات في سطر الأوامر حيث يعمل الخادم. يمكن للمرء استخدام هذه البيانات بأي طريقة مريحة الآن.
django-formets-use-data1
Formset عبارة عن عناصر متقدمة يمكن استخدامها لحل عدد من المشكلات ولكن يجب استخدامها مع بناء الجملة الصحيح وعمليات التحقق من صحة الحقول ، وإلا فإن التعارضات والأخطاء ستعطل الأداء الطبيعي. لمعرفة المزيد عن Formsets ، تفضل بزيارة التوثيق الرسمي لـ Formsets .


>>>>>>>>>>>>>>>>>>>>

Django ModelFormSets
مستوى الصعوبة: أساسي
آخر تحديث: 09 يناير 2020
تعد ModelFormsets في Django طريقة متقدمة للتعامل مع نماذج متعددة تم إنشاؤها باستخدام نموذج واستخدامها لإنشاء مثيلات نموذج. بمعنى آخر ، ModelFormsets هي مجموعة من الأشكال في Django. قد يرغب المرء في تهيئة نماذج متعددة على صفحة واحدة والتي قد تتضمن جميعها طلبات POST ، على سبيل المثال

فئة GeeksModel (طرازات. نموذج):
    العنوان = النماذج. CharField (max_length = 200)
    الوصف = النماذج. TextField ()
الآن إذا أراد المرء إنشاء مجموعة نموذج لهذا النموذج ، فيجب استخدام modelformset_factory. مجموعة الصيغ هي طبقة من التجريد للعمل مع نماذج متعددة في نفس الصفحة. يمكن مقارنتها بشبكة البيانات بشكل أفضل.

من django.forms استيراد formset_factory
GeeksFormSet = modelformset_factory (GeeksModel)
إنشاء واستخدام Django ModelForms
رسم توضيحي لعرض Django ModelForms يدويًا باستخدام مثال. ضع في اعتبارك مشروعًا باسم geeksforgeeksيحتوي على تطبيق مسمى geeks.

راجع المقالات التالية للتحقق من كيفية إنشاء مشروع وتطبيق في Django.

كيفية إنشاء مشروع أساسي باستخدام MVT في Django؟
كيفية إنشاء تطبيق في Django؟
في تطبيق geeks الخاص بك ، أنشئ ملفًا جديدًا يسمى Models.py حيث ستصنع جميع نماذجك. لإنشاء نموذج Django ، تحتاج إلى استخدام نماذج Django. دعنا نوضح كيف ،
في models.pyإدخال ما يلي ،

# import the standard Django Model
# from built-in library
from django.db import models
   
# declare a new model with a name "GeeksModel"
class GeeksModel(models.Model):
  
    # fields of the model
    title = models.CharField(max_length = 200)
    description = models.TextField()
  
    # renames the instances of the model
    # with their title name
    def __str__(self):
        return self.title
دعنا نشرح ما يحدث بالضبط ، يشير الجانب الأيسر إلى اسم الحقل وعلى يمينه ، يمكنك تحديد الوظائف المختلفة لحقل الإدخال في المقابل. يُشار إلى بناء جملة الحقل على أنه
بناء الجملة:

اسم_المجال = نماذج. نوع الحقل (سمات)
الآن لإنشاء مجموعة نموذجية بسيطة من هذا النموذج ، انتقل إلى views.py وإنشاء ملف على formset_viewالنحو التالي.

from django.shortcuts import render
  
# relative import of forms
from .forms import GeeksForm
  
# importing formset_factory
from django.forms import formset_factory
  
def formset_view(request):
    context ={}
  
    # creating a formset
    GeeksFormSet = modelformset_factory(GeeksForm)
    formset = GeeksFormSet()
      
    # Add the formset to context dictionary
    context['formset']= formset
    return render(request, "home.html", context)
لعرض مجموعة الصيغة من خلال HTML ، قم بإنشاء ملف html "home.html". الآن دعنا نعدلtemplates > home.html

<form method="POST" enctype="multipart/form-data">
    {% csrf_token %}
    {{ formset.as_p }}
    <input type="submit" value="Submit">
</form>
تم تعيين كل شيء للتحقق مما إذا كانت مجموعة النموذج الخاصة بنا تعمل أم لا ، دعنا نزور http: // localhost: 8000 / .
django- modelformsets

نحن modelformsetنعمل بشكل كامل. دعنا نتعلم كيفية تعديل مجموعة الشكل هذه لاستخدام ميزات إضافية لهذه المجموعة.

كيفية إنشاء نماذج متعددة باستخدام Django ModelForms
تُستخدم مجموعات أشكال Django للتعامل مع مثيلات متعددة للنموذج. يمكن للمرء إنشاء نماذج متعددة بسهولة باستخدام extraسمات Django Formsets. في geeks / views.py ،

from django.shortcuts import render
  
# relative import of forms
from .models import GeeksModel
  
# importing formset_factory
from django.forms import modelformset_factory
  
def modelformset_view(request):
    context ={}
  
    # creating a formset and 5 instances of GeeksForm
    GeeksFormSet = modelformset_factory(GeeksModel, fields =['title', 'description'], extra = 3)
    formset = GeeksFormSet()
  
              
    # Add the formset to context dictionary
    context['formset']= formset
    return render(request, "home.html", context)
تقوم الوسيطة الأساسية extraبعمل نسخ متعددة من نفس النموذج. إذا أراد المرء إنشاء 5 نماذج أدخل extra = 5وبالمثل للآخرين. قم بزيارة http: // localhost: 8000 / للتحقق مما إذا تم إنشاء 5 نماذج.
django-modelfornsets-extra-keyword

التعامل مع نماذج متعددة باستخدام نماذج Django
يعد إنشاء نموذج أسهل بكثير من معالجة البيانات المدخلة في تلك الحقول في النهاية الخلفية. دعنا نحاول توضيح كيف يمكن للمرء بسهولة استخدام بيانات مجموعة نموذج في طريقة عرض. عند محاولة معالجة formset ، تطلبت مجموعات صيغ Django وسيطة إضافية واحدة {{formset.management_data}} . لمعرفة المزيد عن بيانات الإدارة ، فهم نموذج الإدارة .
في templates/home.html،

<form method="POST" enctype="multipart/form-data">
      
    <!-- Management data of formset -->
    {{ formset.management_data }}
  
    <!-- Security token -->
    {% csrf_token %}
  
    <!-- Using the formset -->
    {{ formset.as_p }}
      
    <input type="submit" value="Submit">
</form>
الآن للتحقق من كيفية ونوع البيانات التي يتم تقديمها ، قم بتحرير formset_view لطباعة البيانات. في geeks/view.py،

from django.shortcuts import render
  
# relative import of forms
from .forms import GeeksForm
  
# importing formset_factory
from django.forms import formset_factory
  
def formset_view(request):
    context ={}
  
    # creating a formset and 5 instances of GeeksForm
    GeeksFormSet = formset_factory(GeeksForm, extra = 3)
    formset = GeeksFormSet(request.POST or None)
      
    # print formset data if it is valid
    if formset.is_valid():
        for form in formset:
            print(form.cleaned_data)
              
    # Add the formset to context dictionary
    context['formset']= formset
    return render(request, "home.html", context)
لنحاول الآن إدخال البيانات في شكل مجموعة من خلال http: // localhost: 8000 /
django-modelformsets-use-data

اضغط على إرسال وسيتم حفظ البيانات في GeeksModel حيث يعمل الخادم. يمكن للمرء استخدام هذه البيانات بأي طريقة مريحة الآن.
<<<<<<<<<<<<<<<<<<<<<<
قوالب جانغو
مستوى الصعوبة: متوسط
آخر تحديث: 27 سبتمبر 2021
القوالب هي الجزء الثالث والأكثر أهمية في هيكل MVT من Django . القالب في Django مكتوب أساسًا بلغة HTML و CSS و Javascript في ملف .html. يتعامل إطار عمل Django بكفاءة مع صفحات ويب HTML المرئية للمستخدم النهائي وينشئها بشكل ديناميكي. يعمل Django بشكل أساسي مع الواجهة الخلفية ، لذلك ، من أجل توفير واجهة أمامية وتوفير تخطيط لموقعنا على الويب ، نستخدم القوالب. هناك طريقتان لإضافة النموذج إلى موقعنا على الإنترنت حسب احتياجاتنا.
يمكننا استخدام دليل قالب واحد سينتشر على المشروع بأكمله. 
لكل تطبيق في مشروعنا ، يمكننا إنشاء دليل قالب مختلف.

بالنسبة لمشروعنا الحالي ، سننشئ دليل قالب واحدًا سيتم توزيعه على المشروع بأكمله من أجل التبسيط. تُستخدم القوالب على مستوى التطبيق عمومًا في المشاريع الكبيرة أو في حال أردنا توفير تخطيط مختلف لكل مكون من مكونات صفحة الويب الخاصة بنا.

إعدادات
يمكن تكوين قوالب Django في app_name / settings.py ،  

TEMPLATES = [
    {
        # Template backend to be used, For example Jinja
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        # Directories for templates
        'DIRS': [],
        'APP_DIRS': True,
 
        # options to configure
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]
استخدام قوالب Django
رسم توضيحي لكيفية استخدام القوالب في Django باستخدام مشروع مثال. لا تعرض القوالب البيانات الثابتة فحسب ، بل تعرض أيضًا البيانات من قواعد البيانات المختلفة المتصلة بالتطبيق من خلال قاموس السياق. ضع في اعتبارك مشروعًا يسمى geeksforgeeks به تطبيق يسمى geeks. 

راجع المقالات التالية للتحقق من كيفية إنشاء مشروع وتطبيق في Django. 

كيفية إنشاء مشروع أساسي باستخدام MVT في Django؟
كيفية إنشاء تطبيق في Django؟
لعرض نموذج ، يحتاج المرء إلى طريقة عرض وعنوان URL معين لهذا العرض. لنبدأ بإنشاء عرض في geeks / views.py ،  


# import Http Response from django
from django.shortcuts import render
  
# create a function
def geeks_view(request):
    # create a dictionary to pass
    # data to the template
    context ={
        "data":"Gfg is the best",
        "list":[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
    }
    # return response with template and context
    return render(request, "geeks.html", context)
نحتاج الآن إلى تعيين عنوان URL لعرض هذا العرض ، 


from django.urls import path
 
# importing views from views..py
from .views import geeks_view
 
urlpatterns = [
    path('', geeks_view),
]
أخيرًا ، أنشئ نموذجًا في قوالب / geeks.html ، 


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Homepage</title>
</head>
<body>
    <h1>Welcome to Geeksforgeeks.</h1>
     
 
 
<p> Data  is {{  data }}</p>
 
 
 
    <h4>List is </h4>
    <ul>
    {% for i in list %}
    <li>{{ i }}</li>
    {% endfor %}
</body>
</html>
دعنا نتحقق مما إذا كان يعمل ، 

قوالب دجانغو

لغة قالب Django
هذه واحدة من أهم المرافق التي تقدمها قوالب Django. قالب Django هو مستند نصي أو سلسلة Python تم ترميزها باستخدام لغة قالب Django. يتم التعرف على بعض التركيبات وتفسيرها بواسطة محرك القالب. أهمها المتغيرات والعلامات. كما استخدمنا الحلقة في المثال أعلاه ، استخدمناها كعلامة. بالمثل ، يمكننا استخدام العديد من الشروط الأخرى مثل if ، else ، if-else ، فارغ ، إلخ. الخصائص الرئيسية للغة قالب Django هي المتغيرات ، العلامات ، المرشحات ، والتعليقات. 

المتغيرات
تُخرج المتغيرات قيمة من السياق ، وهو عبارة عن مفاتيح لتعيين القيم إلى القيم. يمكن الوصول إلى كائن السياق الذي أرسلناه من العرض في القالب باستخدام متغيرات قالب Django. 

بناء الجملة

{{ اسم المتغير }}
مثال
المتغيرات محاطة بـ {{and}} على النحو التالي:  

اسمي الأول {{first_name}}. اسم عائلتي هو {{last_name}}.
مع سياق {'first_name': 'Naveen'، 'last_name': 'Arora'} ، يتم عرض هذا النموذج إلى: 

اسمي الأول نافين. اسم عائلتي هو أرورا.
لمعرفة المزيد عن متغيرات قالب Django ، تفضل بزيارة - المتغيرات - قوالب Django 

العلامات
توفر العلامات منطقًا تعسفيًا في عملية العرض. على سبيل المثال ، يمكن للعلامة إخراج المحتوى ، والعمل كهيكل تحكم ، مثل عبارة "if" أو حلقة "for" ، أو الحصول على محتوى من قاعدة بيانات ، أو حتى تمكين الوصول إلى علامات قوالب أخرى.

بناء الجملة

{٪ tag_name٪}
مثال

العلامات محاطة بـ {٪ و٪} مثل هذا:

{٪ csrf_token٪}
تقبل معظم العلامات الوسيطات ، على سبيل المثال: 

{٪ دورة 'فردية' 'زوجية'٪}
 
 	العلامات شائعة الاستخدام	 
تعليق	دورة	يمتد
إذا	لحلقة	ل ... حلقة فارغة
العوامل المنطقية	أولا	تتضمن
لوريم	حاليا	عنوان url
المرشحات
يوفر محرك قوالب Django عوامل تصفية تُستخدم لتحويل قيم المتغيرات ووسائط الوسم. لقد ناقشنا بالفعل علامات قالب Django الرئيسية. لا يمكن للعلامات تعديل قيمة المتغير بينما يمكن استخدام المرشحات لزيادة قيمة المتغير أو تعديله حسب حاجة الفرد. 

بناء الجملة

{{اسم متغير | filter_name}}
يمكن "تقييد" المرشحات. يتم تطبيق ناتج أحد المرشحات على المرشح التالي. {{text | escape | linebreaks}} هو مصطلح شائع للهروب من محتويات النص ، ثم تحويل فواصل الأسطر إلى علامات <p>. 

مثال

{{قيمة | الطول }}
إذا كانت القيمة ['a'، 'b'، 'c'، 'd'] ، فسيكون الناتج 4 . 

 	مرشحات القوالب الرئيسية	 
يضيف	مائل	غطاء أولا
المركز	يقطع	تاريخ
إفتراضي	إملاء	يقبل القسمة
هرب	filesizefo يقبل القسمة على rmat	أول
انضم	الاخير	الطول
أرقام الأسطر	أدنى	جهز قائمة
عشوائي	شريحة	بطيء
زمن	منذ وقت	لقب
قائمة غير مرتبة	العلوي	عدد الكلمات
تعليقات
يتجاهل القالب كل شيء بين {٪ comment٪} و {٪ end comment٪}. يمكن إدراج ملاحظة اختيارية في العلامة الأولى. على سبيل المثال ، يكون هذا مفيدًا عند التعليق على التعليمات البرمجية لتوثيق سبب تعطيل الرمز. 

بناء الجملة

{٪ تعليق 'comment_name'٪}
{٪ endcomment٪}
مثال :

{٪ تعليق "ملاحظة اختيارية"٪}
    نص معلق مع {{create_date | التاريخ: "c"}}
{٪ endcomment٪}
لمعرفة المزيد حول استخدام التعليقات في القوالب ، قم بزيارة تعليق - علامات قالب Django 

وراثة النموذج
الجزء الأقوى والأكثر تعقيدًا في محرك قوالب Django هو وراثة القوالب. يتيح لك وراثة النموذج إنشاء نموذج "هيكل عظمي" أساسي يحتوي على جميع العناصر المشتركة لموقعك ويحدد الكتل التي يمكن للقوالب الفرعية تجاوزها. تمتد الوسم لتوريث القوالب في Django. يحتاج المرء إلى تكرار نفس الرمز مرارًا وتكرارًا. باستخدام الامتدادات يمكننا أن نرث القوالب وكذلك المتغيرات.

بناء الجملة

يقوم {٪ بتوسيع 'template_name.html'٪}
مثال:
افترض بنية الدليل التالية:

dir1 /
    template.html
    base2.html
    لي/
        base3.html
base1.html
في template.html ، ستكون المسارات التالية صالحة: 


{% extends "./base2.html" %}
{% extends "../base1.html" %}
{% extends "./my/base3.html" %}
لمعرفة المزيد عن وراثة القوالب والتوسعات ، تفضل بزيارة الموقع - علامات قالب Django 
 



<<<<<<<<<<<<<<<<<<<<<<
مشاهدات في جانغو | بايثون
مستوى الصعوبة: سهل
آخر تحديث: 16 سبتمبر 2021
آراء Django هي واحدة من المشاركين الأساسيين في M V T Structure of Django . وفقًا لوثائق Django ، فإن وظيفة العرض هي إحدى وظائف Python التي تأخذ طلب الويب وترجع استجابة الويب . يمكن أن تكون هذه الاستجابة محتويات HTML لصفحة ويب ، أو إعادة توجيه ، أو خطأ 404 ، أو مستند XML ، أو صورة ، أي شيء يمكن لمتصفح الويب عرضه. 

تعد طرق عرض Django جزءًا من واجهة المستخدم - فهي عادةً تعرض HTML / CSS / Javascript في ملفات القالب إلى ما تراه في متصفحك عند عرض صفحة ويب. (لاحظ أنه إذا كنت قد استخدمت أطر عمل أخرى تستند إلى MVC (Model-View-Controller) ، فلا تخلط بين طرق عرض Django وطرق العرض في نموذج MVC. تتوافق عروض Django تقريبًا مع وحدات التحكم في MVC ، وقوالب Django مع العروض في MVC.)

django- آراء

 

مثال عرض Django
رسم توضيحي لكيفية إنشاء واستخدام طريقة عرض Django باستخدام مثال. ضع في اعتبارك مشروعًا يسمى geeksforgeeks به تطبيق يسمى geeks. 

راجع المقالات التالية للتحقق من كيفية إنشاء مشروع وتطبيق في Django.
 

كيفية إنشاء مشروع أساسي باستخدام MVT في Django؟
كيفية إنشاء تطبيق في Django؟
بعد أن يكون لديك مشروع جاهز ، يمكننا إنشاء عرض في geeks / views.py ،


# import Http Response from django
from django.http import HttpResponse
# get datetime
import datetime
 
# create a function
def geeks_view(request):
    # fetch date and time
    now = datetime.datetime.now()
    # convert to string
    html = "Time is {}".format(now)
    # return response
    return HttpResponse(html)
دعنا نخطو خلال هذا الرمز سطرًا واحدًا في كل مرة: 

أولاً ، نقوم باستيراد الفئة HttpResponse من الوحدة النمطية django.http ، جنبًا إلى جنب مع مكتبة التاريخ والوقت في Python.
بعد ذلك ، نحدد وظيفة تسمى geeks_view. هذه هي وظيفة العرض. تأخذ كل وظيفة عرض كائن HttpRequest كمعاملها الأول ، والذي يسمى عادةً بالطلب.
تقوم طريقة العرض بإرجاع كائن HttpResponse يحتوي على الاستجابة التي تم إنشاؤها. كل وظيفة عرض مسؤولة عن إرجاع كائن HttpResponse .
لمزيد من المعلومات حول زيارة HttpRequest و HttpResponse - دورة طلب Django والاستجابة لها - HttpRequest و HttpResponse Objects
، دعنا نجعل هذا العرض يعمل ، في geeks / urls.py ،


from django.urls import path
 
# importing views from views..py
from .views import geeks_view
 
urlpatterns = [
    path('', geeks_view),
]
الآن ، قم بزيارة http://127.0.0.1:8000/ ،

مثال عرض django

للتحقق من كيفية إنشاء مشروع أساسي باستخدام بنية MVT (نموذج ، عرض ، قالب) من Django ، قم بزيارة إنشاء مشروع Django .

أنواع المشاهدات
تنقسم آراء Django إلى فئتين رئيسيتين: -

المشاهدات المستندة إلى الوظائف
المشاهدات المستندة إلى الفئة
أنواع وجهات النظر django

 

وجهات النظر القائمة على الوظيفة
المشاهدات القائمة على الوظيفة هي كاتب يستخدم دالة في بيثون تستقبل كائن HttpRequest كوسيطة وتعيد كائن HttpResponse. تنقسم الآراء القائمة على الوظائف عمومًا إلى 4 استراتيجيات أساسية ، أي CRUD (إنشاء ، استرداد ، تحديث ، حذف). CRUD هو أساس أي إطار يستخدمه المرء للتطوير. 
 

مثال عرض قائم على الوظيفة -
لنقم بإنشاء عرض قائمة عرض قائم على الوظيفة لعرض مثيلات النموذج. دعنا ننشئ نموذجًا سننشئ منه حالات من خلال وجهة نظرنا. في geeks / Models.py ،


# import the standard Django Model
# from built-in library
from django.db import models
  
# declare a new model with a name "GeeksModel"
class GeeksModel(models.Model):
 
    # fields of the model
    title = models.CharField(max_length = 200)
    description = models.TextField()
 
    # renames the instances of the model
    # with their title name
    def __str__(self):
        return self.title
بعد إنشاء هذا النموذج ، نحتاج إلى تشغيل أمرين من أجل إنشاء قاعدة بيانات لنفسه.

Python management.py makemigrations 
Python management.py الهجرة
لنقم الآن بإنشاء بعض الأمثلة على هذا النموذج باستخدام shell وتشغيل form bash ،

Python management.py shell
أدخل الأوامر التالية

>>> من geeks.models استيراد GeeksModel
>>> GeeksModel.objects.create (
                       العنوان = "title1" ،
                       الوصف = "description1"). احفظ ()
>>> GeeksModel.objects.create (
                       العنوان = "title2"،
                       الوصف = "description2"). احفظ ()
>>> GeeksModel.objects.create (
                       العنوان = "title2"،
                       الوصف = "description2"). احفظ ()
الآن إذا كنت تريد رؤية النموذج الخاص بك وبياناته في لوحة الإدارة ، فأنت بحاجة إلى تسجيل النموذج الخاص بك.
دعونا نسجل هذا النموذج. في geeks / admin.py ،


from django.contrib import admin
from .models import GeeksModel
# Register your models here.
admin.site.register(GeeksModel)
الآن لدينا كل شيء جاهز للنهاية الخلفية. تحقق من إنشاء الطبعات من http: // localhost: 8000 / admin / geeks / geeksmodel / 

django-listview-check-Models-المثيلات

لنقم بإنشاء عرض ونموذج لنفسه. في geeks / views.py ،


from django.shortcuts import render
 
# relative import of forms
from .models import GeeksModel
 
 
def list_view(request):
    # dictionary for initial data with
    # field names as keys
    context ={}
 
    # add the dictionary during initialization
    context["dataset"] = GeeksModel.objects.all()
         
    return render(request, "list_view.html", context)
قم بإنشاء قالب في القوالب / list_view.html ،


<div class="main">
 
    {% for data in dataset %}.
 
    {{ data.title }}<br/>
    {{ data.description }}<br/>
    <hr/>
 
    {% endfor %}
 
</div>
دعنا نتحقق مما هو موجود على http: // localhost: 8000 /

django- قائمة- قائمة- وظيفة

وبالمثل ، يمكن تنفيذ طرق العرض القائمة على الوظائف باستخدام منطق لإنشاء طرق العرض وتحديثها واستردادها وحذفها.
Django CRUD (إنشاء ، استرداد ، تحديث ، حذف) طرق العرض القائمة على الوظيفة: -
 

وجهات النظر القائمة على الفئة
توفر طرق العرض المبنية على الفئة طريقة بديلة لتنفيذ طرق العرض ككائنات Python بدلاً من الوظائف. لا تحل محل طرق العرض المستندة إلى الوظيفة ، ولكن لها اختلافات ومزايا معينة عند مقارنتها بطرق العرض المستندة إلى الوظيفة: 

يمكن معالجة تنظيم الكود المرتبط بطرق HTTP معينة (GET ، POST ، إلخ) بطرق منفصلة بدلاً من التفريع الشرطي.
يمكن استخدام التقنيات الموجهة للكائنات مثل mixins (الوراثة المتعددة) لعامل الكود إلى مكونات قابلة لإعادة الاستخدام.
تعد طرق العرض المستندة إلى الفئة أبسط وفعالية في إدارتها من العروض القائمة على الوظائف. يمكن تحويل طريقة العرض القائمة على الوظيفة والتي تحتوي على عدد كبير من أسطر التعليمات البرمجية إلى عروض تستند إلى الفئة مع سطور قليلة فقط. هذا هو المكان الذي تدخل فيه البرمجة الشيئية حيز التنفيذ.  

مثال على العرض المستند إلى الفصل -
في geeks / views.py ،


from django.views.generic.list import ListView
from .models import GeeksModel
 
class GeeksList(ListView):
 
    # specify the model for list view
    model = GeeksModel
الآن قم بإنشاء مسار URL لتعيين العرض. في المهوسون / urls.py ،


from django.urls import path
 
# importing views from views..py
from .views import GeeksList
urlpatterns = [
    path('', GeeksList.as_view()),
]
أنشئ نموذجًا في قوالب / geeks / geeksmodel_list.html ،


<ul>
    <!-- Iterate over object_list -->
    {% for object in object_list %}
    <!-- Display Objects -->
    <li>{{ object.title }}</li>
    <li>{{ object.description }}</li>
 
    <hr/>
    <!-- If objet_list is empty  -->
    {% empty %}
    <li>No objects yet.</li>
    {% endfor %}
</ul>
دعنا نتحقق مما هو موجود على http: // localhost: 8000 /
 

django-listview-class-based views

Django CRUD (إنشاء ، استرداد ، تحديث ، حذف) طرق العرض العامة القائمة على الفئة: -

CreateView - طرق العرض على أساس الفصل Django
DetailView - المشاهدات على أساس الفصل Django
UpdateView - طرق العرض على أساس الفصل Django
DeleteView - طرق عرض على أساس الفصل Django
FormView - طرق العرض المستندة إلى الفصل Django

<<<<<<<<<<<<<<<<<<<<<<

Django CRUD (إنشاء ، استرداد ، تحديث ، حذف) طرق العرض القائمة على الوظيفة
مستوى الصعوبة: متوسط
آخر تحديث: 27 أغسطس 2021
Django هو إطار عمل ويب مستند إلى Python يسمح لك بإنشاء تطبيق ويب سريعًا بدون كل مشكلات التثبيت أو التبعية التي ستجدها عادةً مع أطر العمل الأخرى. يعتمد Django على بنية MVT (نموذج عرض النموذج) ويدور حول عمليات CRUD (إنشاء واسترداد وتحديث وحذف). يمكن شرح CRUD بشكل أفضل كنهج لبناء تطبيق ويب Django. بشكل عام ، يعني CRUD إجراء عمليات إنشاء واسترداد وتحديث وحذف على جدول في قاعدة بيانات. دعونا نناقش ما يعنيه في الواقع CRUD ،
 

مخطط بلا عنوان -316

إنشاء - إنشاء أو إضافة إدخالات جديدة في جدول في قاعدة البيانات. 
استرداد - قراءة أو استرداد أو بحث أو عرض الإدخالات الموجودة كقائمة (عرض قائمة) أو استرداد إدخال معين بالتفصيل (عرض التفاصيل) 
تحديث - تحديث أو تحرير الإدخالات الموجودة في جدول في قاعدة البيانات 
حذف - حذف أو إلغاء تنشيط أو إزالة الإدخالات الموجودة في جدول في قاعدة البيانات
 

Django CRUD (إنشاء ، استرداد ، تحديث ، حذف) طرق العرض القائمة على الوظيفة
رسم توضيحي لكيفية إنشاء واستخدام عرض CRUD باستخدام مثال. ضع في اعتبارك مشروعًا يسمى geeksforgeeks به تطبيق يسمى geeks. 
 

راجع المقالات التالية للتحقق من كيفية إنشاء مشروع وتطبيق في Django. 
 

كيفية إنشاء مشروع أساسي باستخدام MVT في Django؟
كيفية إنشاء تطبيق في Django؟
بعد أن يكون لديك مشروع وتطبيق ، فلنقم بإنشاء نموذج سننشئ منه مثيلات من خلال وجهة نظرنا. في geeks / Models.py ، 
 

# import the standard Django Model
# from built-in library
from django.db import models
  
# declare a new model with a name "GeeksModel"
class GeeksModel(models.Model):
 
    # fields of the model
    title = models.CharField(max_length = 200)
    description = models.TextField()
 
    # renames the instances of the model
    # with their title name
    def __str__(self):
        return self.title
بعد إنشاء هذا النموذج ، نحتاج إلى تشغيل أمرين من أجل إنشاء قاعدة بيانات لنفسه. 
 

Python management.py makemigrations 
Python management.py الهجرة
الآن سنقوم بإنشاء Django ModelForm لهذا النموذج. راجع هذه المقالة لمزيد من المعلومات حول modelform - Django ModelForm - إنشاء نموذج من النماذج . إنشاء ملف Forms.py في مجلد geeks ، 
 


from django import forms
from .models import GeeksModel
 
 
# creating a form
class GeeksForm(forms.ModelForm):
 
    # create meta class
    class Meta:
        # specify model to be used
        model = GeeksModel
 
        # specify fields to be used
        fields = [
            "title",
            "description",
        ]
إنشاء عرض
يشير إنشاء طريقة العرض إلى طريقة عرض (منطق) لإنشاء مثيل لجدول في قاعدة البيانات. إنه أشبه بأخذ مدخلات من المستخدم وتخزينها في جدول محدد. 
في geeks / views.py ، 
 


from django.shortcuts import render
 
# relative import of forms
from .models import GeeksModel
from .forms import GeeksForm
 
 
def create_view(request):
    # dictionary for initial data with
    # field names as keys
    context ={}
 
    # add the dictionary during initialization
    form = GeeksForm(request.POST or None)
    if form.is_valid():
        form.save()
         
    context['form']= form
    return render(request, "create_view.html", context)
قم بإنشاء نموذج في القوالب / create_view.html ، 
 


<form method="POST" enctype="multipart/form-data">
 
    <!-- Security token -->
    {% csrf_token %}
 
    <!-- Using the formset -->
    {{ form.as_p }}
     
    <input type="submit" value="Submit">
</form>
الآن قم بزيارة http: // localhost: 8000 / 
 

django-create-view-function-based

للتحقق من التنفيذ الكامل لـ Create View المستندة إلى الوظيفة ، قم بزيارة إنشاء عرض - طرق عرض تستند إلى الوظيفة Django .
 

استرجاع العرض
ينقسم عرض الاسترداد بشكل أساسي إلى نوعين من طرق العرض عرض التفاصيل وعرض القائمة. 
 

عرض القائمة
تشير طريقة عرض القائمة إلى طريقة عرض (منطق) لسرد كل أو مثيلات معينة لجدول من قاعدة البيانات بترتيب معين. يتم استخدامه لعرض أنواع متعددة من البيانات على صفحة واحدة أو عرض ، على سبيل المثال ، المنتجات على صفحة التجارة الإلكترونية. 
في geeks / views.py ، 
 


from django.shortcuts import render
 
# relative import of forms
from .models import GeeksModel
 
 
def list_view(request):
    # dictionary for initial data with
    # field names as keys
    context ={}
 
    # add the dictionary during initialization
    context["dataset"] = GeeksModel.objects.all()
         
    return render(request, "list_view.html", context)
قم بإنشاء قالب في القوالب / list_view.html ، 
 


<div class="main">
 
    {% for data in dataset %}.
 
    {{ data.title }}<br/>
    {{ data.description }}<br/>
    <hr/>
 
    {% endfor %}
 
</div>
الآن قم بزيارة http: // localhost: 8000 / 
 

django- قائمة- قائمة- وظيفة

للتحقق من التنفيذ الكامل لعرض القائمة المستند إلى الوظائف ، قم بزيارة عرض القائمة - طرق العرض المستندة إلى الوظيفة Django 
 

عرض التفاصيل
يشير عرض التفاصيل إلى طريقة عرض (منطق) لعرض مثيل معين لجدول من قاعدة البيانات مع جميع التفاصيل الضرورية. يتم استخدامه لعرض أنواع متعددة من البيانات على صفحة واحدة أو عرض ، على سبيل المثال ، ملف تعريف المستخدم. 
في geeks / views.py ، 
 


from django.urls import path
 
# importing views from views..py
from .views import detail_view
 
urlpatterns = [
    path('<id>', detail_view ),
]
لنقم بإنشاء عرض ونموذج لنفسه. في geeks / views.py ،
 


from django.shortcuts import render
 
# relative import of forms
from .models import GeeksModel
 
# pass id attribute from urls
def detail_view(request, id):
    # dictionary for initial data with
    # field names as keys
    context ={}
 
    # add the dictionary during initialization
    context["data"] = GeeksModel.objects.get(id = id)
         
    return render(request, "detail_view.html", context)
قم بإنشاء قالب في القوالب / Detail_view.html ، 
 


<div class="main">
     
    <!-- Specify fields to be displayed -->
    {{ data.title }}<br/>
    {{ data.description }}<br/>
 
</div>
دعنا نتحقق مما هو موجود على http: // localhost: 8000/1 
 

عرض التفاصيل django1

للتحقق من التنفيذ الكامل لعرض التفاصيل المستند إلى الوظيفة ، قم بزيارة العرض التفصيلي - طرق العرض المعتمدة على الوظيفة
 

عرض التحديث
تشير طريقة عرض التحديث إلى طريقة عرض (منطق) لتحديث مثيل معين لجدول من قاعدة البيانات ببعض التفاصيل الإضافية. يتم استخدامه لتحديث المدخلات في قاعدة البيانات على سبيل المثال ، تحديث مقال في geeksforgeeks. 
في geeks / views.py ،
 


from django.shortcuts import (get_object_or_404,
                              render,
                              HttpResponseRedirect)
 
# relative import of forms
from .models import GeeksModel
from .forms import GeeksForm
 
# after updating it will redirect to detail_View
def detail_view(request, id):
    # dictionary for initial data with
    # field names as keys
    context ={}
  
    # add the dictionary during initialization
    context["data"] = GeeksModel.objects.get(id = id)
          
    return render(request, "detail_view.html", context)
 
# update view for details
def update_view(request, id):
    # dictionary for initial data with
    # field names as keys
    context ={}
 
    # fetch the object related to passed id
    obj = get_object_or_404(GeeksModel, id = id)
 
    # pass the object as instance in form
    form = GeeksForm(request.POST or None, instance = obj)
 
    # save the data from the form and
    # redirect to detail_view
    if form.is_valid():
        form.save()
        return HttpResponseRedirect("/"+id)
 
    # add form dictionary to context
    context["form"] = form
 
    return render(request, "update_view.html", context)
الآن قم بإنشاء القوالب التالية في مجلد القوالب ، 
في geeks / قوالب / update_view.html ،
 


<div class="main">
    <!-- Create a Form -->
    <form method="POST">
        <!-- Security token by Django -->
        {% csrf_token %}
 
        <!-- form as paragraph -->
        {{ form.as_p }}
 
        <input type="submit" value="Update">
    </form>
 
</div>
في geeks / Templates / details_view.html ، 
 


<div class="main">
    <!-- Display attributes of instance -->
    {{ data.title }} <br/>
    {{ data.description }}
</div>
دعنا نتحقق مما إذا كان كل شيء يعمل ، قم بزيارة http: // localhost: 8000/1 / update . 
 

django- تحديث- عرض-

للتحقق من التنفيذ الكامل لعرض التحديث المستند إلى الوظيفة ، قم بزيارة عرض التحديث - طرق العرض المستندة إلى الوظيفة Django
 

حذف العرض
حذف طريقة العرض يشير إلى طريقة عرض (منطق) لحذف مثيل معين لجدول من قاعدة البيانات. يتم استخدامه لحذف الإدخالات في قاعدة البيانات على سبيل المثال ، حذف مقال في geeksforgeeks. 
في المهوسون / views.py 
 


from django.shortcuts import (get_object_or_404,
                              render,
                              HttpResponseRedirect)
 
from .models import GeeksModel
 
 
# delete view for details
def delete_view(request, id):
    # dictionary for initial data with
    # field names as keys
    context ={}
 
    # fetch the object related to passed id
    obj = get_object_or_404(GeeksModel, id = id)
 
 
    if request.method =="POST":
        # delete object
        obj.delete()
        # after deleting redirect to
        # home page
        return HttpResponseRedirect("/")
 
    return render(request, "delete_view.html", context)
الآن يتم تعيين عنوان url لهذا العرض مع التعبير العادي للمعرف ، 
في geeks / urls.py 
 


from django.urls import path
 
# importing views from views..py
from .views import delete_view
urlpatterns = [
    path('<id>/delete', delete_view ),
]
يتضمن نموذج عرض الحذف نموذجًا بسيطًا يؤكد ما إذا كان المستخدم يريد حذف المثيل أم لا. في geeks / Templates / delete_view.html ، 
 


<div class="main">
    <!-- Create a Form -->
    <form method="POST">
        <!-- Security token by Django -->
        {% csrf_token %}
        Are you want to delete this item ?
        <input type="submit" value="Yes" />
        <a href="/">Cancel </a>
    </form>
</div>
كل شيء جاهز ، الآن دعنا نتحقق مما إذا كان يعمل أم لا ، قم بزيارة http: // localhost: 8000/2 / delete 
 

django-حذف-عرض

للتحقق من التنفيذ الكامل لعرض الحذف المستند إلى الوظيفة ، قم بزيارة حذف العرض - طرق العرض المستندة إلى الوظيفة Django
<<<<<
<<<<<<<<<<<<<<<<<<<<<<
طرق العرض العامة المستندة إلى الفصل Django (إنشاء ، استرداد ، تحديث ، حذف)
مستوى الصعوبة: أساسي
آخر تحديث: 21 سبتمبر 2021
Django هو إطار عمل ويب قائم على Python يسمح لك بإنشاء تطبيقات الويب بسرعة. يحتوي على واجهة إدارة مدمجة تسهل التعامل معها. غالبًا ما يطلق عليه إطار عمل البطاريات لأنه يوفر تسهيلات مضمنة لكل وظيفة. طرق العرض العامة المستندة إلى الفئة عبارة عن مجموعة متقدمة من طرق العرض المضمنة التي تُستخدم لتنفيذ استراتيجيات العرض الانتقائي مثل الإنشاء والاسترداد والتحديث والحذف. تعمل طرق العرض القائمة على التصنيف على تبسيط الاستخدام عن طريق فصل طلبات GET و POST لعرض ما. لا تحل محل طرق العرض المستندة إلى الوظيفة ، ولكن لها اختلافات ومزايا معينة عند مقارنتها بطرق العرض المستندة إلى الوظيفة:

يمكن معالجة تنظيم الكود المرتبط بطرق HTTP معينة (GET ، POST ، إلخ) بطرق منفصلة بدلاً من التفريع الشرطي.
يمكن استخدام التقنيات الموجهة للكائنات مثل mixins (الوراثة المتعددة) لعامل الكود إلى مكونات قابلة لإعادة الاستخدام.
تدور هذه المقالة حول التنفيذ الكامل لطرق العرض المستندة إلى الفصل في Django (إنشاء ، استرداد ، تحديث ، حذف). دعونا نناقش ما يعنيه في الواقع CRUD ،

مخطط بلا عنوان -316

CreateView - إنشاء أو إضافة إدخالات جديدة في جدول في قاعدة البيانات. 
استرداد طرق العرض - قراءة الإدخالات الموجودة أو استردادها أو البحث عنها أو عرضها كقائمة ( ListView ) أو استرداد إدخال معين بالتفصيل ( DetailView ) 
UpdateView - تحديث أو تحرير الإدخالات الموجودة في جدول في قاعدة البيانات 
DeleteView - حذف أو إلغاء تنشيط أو إزالة الإدخالات الموجودة في جدول في 
FormView قاعدة البيانات - تقديم نموذج إلى قالب ومعالجة البيانات التي أدخلها المستخدم

Django CRUD (إنشاء ، استرداد ، تحديث ، حذف) طرق العرض المستندة إلى الفصل الدراسي
رسم توضيحي لكيفية إنشاء واستخدام طرق عرض CRUD باستخدام مثال. ضع في اعتبارك مشروعًا يسمى geeksforgeeks به تطبيق يسمى geeks.  

راجع المقالات التالية للتحقق من كيفية إنشاء مشروع وتطبيق في Django. 

كيفية إنشاء مشروع أساسي باستخدام MVT في Django؟
كيفية إنشاء تطبيق في Django؟
بعد أن يكون لديك مشروع وتطبيق ، فلنقم بإنشاء نموذج سننشئ منه مثيلات من خلال وجهة نظرنا. في geeks / Models.py ،  

# import the standard Django Model
# from built-in library
from django.db import models
  
# declare a new model with a name "GeeksModel"
class GeeksModel(models.Model):
 
    # fields of the model
    title = models.CharField(max_length = 200)
    description = models.TextField()
 
    # renames the instances of the model
    # with their title name
    def __str__(self):
        return self.title
بعد إنشاء هذا النموذج ، نحتاج إلى تشغيل أمرين من أجل إنشاء قاعدة بيانات لنفسه. 

Python management.py makemigrations 
Python management.py الهجرة
الآن سنقوم بإنشاء Django ModelForm لهذا النموذج. راجع هذه المقالة لمزيد من المعلومات حول modelform - Django ModelForm - إنشاء نموذج من النماذج . إنشاء ملف Forms.py في مجلد geeks ،  


from django import forms
from .models import GeeksModel
 
 
# creating a form
class GeeksForm(forms.ModelForm):
 
    # create meta class
    class Meta:
        # specify model to be used
        model = GeeksModel
 
        # specify fields to be used
        fields = [
            "title",
            "description",
        ]
استخدام طرق العرض المستندة إلى الفئة
يسمح لك العرض المستند إلى الفئة في جوهره بالاستجابة لطرق طلب HTTP المختلفة باستخدام طرق مثيل للفئة المختلفة ، بدلاً من رمز التفرع الشرطي داخل وظيفة عرض واحدة.

إذن ، حيث سيبدو الرمز الخاص بمعالجة HTTP GET في وظيفة العرض كما يلي: 


from django.http import HttpResponse
 
def my_view(request):
    if request.method == 'GET':
        # <view logic>
        return HttpResponse('result')
في العرض المستند إلى الفصل ، سيصبح هذا:


from django.http import HttpResponse
from django.views import View
 
class MyView(View):
    def get(self, request):
        # <view logic>
        return HttpResponse('result')
وبالمثل في urls.py ، يحتاج المرء إلى استخدام طريقة as_view () للتمييز بين العرض المستند إلى الفصل والعرض المستند إلى الوظيفة. 


# urls.py
from django.urls import path
from myapp.views import MyView
 
urlpatterns = [
 
    path('about/', MyView.as_view()),
 
]
CreateView
يشير إنشاء طريقة العرض إلى طريقة عرض (منطق) لإنشاء مثيل لجدول في قاعدة البيانات. لقد ناقشنا بالفعل أساسيات إنشاء عرض في إنشاء عرض - طرق عرض تستند إلى الوظيفة Django. تقوم طرق العرض المستندة إلى الفصل بإعداد كل شيء تلقائيًا من الألف إلى الياء. يحتاج المرء فقط إلى تحديد النموذج الذي سيتم إنشاء طريقة عرض من أجله والحقول. ثم سيحاول CreateView المستند إلى الفصل تلقائيًا العثور على قالب في app_name / modelname_form.html. في حالتنا هو geeks / Templates / geeks / geeksmodel_form.html. دعونا ننشئ وجهة نظرنا القائمة على الفصل. في geeks / views.py ، 


from django.views.generic.edit import CreateView
from .models import GeeksModel
 
class GeeksCreate(CreateView):
 
    # specify the model for create view
    model = GeeksModel
 
    # specify the fields to be displayed
 
    fields = ['title', 'description']
الآن قم بإنشاء مسار url لتعيين العرض. في المهوسون / urls.py ، 


from django.urls import path
 
# importing views from views..py
from .views import GeeksCreate
urlpatterns = [
    path('', GeeksCreate.as_view() ),
]
أنشئ نموذجًا في قوالب / geeks / geeksmodel_form.html ، 


<form method="POST" enctype="multipart/form-data">
 
    <!-- Security token -->
    {% csrf_token %}
 
    <!-- Using the formset -->
    {{ form.as_p }}
     
    <input type="submit" value="Submit">
</form>
دعنا نتحقق مما هو موجود على http: // localhost: 8000 / 

django-create-view-function-based

للتحقق من التنفيذ الكامل لـ CreateView المستند إلى الفصل الدراسي ، قم بزيارة Createview - طرق العرض المستندة إلى الفصل Django . 

استرجاع المشاهدات
عرض القائمة
تشير طريقة عرض القائمة إلى طريقة عرض (منطق) لعرض مثيلات متعددة لجدول في قاعدة البيانات. لقد ناقشنا بالفعل أساسيات عرض القائمة في عرض القائمة - طرق العرض القائمة على الوظيفة Django . تقوم طرق العرض القائمة على الفصل بإعداد كل شيء تلقائيًا من الألف إلى الياء. يحتاج المرء فقط إلى تحديد النموذج الذي سيتم إنشاء ListView له ، ثم سيحاول ListView المستند إلى الفصل تلقائيًا العثور على قالب في app_name / modelname_list.html. في حالتنا هو geeks / Templates / geeks / geeksmodel_list.html. دعونا ننشئ وجهة نظرنا القائمة على الفصل. في geeks / views.py ، 


from django.views.generic.list import ListView
from .models import GeeksModel
 
class GeeksList(ListView):
 
    # specify the model for list view
    model = GeeksModel
الآن قم بإنشاء مسار url لتعيين العرض. في المهوسون / urls.py ، 


from django.urls import path
 
# importing views from views..py
from .views import GeeksList
urlpatterns = [
    path('', GeeksList.as_view()),
]
أنشئ نموذجًا في قوالب / geeks / geeksmodel_list.html ، 


<ul>
    <!-- Iterate over object_list -->
    {% for object in object_list %}
    <!-- Display Objects -->
    <li>{{ object.title }}</li>
    <li>{{ object.description }}</li>
 
    <hr/>
    <!-- If object_list is empty  -->
    {% empty %}
    <li>No objects yet.</li>
    {% endfor %}
</ul>
دعنا نتحقق مما هو موجود على http: // localhost: 8000 / 

django-listview-class-based views

للتحقق من التنفيذ الكامل لـ ListView المستندة إلى الفصل الدراسي ، قم بزيارة ListView - طرق العرض المستندة إلى الفصل Django

عرض التفاصيل
يشير عرض التفاصيل إلى طريقة عرض (منطق) لعرض مثيل واحد من جدول في قاعدة البيانات. لقد ناقشنا بالفعل أساسيات العرض التفصيلي في العرض التفصيلي - طرق العرض المستندة إلى الوظيفة Django . تقوم طرق العرض المستندة إلى الفصل بإعداد كل شيء تلقائيًا من الألف إلى الياء. يحتاج المرء فقط إلى تحديد النموذج الذي سيتم إنشاء DetailView له ، ثم سيحاول DetailView المستند إلى الفصل تلقائيًا العثور على قالب في app_name / modelname_detail.html. في حالتنا هو geeks / Templates / geeks / geeksmodel_detail.html. دعونا ننشئ وجهة نظرنا القائمة على الفصل. في geeks / views.py ، 


from django.views.generic.detail import DetailView
 
from .models import GeeksModel
 
class GeeksDetailView(DetailView):
    # specify the model to use
    model = GeeksModel
الآن قم بإنشاء مسار url لتعيين العرض. في المهوسون / urls.py ، 


from django.urls import path
 
# importing views from views..py
from .views import GeeksDetailView
urlpatterns = [
    # <pk> is identification for id field,
    # slug can also be used
    path('<pk>/', GeeksDetailView.as_view()),
]
أنشئ نموذجًا في قوالب / geeks / geeksmodel_detail.html ، 


<h1>{{ object.title }}</h1>
 
 
 
<p>{{ object.description }}</p>
دعنا نتحقق مما هو موجود على http: // localhost: 8000/1 / 

django التفاصيل

للتحقق من التنفيذ الكامل لـ DetailView المستندة إلى الفصل الدراسي ، قم بزيارة DetailView - Class Based Views Django 

UpdateView
يشير UpdateView إلى طريقة عرض (منطق) لتحديث مثيل معين لجدول من قاعدة البيانات ببعض التفاصيل الإضافية. يتم استخدامه لتحديث المدخلات في قاعدة البيانات على سبيل المثال ، تحديث مقال في geeksforgeeks. لقد ناقشنا بالفعل أساسيات عرض التحديث في عرض التحديث - طرق العرض المستندة إلى الوظيفة Django . تقوم طرق العرض المستندة إلى الفصل بإعداد كل شيء تلقائيًا من الألف إلى الياء. يحتاج المرء فقط إلى تحديد النموذج الذي سيتم إنشاء UpdateView له ، ثم سيحاول UpdateView المستند إلى الفصل تلقائيًا العثور على قالب في app_name / modelname_form.html. في حالتنا هو geeks / Templates / geeks / geeksmodel_form.html. دعونا ننشئ وجهة نظرنا القائمة على الفصل. في geeks / views.py ، 


# import generic UpdateView
from django.views.generic.edit import UpdateView
 
# Relative import of GeeksModel
from .models import GeeksModel
 
class GeeksUpdateView(UpdateView):
    # specify the model you want to use
    model = GeeksModel
 
    # specify the fields
    fields = [
        "title",
        "description"
    ]
 
    # can specify success url
    # url to redirect after successfully
    # updating details
    success_url ="/"
الآن قم بإنشاء مسار url لتعيين العرض. في المهوسون / urls.py ، 


from django.urls import path
 
# importing views from views..py
from .views import GeeksUpdateView
urlpatterns = [
    # <pk> is identification for id field,
    # <slug> can also be used
    path('<pk>/update', GeeksUpdateView.as_view()),
]
أنشئ نموذجًا في قوالب / geeks / geeksmodel_form.html ، 


<form method="post">
    {% csrf_token %}
    {{ form.as_p }}
    <input type="submit" value="Save">
</form>
دعنا نتحقق مما هو موجود على http: // localhost: 8000/1 / update / 

django-updateview-class-based view

للتحقق من التنفيذ الكامل لبرنامج UpdateView المستند إلى الفصل الدراسي ، قم بزيارة UpdateView - طرق العرض المستندة إلى الفصل الدراسي Django . 

DeleteView
حذف طريقة العرض يشير إلى طريقة عرض (منطق) لحذف مثيل معين لجدول من قاعدة البيانات. يتم استخدامه لحذف الإدخالات في قاعدة البيانات على سبيل المثال ، حذف مقال في geeksforgeeks. لقد ناقشنا بالفعل أساسيات حذف العرض في حذف العرض - طرق العرض المستندة إلى الوظيفة Django . تقوم طرق العرض المستندة إلى الفصل بإعداد كل شيء تلقائيًا من الألف إلى الياء. يحتاج المرء فقط إلى تحديد النموذج الذي سيتم إنشاء DeleteView له ، ثم سيحاول DeleteViewde المستند إلى الفصل تلقائيًا العثور على قالب في app_name / modelname_confirm_delete.html. في حالتنا هو geeks / Templates / geeks / geeksmodel_confirm_delete.html. دعونا ننشئ وجهة نظرنا القائمة على الفصل. في geeks / views.py ، 


# import generic UpdateView
from django.views.generic.edit import DeleteView
 
# Relative import of GeeksModel
from .models import GeeksModel
 
class GeeksDeleteView(DeleteView):
    # specify the model you want to use
    model = GeeksModel
     
    # can specify success url
    # url to redirect after successfully
    # deleting object
    success_url ="/"
الآن قم بإنشاء مسار url لتعيين العرض. في المهوسون / urls.py ، 


from django.urls import path
 
# importing views from views..py
from .views import GeeksDeleteView
urlpatterns = [
    # <pk> is identification for id field,
    # slug can also be used
    path('<pk>/delete/', GeeksDeleteView.as_view()),
]
أنشئ نموذجًا في قوالب / geeks / geeksmodel_confirm_delete.html ، 


<form method="post">{% csrf_token %}
     
 
 
<p>Are you sure you want to delete "{{ object }}"?</p>
 
 
 
    <input type="submit" value="Confirm">
</form>
دعنا نتحقق مما هو موجود على http: // localhost: 8000/1 / delete 

django-deleteview-class-based views

للتحقق من التنفيذ الكامل لـ DeleteView المستند إلى الفصل ، قم بزيارة DeleteView - Class Based Views Django

FormView
يشير FormView إلى طريقة عرض (منطق) لعرض نموذج Django والتحقق منه. على سبيل المثال نموذج لتسجيل المستخدمين في geeksforgeeks. تقوم طرق العرض المستندة إلى الفصل بإعداد كل شيء تلقائيًا من الألف إلى الياء. يحتاج المرء فقط إلى تحديد النموذج الذي سيتم إنشاء FormView له و template_name ، ثم يقوم FormView المستند إلى الفصل بعرض هذا النموذج تلقائيًا. دعونا ننشئ وجهة نظرنا القائمة على الفصل. في geeks / views.py ،  


# import generic FormView
from django.views.generic.edit import FormView
 
# Relative import of GeeksForm
from .forms import GeeksForm
 
class GeeksFormView(FormView):
    # specify the Form you want to use
    form_class = GeeksForm
     
    # specify name of template
    template_name = "geeks / geeksmodel_form.html"
 
    # can specify success url
    # url to redirect after successfully
    # updating details
    success_url ="/thanks/"
قم بإنشاء نموذج لهذا العرض في geeks / geeksmodel_form.html ، 


<form method="post">
    {% csrf_token %}
    {{ form.as_p }}
    <input type="submit" value="Save">
</form>
قم بتعيين عنوان url لهذا العرض في geeks / urls.py ، 


from django.urls import path
 
# importing views from views..py
from .views import GeeksFormView
urlpatterns = [
    path('', GeeksFormView.as_view()),
]
الآن قم بزيارة http://127.0.0.1:8000/ ، 

django-create-view-function-based

للتحقق من التنفيذ الكامل لـ FormView المستند إلى الفصل الدراسي ، قم بزيارة FormView - طرق العرض المستندة إلى الفصل Django
 


<<<<<<<<<<<<<<<<<<<<<<
موديلات جانغو
مستوى الصعوبة: متوسط
تاريخ التحديث الأخير: 29 ديسمبر 2019
نموذج Django هو الميزة المضمنة التي يستخدمها Django لإنشاء الجداول وحقولها والقيود المتنوعة. باختصار ، نماذج Django هي SQL لقاعدة البيانات التي يستخدمها المرء مع Django. SQL (لغة الاستعلام الهيكلية) معقدة وتتضمن الكثير من الاستعلامات المختلفة لإنشاء أو حذف أو تحديث أو أي أشياء أخرى متعلقة بقاعدة البيانات. تعمل نماذج Django على تبسيط المهام وتنظيم الجداول في نماذج. بشكل عام ، يتم تعيين كل نموذج إلى جدول قاعدة بيانات واحد.
تدور هذه المقالة حول كيفية استخدام نماذج Django لتخزين البيانات في قاعدة البيانات بشكل ملائم. علاوة على ذلك ، يمكننا استخدام لوحة إدارة Django لإنشاء أو تحديث أو حذف أو استرداد حقول نموذج وعمليات مختلفة مماثلة. توفر نماذج Django البساطة والاتساق والتحكم في الإصدار ومعالجة البيانات الوصفية المتقدمة. تشمل أساسيات النموذج -

كل نموذج هو فئة بايثون تلك الفئات الفرعية django.db.models.Model.
تمثل كل سمة من سمات النموذج حقل قاعدة بيانات.
مع كل هذا ، يمنحك Django واجهة برمجة تطبيقات للوصول إلى قاعدة البيانات يتم إنشاؤها تلقائيًا ؛ انظر جعل الاستفسارات .
مثال -

from django.db import models
  
# Create your models here.
class GeeksModel(models.Model):
    title = models.CharField(max_length = 200)
    description = models.TextField()
يقوم Django بتعيين الحقول المحددة في نماذج Django في حقول جدول قاعدة البيانات كما هو موضح أدناه.
نماذج django

استخدام نماذج Django
لاستخدام نماذج Django ، يحتاج المرء أن يكون لديه مشروع وتطبيق يعمل فيه. بعد بدء تشغيل التطبيق ، يمكنك إنشاء نماذج في app / Models.py. قبل البدء في استخدام النموذج ، دعنا نتحقق من كيفية بدء مشروع وإنشاء تطبيق باسم geeks.py

راجع المقالات التالية للتحقق من كيفية إنشاء مشروع وتطبيق في Django.

كيفية إنشاء مشروع أساسي باستخدام MVT في Django؟
كيفية إنشاء تطبيق في Django؟
إنشاء نموذج
بناء الجملة

من نماذج الاستيراد django.db
        
فئة ModelName (Models.Model):
        اسم_المجال = النماذج. الحقل (** خيارات)
لإنشاء نموذج ، geeks/models.pyأدخل الرمز ،

# import the standard Django Model
# from built-in library
from django.db import models
  
# declare a new model with a name "GeeksModel"
class GeeksModel(models.Model):
        # fields of the model
    title = models.CharField(max_length = 200)
    description = models.TextField()
    last_modified = models.DateTimeField(auto_now_add = True)
    img = models.ImageField(upload_to = "images/")
  
        # renames the instances of the model
        # with their title name
    def __str__(self):
        return self.title
عندما نقوم بإنشاء نموذج أو حذف نموذج أو تحديث أي شيء في أي من نماذج مشروعنا. نحن بحاجة لتشغيل أمرين makemigrationsو migrate. ينشئ makemigrations بشكل أساسي أوامر SQL للتطبيقات المثبتة مسبقًا (والتي يمكن عرضها في التطبيقات المثبتة في settings.py) ونموذج التطبيق الذي تم إنشاؤه حديثًا والذي تضيفه في التطبيقات المثبتة بينما يقوم الترحيل بتنفيذ أوامر SQL هذه في ملف قاعدة البيانات.
لذلك عندما نجري ،

Python manager.py makemigrations
استعلام SQL لإنشاء النموذج أعلاه كجدول يتم إنشاؤه و

Python management.py الهجرة
ينشئ الجدول في قاعدة البيانات.

لقد أنشأنا الآن نموذجًا يمكننا إجراء العديد من العمليات مثل إنشاء صف للجدول أو من حيث إنشاء جانغو لمثيل للنموذج. لمعرفة المزيد ، تفضل بزيارة - نموذج تطبيق Django الأساسي - Makemigrations and Migigration

تقديم نموذج في واجهة إدارة Django
لتقديم نموذج في Django admin ، نحتاج إلى التعديل app/admin.py. انتقل إلى admin.py في تطبيق geeks وأدخل الكود التالي. قم باستيراد النموذج المقابل من Models.py وقم بتسجيله في واجهة الإدارة.

from django.contrib import admin 
    
# Register your models here. 
from .models import GeeksModel 
    
admin.site.register(GeeksModel) 
الآن يمكننا التحقق مما إذا كان النموذج قد تم تقديمه في Django Admin. يمكن استخدام واجهة إدارة Django لتنفيذ CRUD بيانياً (إنشاء ، استرداد ، تحديث ، حذف).
Django-Models-render-admin
للتحقق أكثر من عرض النماذج في django admin ، قم بزيارة - Render Model in Django Admin Interface

Django CRUD - إدخال وتحديث وحذف البيانات
يتيح لنا Django التفاعل مع نماذج قواعد البيانات الخاصة به ، أي إضافة وحذف وتعديل واستعلام الكائنات ، باستخدام واجهة برمجة تطبيقات تجريدية لقواعد البيانات تسمى ORM (مخطط علاقة الكائن). يمكننا الوصول إلى Django ORM عن طريق تشغيل الأمر التالي داخل دليل المشروع الخاص بنا.

python management.py shell
إضافة الأشياء .
لإنشاء كائن من طراز Album وحفظه في قاعدة البيانات ، نحتاج إلى كتابة الأمر التالي:

>>> أ = GeeksModel (
         العنوان = "GeeksForGeeks" ،  
         وصف = "وصف هنا" ،
         img = "geeks / abc.png"
         )
>>> حفظ ()
استرجاع الكائنات
لاسترداد جميع كائنات النموذج ، نكتب الأمر التالي:

>>> GeeksModel.objects.all ()
<QuerySet [<GeeksModel: Divide>، <GeeksModel: Abbey Road>، <GeeksModel: Revolver>]>
تعديل الكائنات الموجودة
يمكننا تعديل كائن موجود على النحو التالي:

>>> أ = GeeksModel.objects.get (معرف = 3)
>>> a.title = "فرقعة"
>>> حفظ ()
حذف الكائنات
لحذف كائن واحد ، نحتاج إلى كتابة الأوامر التالية:

>>> أ = Album.objects.get (معرف = 2)
>>> حذف ()
للتحقق من المنشور التفصيلي لـ ORM (كائن) في Django ، قم بزيارة Django ORM - إدخال ، تحديث وحذف البيانات

التحقق من صحة الحقول في النموذج
عمليات التحقق الميدانية المضمنة في نماذج Django هي عمليات التحقق الافتراضية التي تأتي معرّفة مسبقًا لجميع حقول Django. كل حقل يأتي مع التحقق من صحة مضمنة من مدققي Django. على سبيل المثال ، يأتي IntegerField مصحوبًا بالتحقق المدمج من أنه يمكنه فقط تخزين قيم الأعداد الصحيحة وهذا أيضًا في نطاق معين.
أدخل الكود التالي في models.pyملف تطبيق geeks .

from django.db import models
from django.db.models import Model
# Create your models here.
  
class GeeksModel(Model):
    geeks_field = models.IntegerField()
  
    def __str__(self):
        return self.geeks_field
بعد تشغيل makemigrations والترحيل على Django والتصيير أعلاه ، دعونا نحاول إنشاء مثيل باستخدام سلسلة " GfG is Best ".
المدمج في التحقق من صحة نماذج Django
يمكنك أن ترى في واجهة الإدارة ، لا يمكن إدخال سلسلة في IntegerField. وبالمثل ، فإن كل مجال له عمليات التحقق الخاصة به. لمعرفة المزيد حول عمليات التحقق ، تفضل بزيارة ، عمليات التحقق الميدانية المضمنة - نماذج Django

المزيد عن موديلات Django -
تغيير اسم عرض الكائن باستخدام وظيفة __str__ - نماذج Django
عمليات التحقق الميدانية المخصصة في نماذج Django
Django python manager.py أمر ترحيل
نموذج تطبيق Django - أمر Python manager.py makemigrations
أنواع بيانات نموذج Django وقائمة الحقول
كيفية استخدام خيارات Django الميدانية؟
تجاوز طريقة الحفظ - نماذج Django
أنواع بيانات النموذج الأساسي وقائمة الحقول
أهم جزء في النموذج والجزء الوحيد المطلوب منه هو قائمة حقول قاعدة البيانات التي تحددها. يتم تحديد الحقول بواسطة سمات الفئة. فيما يلي قائمة بجميع أنواع الحقول المستخدمة في Django.

اسم الحقل	وصف
مجال تلقائي	إنه حقل صحيح يزيد تلقائيًا.
BigAutoField	إنه عدد صحيح 64 بت ، يشبه إلى حد كبير AutoField إلا أنه مضمون لاحتواء الأرقام من 1 إلى 9223372036854775807.
BigIntegerField	إنه عدد صحيح 64 بت ، يشبه إلى حد كبير حقل صحيح إلا أنه مضمون لاحتواء الأرقام من -9223372036854775808 إلى 9223372036854775807.
بيناري فيلد	حقل لتخزين البيانات الثنائية الخام.
منطقية	حقل صواب / خطأ.
أداة النموذج الافتراضية لهذا الحقل هي CheckboxInput.
CharField	إنه تاريخ يتم تمثيله في Python بواسطة مثيل datetime.date.
DateField	تاريخ يتم تمثيله في Python بواسطة مثيل datetime.date
يتم استخدامه للتاريخ والوقت ، ويتم تمثيله في Python بواسطة مثيل datetime.datetime.
المجال العشري	إنه رقم عشري ثابت الدقة ، يتم تمثيله في Python بواسطة مثيل عشري.
المدة	حقل لتخزين المدد الزمنية.
حقل البريد الإلكتروني	إنه CharField الذي يتحقق من أن القيمة هي عنوان بريد إلكتروني صالح.
FileField	إنه حقل تحميل ملف.
فلوتفيلد	إنه رقم فاصلة عائمة يتم تمثيله في Python بواسطة مثيل عائم.
حقل الصورة	يرث جميع السمات والأساليب من FileField ، ولكنه يتحقق أيضًا من أن الكائن الذي تم تحميله هو صورة صالحة.
صحيح	إنه حقل عدد صحيح. القيم من -2147483648 إلى 2147483647 آمنة في جميع قواعد البيانات التي يدعمها Django.
GenericIPAddressField	عنوان IPv4 أو IPv6 ، بتنسيق سلسلة (مثل 192.0.2.30 أو 2a02: 42fe :: 4).
حقل NullBooleanField	مثل BooleanField ، لكنه يسمح بـ NULL كأحد الخيارات.
حقل PositiveIntegerField	مثل IntegerField ، لكن يجب أن يكون موجبًا أو صفرًا (0).
حقل ايجابي صغير الحجم	مثل حقل PositiveIntegerField ، ولكنه يسمح فقط بالقيم ضمن نقطة معينة (تعتمد على قاعدة البيانات).
SlugField	سبيكة مصطلح صحيفة. slug عبارة عن تسمية قصيرة لشيء ما ، تحتوي فقط على أحرف أو أرقام أو شرطات سفلية أو واصلات. يتم استخدامها بشكل عام في عناوين URL.
SmallIntegerField	إنه مثل IntegerField ، لكنه يسمح فقط بالقيم تحت نقطة معينة (تعتمد على قاعدة البيانات).
حقل النص	حقل نصي كبير. ودجة النموذج الافتراضية لهذا الحقل هي منطقة النص.
TimeField	وقت يتم تمثيله في Python بواسطة مثيل datetime.time.
URLField	CharField لعنوان URL ، تم التحقق من صحته بواسطة URLValidator.
UUIDField	مجال لتخزين المعرفات الفريدة عالميًا. يستخدم فئة Python UUID. عند استخدامه في PostgreSQL ، يتم تخزينه في نوع بيانات uuid ، أو في حرف (32).
مجالات العلاقة
يحدد Django أيضًا مجموعة من المجالات التي تمثل العلاقات.

اسم الحقل	وصف
مفتاح غريب	علاقة أطراف برأس. يتطلب وسيطين موضعيين: الفئة التي يرتبط بها النموذج وخيار on_delete.
ManyToManyField	علاقة أطراف بأطراف. يتطلب وسيطة موضعية: الفئة التي يرتبط بها النموذج ، والتي تعمل تمامًا كما تعمل مع ForeignKey ، بما في ذلك العلاقات العودية والبطيئة.
OneToOneField	علاقة رأس برأس. من الناحية المفاهيمية ، هذا مشابه لمفتاح خارجي مع فريد = صحيح ، لكن الجانب "العكسي" من العلاقة سيعيد كائنًا واحدًا بشكل مباشر.
خيارات المجال
خيارات الحقل هي الحجج المعطاة لكل حقل لتطبيق بعض القيود أو نقل خاصية معينة إلى حقل معين. على سبيل المثال ، ستؤدي إضافة وسيطة null = Trueإلى CharField إلى تمكينها من تخزين القيم الفارغة لهذا الجدول في قاعدة بيانات علائقية.
فيما يلي خيارات الحقول والسمات التي يمكن أن يستخدمها CharField.

خيارات المجال	وصف
باطل	إذا كان هذا صحيحًا ، فإن Django سيخزن القيم الفارغة على أنها NULL في قاعدة البيانات. الافتراضي هو خطأ .
فارغ	إذا كان صحيحًا ، فيُسمح للحقل أن يكون فارغًا. الافتراضي هو خطأ .
db_column	اسم عمود قاعدة البيانات المراد استخدامه لهذا الحقل. إذا لم يتم تقديم هذا ، فسيستخدم Django اسم الحقل.
تقصير	القيمة الافتراضية للحقل. يمكن أن يكون هذا قيمة أو كائنًا قابلاً للاستدعاء. إذا كان قابلاً للاستدعاء ، فسيتم استدعاؤه في كل مرة يتم فيها إنشاء كائن جديد.
help_text	يتم عرض نص "تعليمات" إضافي مع أداة النموذج. إنه مفيد للتوثيق حتى لو لم يتم استخدام حقلك في نموذج.
المفتاح الأساسي	إذا كانت True ، فهذا الحقل هو المفتاح الأساسي للنموذج.
قابل للتعديل	إذا كان خطأ ، فلن يتم عرض الحقل في المسؤول أو أي نموذج آخر. يتم تخطيها أيضًا أثناء التحقق من صحة النموذج. الافتراضي هو صحيح .
رسائل خاطئة	تتيح لك الوسيطة error_messages تجاوز الرسائل الافتراضية التي سيرفعها الحقل. قم بتمرير قاموس بمفاتيح تطابق رسائل الخطأ التي تريد تجاوزها.
help_text	يتم عرض نص "تعليمات" إضافي مع أداة النموذج. إنه مفيد للتوثيق حتى لو لم يتم استخدام حقلك في نموذج.
مطول	اسم المجال يمكن قراءته. إذا لم يتم إعطاء الاسم المطول ، فسيقوم Django تلقائيًا بإنشائه باستخدام اسم سمة الحقل ، وتحويل الشرطات السفلية إلى مسافات.
المدققين	قائمة المدققين المراد تشغيلهم لهذا الحقل. راجع وثائق المدققين لمزيد من المعلومات.
فريد	إذا كان هذا صحيحًا ، فيجب أن يكون هذا الحقل فريدًا في جميع أنحاء الجدول.

<<<<<<<<<<<<<<<<<<<<<<
Django ORM - إدخال وتحديث وحذف البيانات
مستوى الصعوبة: متوسط
آخر تحديث: 11 فبراير 2020
المتطلبات المسبقة: نماذج Django

يتيح لنا Django التفاعل مع نماذج قواعد البيانات الخاصة به ، أي إضافة وحذف وتعديل واستعلام الكائنات ، باستخدام واجهة برمجة تطبيقات تجريدية لقواعد البيانات تسمى ORM (مخطط علاقة الكائن). تتناول هذه المقالة جميع العمليات المفيدة التي يمكننا إجراؤها باستخدام Django ORM.

لأغراض العرض ، سوف نستخدم نماذج Django التالية.

class Album(models.Model):
    title = models.CharField(max_length = 30)
    artist = models.CharField(max_length = 30)
    genre = models.CharField(max_length = 30)
  
    def __str__(self):
        return self.title
  
class Song(models.Model):
    name = models.CharField(max_length = 100)
    album = models.ForeignKey(Album, on_delete = models.CASCADE)
  
    def __str__(self):
        return self.name
يمكننا الوصول إلى Django ORM عن طريق تشغيل الأمر التالي داخل دليل المشروع الخاص بنا.

python manage.py shell
هذا يقودنا إلى وحدة تحكم بايثون التفاعلية. بافتراض وجود نماذجنا ، myProject/albums/models.pyيمكننا استيراد نماذجنا باستخدام الأمر التالي:

>>> من Books.models استيراد الأغاني والألبوم
إضافة الأشياء
لإنشاء كائن من طراز Album وحفظه في قاعدة البيانات ، نحتاج إلى كتابة الأمر التالي:

>>> a = الألبوم (العنوان = "Divide" ، الفنان = "Ed Sheeran" ، النوع = "Pop")
 >>> a.save ()
لإنشاء كائن من نموذج Song وحفظه في قاعدة البيانات ، نحتاج إلى كتابة الأمر التالي:

>>> s = Song (name = "Castle on the Hill" ، الألبوم = أ)
 >>> s.save ()
استرجاع الأشياء
دعونا نضيف 2 المزيد من سجلات الألبومات من أجل العرض التوضيحي.

>>> a = Album (title = "Abbey Road"، artist = "The Beatles"، genre = "Rock")
 >>> a.save ()
 >>> a = Album (title = "Revolver"، artist = "البيتلز" ، النوع = "روك")
 >>> a.save ()
لاسترداد جميع كائنات النموذج ، نكتب الأمر التالي:

>>> Album.objects.all ()
<QuerySet [<Album: Divide>، <Album: Abbey Road>، <Album: Revolver>]>
الإخراج هو QuerySet ، أو مجموعة من الكائنات التي تطابق الاستعلام. لاحظ أن الاسم المطبوع هو ناتج __str__()الوظيفة.

يمكننا أيضًا تصفية الاستعلامات باستخدام الوظائف filter()و exclude(). get()تقوم filter()الدالة بإرجاع QuerySet الذي يحتوي على كائنات تطابق معلمات البحث المحددة.

>>> Album.objects.filter (الفنان = "فرقة البيتلز")
<QuerySet [<Album: Abbey Road>، <Album: Revolver>]>
تقوم exclude()الدالة بإرجاع QuerySet الذي يحتوي على كائنات غير تلك التي تطابق معلمات البحث المحددة.

>>> Album.objects.exclude (النوع = "موسيقى الروك")
<QuerySet [<Album: Divide>]>
ترجع get()الدالة كائنًا واحدًا يطابق معلمة البحث المحددة. يعطي خطأ عندما يقوم الاستعلام بإرجاع كائنات متعددة.

>>> Album.objects.get (pk = 3)
<QuerySet [<Album: Revolver>]>
تعديل الكائنات الموجودة
يمكننا تعديل كائن موجود على النحو التالي:

>>> a = Album.objects.get (pk = 3)
 >>> a.genre = "Pop"
 >>> a.save ()
حذف الأشياء
لحذف كائن واحد ، نحتاج إلى كتابة الأوامر التالية:

>>> a = Album.objects.get (pk = 2)
 >>> a.delete ()
 >>> Album.objects.all ()
<QuerySet [<Album: Divide>، <Album: Revolver>]>
لحذف كائنات متعددة ، يمكننا استخدام filter()أو exclude()وظائف على النحو التالي:

>>> Album.objects.filter (genre = "Pop"). delete ()
 >>> Album.objects.all ()
<QuerySet []>

<<<<<<<<<<<<<<<<<<<<<<
نموذج تطبيق Django الأساسي - عمليات الترحيل والترحيل
مستوى الصعوبة: متوسط
آخر تحديث: 11 فبراير 2020
في هذه المقالة ، سننشئ نموذجًا أساسيًا للتطبيق. لنفترض أن لدينا مشروع geeksforgeeks حيث سننشئ تطبيقًا جديدًا من أجل تبسيط وإنشاء وحدات نموذجية مستقلة.

لإنشاء أمر تشغيل التطبيق من خلال Terminal:

python manager.py startapp geeks
وأضف المهوسون إلى قائمة INSTALLED_APPS في settings.py. الآن ستكون بنية دليل التطبيق ،

تطبيق Django-Basic-App-Model-Makemigrations-and-Migrate

انتقل الآن إلى models.py تطبيق geeks ، هنا سننشئ نموذجنا الأول. لإنشاء نموذج ، يجب عليك أولاً استيراد النموذج من django.db.modelsالمكتبة.

الآن ستبدو نماذج .py مثل ،

# importing Model from django
from django.db.models import Model
وفقًا لوثائق Django ، فإن النموذج هو المصدر الوحيد والنهائي للمعلومات حول بياناتك. يحتوي على الحقول الأساسية وسلوكيات البيانات التي تقوم بتخزينها. بشكل عام ، يتم تعيين كل نموذج إلى جدول قاعدة بيانات واحد.

يوفر Django عددًا من الحقول والطرق المحددة مسبقًا لإنشاء نموذج. لإنشاء نموذج ، يجب تحديد اسم النموذج أولاً.

أدخل الرمز التالي فيmodels.py

from django.db import models
from django.db.models import Model
# Created an empty model 
class GeeksModel(Model):
    pass
ستُستخدم الصيغة المماثلة دائمًا لإنشاء نموذج.
بعد إجراء أي تغيير في أي ملف من ملفات نماذج التطبيق ، يلزمك تشغيل الأمر التالي من الجهاز

Python manager.py makemigrations
بعد هذا الأمر ، قم بتشغيل الأمر التالي لتنفيذ تغييرات قاعدة البيانات وفقًا لذلك

Python management.py الهجرة
بعد تشغيل عمليات الترحيل makemigrations والترحيل ، سيتم إنشاء جدول جديد في قاعدة البيانات. يمكنك التحقق من ذلك من geeks -> makemigrations -> 0001_initial.py.

# Generated by Django 2.2.5 on 2019-09-25 06:00
  
from django.db import migrations, models
  
  
class Migration(migrations.Migration):
    initial = True
  
    dependencies = []
  
    operations = [
        migrations.CreateModel(
            name ='GeeksModel',
            fields =[
                ('id', models.AutoField(auto_created = True,
                  primary_key = True, serialize = False,
                  verbose_name ='ID')),], ),
    ]
دعونا نفهم بوضوح ما تفعله الهجرات القديمة والهجرة.

الهجرات -
تُنشئ عمليات الترحيل بشكل أساسي أوامر SQL للتطبيقات المثبتة مسبقًا (والتي يمكن عرضها في التطبيقات المثبتة في settings.py) ونموذج التطبيقات التي تم إنشاؤها حديثًا والتي تضيفها في التطبيقات المثبتة. لا يقوم بتنفيذ تلك الأوامر في ملف قاعدة البيانات الخاصة بك. لذلك لا يتم إنشاء الجداول بعد الهجرة.

بعد تطبيق عمليات الترحيل ، يمكنك رؤية أوامر SQL هذه باستخدام sqlmigrate والتي تعرض جميع أوامر SQL التي تم إنشاؤها بواسطة عمليات الترحيل. للتحقق من المزيد حول makemigrations ، تفضل بزيارة - Django App Model - Python manager.py makemigrations command

يهاجر -
يقوم الترحيل بتنفيذ أوامر SQL هذه في ملف قاعدة البيانات. لذلك بعد تنفيذ الترحيل ، يتم إنشاء جميع جداول التطبيقات المثبتة في ملف قاعدة البيانات.

يمكنك تأكيد ذلك عن طريق تثبيت متصفح sqlite وفتحه db.sqlite3يمكنك رؤية جميع الجداول تظهر في ملف قاعدة البيانات بعد تنفيذ أمر الترحيل. للتحقق من المزيد حول makemigrations ، قم بزيارة Django manager.py migrate command | بايثون



<<<<<<<<<<<<<<<<<<<<<<

<<<<<<<<<<<<<<<<<<<<<<
Python JSON
مستوى الصعوبة: أساسي
آخر تحديث: 09 ديسمبر 2020
JSON JavaScript Object Notation هو تنسيق لهيكلة البيانات. يستخدم بشكل أساسي لتخزين ونقل البيانات بين المتصفح والخادم. تدعم Python أيضًا JSON مع حزمة مضمنة تسمى json. توفر هذه الحزمة جميع الأدوات اللازمة للعمل مع كائنات JSON بما في ذلك التحليل والتسلسل وإلغاء التسلسل وغير ذلك الكثير. دعونا نرى مثالًا بسيطًا حيث نقوم بتحويل كائنات JSON إلى كائنات Python والعكس صحيح.

مثال:


import json
  
# JSON string
employee = '{"id":"09", "name": "Nitin", "department":"Finance"}'
  
# Convert string to Python dict
employee_dict = json.loads(employee)
print(employee_dict)
print(type(employee_dict))
print("\n")
  
# Convert Python dict to JSON
json_object = json.dumps(employee_dict, indent=4)
print(json_object)
print(type(json_object))
انتاج:

{'id': '09'، 'name': 'Nitin'، 'department': 'Finance'}
<فئة 'ديكت'>


{
    "المعرف": "09"،
    "الاسم": "نيتين"،
    "القسم": "المالية"
}
<class 'str'>
سيساعدك هذا البرنامج التعليمي JSON على تعلم عمل JSON مع Python من الأساسيات إلى الأمام ، مثل تحليل JSON والقراءة والكتابة إلى ملف JSON والتسلسل وإلغاء تسلسل JSON باستخدام مجموعة ضخمة من برامج JSON.



مقدمة
ما هو JSON؟
أنواع البيانات في JSON
العمل مع بيانات JSON في بايثون
قراءة وكتابة وتحليل JSON باستخدام Python
القراءة والكتابة JSON
قراءة وكتابة JSON إلى ملف في Python
اقرأ ملف JSON باستخدام Python
إلحاق ملف JSON باستخدام Python
تحليل JSON
كيفية تحليل البيانات من JSON إلى Python؟
كيفية تحويل قاموس Python إلى JSON؟
؛ Python - تحويل JSON إلى سلسلة
طرق لتحويل سلسلة إلى كائن json
تحويل بيانات JSON إلى كائن Python مخصص
مسلسل JSON وإلغاء تسلسله
تسلسل JSON في Python
json.dump () في بايثون
json.dumps () في بايثون
Python - الفرق بين json.dump () و json.dumps ()
قم بإلغاء تسلسل JSON للاعتراض في Python
json.load () في بايثون
json.loads () في بايثون
الفرق بين json.load () و json.loads ()
ترميز وفك تشفير الكائنات المخصصة في Python-JSON
تسلسل JSON المركب وإلغاء تسلسله في Python
التحويل بين JSON
بايثون - JSON إلى XML
Python - XML ​​إلى JSON
تحويل CSV إلى JSON باستخدام Python
تحويل ملفات JSON متعددة إلى CSV Python
تحويل ملف نصي إلى JSON في بايثون
حفظ النص و JSON و CSV في ملف في بايثون
المزيد من العمليات JSON
تنسيق JSON في Python
Pretty Print JSON في بايثون
تسطيح كائنات JSON في بايثون
تحقق مما إذا كانت السلسلة صالحة json أم لا
فرز JSON حسب القيمة



<<<<<<<<<<<<<<<<<<<<<<
العمل مع بيانات JSON في بايثون
مستوى الصعوبة: سهل
آخر تحديث: 18 تشرين الثاني (نوفمبر) 2021
مقدمة عن JSON في بايثون: 

الشكل الكامل لـ JSON هو JavaScript Object Notation. هذا يعني أن ملفًا نصيًا (قابل للتنفيذ) يتكون من نص بلغة برمجة ، يتم استخدامه لتخزين البيانات ونقلها. تدعم Python JSON من خلال حزمة مضمنة تسمى JSON. لاستخدام هذه الميزة ، نقوم باستيراد حزمة JSON في نص Python. يتم تنفيذ النص في JSON من خلال سلسلة مقتبسة تحتوي على القيمة في تعيين قيمة المفتاح داخل {}. إنه مشابه للقاموس في بايثون. يُظهر JSON واجهة برمجة تطبيقات مشابهة لمستخدمي وحدات تنظيم المكتبة القياسية ووحدات المخلل ، ويدعم Python في الأصل ميزات JSON. علي سبيل المثال  

# Python program showing
# use of json package
 
import json
 
# {key:value mapping}
a ={"name":"John",
   "age":31,
    "Salary":25000}
 
# conversion to JSON done by dumps() function
 b = json.dumps(a)
 
# printing the output
print(b)
انتاج: 

{"العمر": 31 ، "الراتب": 25000 ، "الاسم": "جون"}
كما ترى ، يدعم JSON الأنواع الأولية ، مثل السلاسل والأرقام ، بالإضافة إلى القوائم المتداخلة والمجموعات والعناصر  

# Python program showing that
# json support different primitive
# types
 
import json
 
# list conversion to Array
print(json.dumps(['Welcome', "to", "GeeksforGeeks"]))
 
# tuple conversion to Array
print(json.dumps(("Welcome", "to", "GeeksforGeeks")))
 
# string conversion to String
print(json.dumps("Hi"))
 
# int conversion to Number
print(json.dumps(123))
 
# float conversion to Number
print(json.dumps(23.572))
 
# Boolean conversion to their respective values
print(json.dumps(True))
print(json.dumps(False))
 
# None value to null
print(json.dumps(None))
انتاج: 

["مرحبًا" ، "في" ، "GeeksforGeeks"]
["مرحبًا" ، "في" ، "GeeksforGeeks"]
"أهلا"
123
23.572
صحيح
خاطئة
باطل
تسلسل JSON: 
عادة ما تسمى عملية ترميز JSON التسلسل . يشير هذا المصطلح إلى تحويل البيانات إلى سلسلة من البايتات (ومن ثم تسلسلي) ليتم تخزينها أو نقلها عبر الشبكة. للتعامل مع تدفق البيانات في ملف ما ، تستخدم مكتبة JSON في Python وظيفة التفريغ () لتحويل كائنات Python إلى كائن JSON الخاص بها ، بحيث يسهل كتابة البيانات إلى الملفات. انظر الجدول التالي أدناه.  

كائن بايثون	كائن JSON
قاموس	هدف
list ، tuple	مجموعة مصفوفة
شارع	سلسلة
كثافة العمليات طويلة تطفو	أعداد
صحيح	صحيح
خطأ شنيع	خاطئة
لا أحد	باطل
مثال على التسلسل: 
ضع في اعتبارك المثال المعطى لكائن بايثون.

var = {
      "Subjects": {
                  "Maths":85,
                  "Physics":90
                   }
      }
باستخدام مدير سياق Python ، أنشئ ملفًا باسم Sample.json وافتحه بوضع الكتابة. 

with open("Sample.json", "w") as p:
     json.dump(var, p)
هنا ، يأخذ التفريغ () وسيطتين أولاً ، كائن البيانات المراد تسلسله ، وثانيًا الكائن الذي سيتم كتابته (تنسيق بايت). 

إلغاء تسلسل JSON: 
إلغاء التسلسل هو عكس التسلسل ، أي تحويل كائنات JSON إلى كائنات Python الخاصة بها. يتم استخدام طريقة الحمل () لذلك. إذا كنت قد استخدمت بيانات JSON من برنامج آخر أو حصلت عليها كتنسيق سلسلة من JSON ، فيمكن فك تسلسلها بسهولة باستخدام load () ، والذي يستخدم عادةً للتحميل من سلسلة ، وإلا فسيكون الكائن الجذر في قائمة أو . 

with open("Sample.json", "r") as read_it:
     data = json.load(read_it)
مثال على إلغاء التسلسل: 
json_var ="""
{
    "Country": {
        "name": "INDIA",
        "Languages_spoken": [
            {
                "names": ["Hindi", "English", "Bengali", "Telugu"]
            }
        ]
    }
}
"""
var = json.loads(json_var)
الترميز وفك التشفير: 
يُعرّف الترميز بأنه تحويل النص أو القيم إلى نموذج مشفر لا يمكن استخدامه إلا من قبل المستخدم المطلوب من خلال فك تشفيره. هنا يتم إجراء التشفير وفك التشفير لتنسيق JSON (كائن). يُعرف التشفير أيضًا باسم التسلسل ويعرف فك التشفير بإلغاء التسلسل. لدى Python حزمة شائعة لهذه العملية. تُعرف هذه الحزمة باسم Demjson . لتثبيته اتبع الخطوات أدناه. 

للنوافذ: 

نقطة تثبيت demjson
لأوبونتو:

sudo apt-get update
 sudo apt-get install python-demjson
التشفير : تُستخدم الدالة encode () لتحويل كائن python إلى تمثيل سلسلة JSON. 

بناء الجملة:  demjson.encode (self، obj، nest_level = 0) 

مثال 1: التشفير باستخدام حزمة demjson. 

# storing marks of 3 subjects
var = [{"Math": 50, "physics":60, "Chemistry":70}]
print(demjson.encode(var))
انتاج: 

 
[{"الكيمياء": 70 ، "الرياضيات": 50 ، "الفيزياء": 60}]
فك التشفير : تُستخدم وظيفة decode () لتحويل كائن JSON إلى نوع تنسيق Python. 

بناء الجملة: demjson.decode (self، obj)

مثال 2: فك التشفير باستخدام حزمة demjson 

var = '{"a":0, "b":1, "c":2, "d":3, "e":4}'
text = demjson.decode(var)
انتاج: 

{'a': 0، 'b': 1، 'c': 2، 'd': 3، 'e': 4}
مثال 3: الترميز باستخدام حزمة iterencode  

# Other Method of Encoding
json.JSONEncoder().encode({"foo": ["bar"]})
'{"foo": ["bar"]}'
 
# Using iterencode(object) to encode a given object.
for i in json.JSONEncoder().iterencode(bigobject):
    mysocket.write(i)
مثال 4: التشفير وفك التشفير باستخدام عمليات التفريغ () والأحمال ().

# To encode and decode operations
import json
var = {'age':31, 'height'= 6}
x = json.dumps(var)
y = json.loads(var)
print(x)
print(y)
 
# when performing from a file in disk
with open("any_file.json", "r") as readit:
    x = json.load(readit)
print(x)
استخدام سطر الأوامر
يمكن أيضًا استخدام مكتبة JSON من سطر الأوامر ، للتحقق من صحة JSON وطباعتها.

$ صدى "{\" name \ ": \" مونتي \ "، \" العمر \ ": 45}"


البحث من خلال JSON باستخدام JMESPath
JMESPath هي لغة استعلام لـ JSON. يتيح لك الحصول بسهولة على البيانات التي تحتاجها من مستند JSON. إذا سبق لك العمل مع JSON من قبل ، فمن المحتمل أنك تعلم أنه من السهل الحصول على قيمة متداخلة. على سبيل المثال ، ستحصل على doc ["شخص"] ["عمر"] القيمة المتداخلة للعمر في المستند.

أولاً ، قم بتثبيت jmespath: 

pip3 $ قم بتثبيت jmespath

$ pip3 install jmespath

مثال من العالم الحقيقي: 
دعونا نأخذ مثالًا واقعيًا لتطبيق JSON في لغة الثعبان. مصدر جيد لأغراض التدريب هو JSON_placeholder ، فهو يوفر حزمة طلبات واجهة برمجة تطبيقات رائعة سنستخدمها في مثالنا. للبدء ، اتبع هذه الخطوات البسيطة. افتح Python IDE أو CLI وأنشئ ملف نصي جديدًا ، وقم بتسميته sample.py. 

import requests
import json
 
# Now we have to request our JSON data through
# the API package
res = requests.get("https://jsonplaceholder.typicode.com / todos")
var = json.loads(res.text)
 
# To view your Json data, type var and hit enter
var
 
# Now our Goal is to find the User who have
# maximum completed their task !!
# i.e we would count the True value of a
# User in completed key.
# {
    # "userId": 1,
    # "id": 1,
    # "title": "Hey",
    # "completed": false,  # we will count
                           # this for a user.
# }
 
# Note that there are multiple users with
# unique id, and their task have respective
# Boolean Values.
 
def find(todo):
    check = todo["completed"]
    max_var = todo["userId"] in users
    return check and max_var
 
# To find the values.
 
Value = list(filter(find, todos))
 
# To write these value to your disk
 
with open("sample.json", "w") as data:
    Value = list(filter(keep, todos))
    json.dump(Value, data, indent = 2)
لمعرفة المزيد ، انقر هنا



<<<<<<<<<<<<<<<<<<<<<<
قراءة وكتابة وتحليل JSON باستخدام Python
مستوى الصعوبة: صعب
آخر تحديث: 18 أغسطس 2021
JSON هو تنسيق بيانات خفيف الوزن لتبادل البيانات والتي يمكن قراءتها وكتابتها بسهولة من قبل البشر ، وتحليلها بسهولة وتوليدها بواسطة الآلات. إنه تنسيق نصي كامل مستقل عن اللغة. للعمل مع بيانات JSON ، تحتوي Python على حزمة مضمنة تسمى json.
 

مثال: 
s = '{"id": 01، "name": "Emily"، "language": ["C ++"، "Python"]}'
يعتبر بناء جملة JSON مجموعة فرعية من بناء جملة JavaScript بما في ذلك ما يلي:

أزواج الاسم / القيمة: تمثل البيانات ، ويتبع الاسم بـ ":" (نقطتان) وأزواج الاسم / القيمة مفصولة بفاصلة (فاصلة).
الأقواس المتعرجة: تحمل الأشياء.
الأقواس المربعة: قم بتثبيت المصفوفات ذات القيم المفصولة بفاصلة ، (فاصلة).
يجب أن تكون المفاتيح / الاسم سلاسل بها علامات اقتباس مزدوجة ويجب أن تكون القيم من أنواع البيانات بين ما يلي: 
 

سلسلة
رقم
كائن (كائن JSON)
مجموعة مصفوفة
قيمة منطقية
باطل
مثال:
 {
   "الموظف": [

      {
         "المعرف": "01"،
         "الاسم": "أميت" ،
         "القسم": "المبيعات"
      } ،

      {
         "المعرف": "04"،
         "الاسم": "سونيل"،
         "القسم": "الموارد البشرية"
      }
   ]
}
تحليل JSON (تحويل من JSON إلى Python)
يمكن للطريقة json.loads () تحليل سلسلة json وستكون النتيجة قاموس Python.
بناء الجملة:

json.loads (json_string)
مثال:


# Python program to convert JSON to Python
  
  
import json
  
# JSON string
employee ='{"id":"09", "name": "Nitin", "department":"Finance"}'
  
# Convert string to Python dict
employee_dict = json.loads(employee)
print(employee_dict)
  
print(employee_dict['name'])
انتاج:
 

{'id': '09'، 'department': 'Finance'، 'name': 'Nitin'}
نيتين
قرأ Python ملف JSON
يمكن للطريقة json.load () قراءة ملف يحتوي على كائن JSON. ضع في اعتبارك ملفًا يسمى Employ.json يحتوي على كائن JSON.
بناء الجملة:

json.load (file_object)
مثال: لنفترض أن JSON يبدو هكذا.

pyhton-append-json1

نريد قراءة محتوى هذا الملف. أدناه هو التنفيذ.

# Python program to read
# json file
   
   
import json
   
# Opening JSON file
f = open('data.json',)
   
# returns JSON object as 
# a dictionary
data = json.load(f)
   
# Iterating through the json
# list
for i in data['emp_details']:
    print(i)
   
# Closing file
f.close()
انتاج:

python-read-json-output1

هنا ، استخدمنا الوظيفة open () لقراءة ملف JSON. بعد ذلك ، يتم تحليل الملف باستخدام طريقة json.load () التي تعطينا قاموسًا باسم data.

تحويل من Python إلى JSON
يمكن للطريقة json.dumps () تحويل كائن Python إلى سلسلة JSON. 
بناء الجملة:

json.dumps (ديكت ، مسافة بادئة)
يتطلب معلمتين:

القاموس - اسم القاموس الذي يجب تحويله إلى كائن JSON.
مسافة بادئة - تحدد عدد وحدات المسافة البادئة
مثال:
 


# Python program to convert
# Python to JSON
   
   
import json
   
# Data to be written
dictionary ={
  "id": "04",
  "name": "sunil",
  "department": "HR"
}
   
# Serializing json 
json_object = json.dumps(dictionary, indent = 4)
print(json_object)
انتاج |
{
    "المعرف": "04"،
    "الاسم": "سونيل"،
    "القسم": "الموارد البشرية"
}
انتاج:
 

{
    "depatment": "HR"،
    "المعرف": "04"،
    "الاسم": "سونيل"
}
يمكن تحويل الأنواع التالية من كائنات Python إلى سلاسل JSON: 
 

قاموس
قائمة
tuple
سلسلة
int
يطفو
صحيح
خطأ شنيع
لا أحد
كائنات Python وتحويلها المكافئ إلى JSON:

بايثون	ما يعادل JSON
قاموس	هدف
list ، tuple	مجموعة مصفوفة
شارع	سلسلة
int ، تعويم	رقم
صحيح	صحيح
خطأ شنيع	خاطئة
لا أحد	باطل
كتابة JSON في ملف
يمكن استخدام طريقة json.dump () للكتابة إلى ملف JSON.
بناء الجملة:

json.dump (ديكت ، file_pointer)
يستغرق 2 معلمات:

القاموس - اسم القاموس الذي يجب تحويله إلى كائن JSON.
مؤشر الملف - مؤشر الملف المفتوح في وضع الكتابة أو الإلحاق.
# Python program to write JSON
# to a file
   
   
import json
   
# Data to be written
dictionary ={
    "name" : "sathiyajith",
    "rollno" : 56,
    "cgpa" : 8.6,
    "phonenumber" : "9976770500"
}
   
with open("sample.json", "w") as outfile:
    json.dump(dictionary, outfile)
انتاج:

python-json-write-to-file

يفتح البرنامج أعلاه ملفًا باسم sample.json في وضع الكتابة باستخدام "w". سيتم إنشاء الملف إذا لم يكن موجودًا. سيحول Json.dump () القاموس إلى سلسلة JSON وسيتم حفظه في ملف sample.json.


<<<<<<<<<<<<<<<<<<<<<<
إلحاق ملف JSON باستخدام Python
مستوى الصعوبة: سهل
آخر تحديث: 31 أغسطس 2021
الشكل الكامل لـ JSON هو JavaScript Object Notation. هذا يعني أن ملفًا نصيًا (قابل للتنفيذ) يتكون من نص بلغة برمجة ، يتم استخدامه لتخزين البيانات ونقلها. تدعم Python JSON من خلال حزمة مضمنة تسمى JSON. لاستخدام هذه الميزة ، نقوم باستيراد حزمة JSON في نص Python. يتم تنفيذ النص في JSON من خلال سلسلة مقتبسة تحتوي على القيمة في تعيين قيمة المفتاح داخل {}. 
 

الوظائف المستخدمة: 
 
json.loads (): الدالة json.loads () موجودة في وحدة "json" المدمجة في Python. تُستخدم هذه الوظيفة لتحليل سلسلة JSON.
 
بناء الجملة: json.loads (json_string)
المعلمة: تأخذ سلسلة JSON كمعامل.
نوع الإرجاع: يقوم بإرجاع كائن قاموس Python. 
 

 

json.dumps (): الدالة json.dumps () موجودة في وحدة "json" المضمنة في Python. تُستخدم هذه الوظيفة لتحويل كائن Python إلى سلسلة JSON.
 
بناء الجملة: json.dumps (object)
Parameter: يأخذ Python Object كمعامل.
نوع الإرجاع: تقوم بإرجاع سلسلة JSON. 
 

 

update (): تقوم هذه الطريقة بتحديث القاموس بعناصر من كائن قاموس آخر أو من زوج مفتاح / قيمة قابل للتكرار.
 
بناء الجملة : ict.update ([آخر])
المعلمات: يأخذ قاموسًا آخر أو زوجًا من المفاتيح / القيمة القابل للتكرار.
نوع الإرجاع: إرجاع لا شيء. 
 

 

مثال 1: تحديث سلسلة JSON.
  

# Python program to update
# JSON
 
 
import json
  
# JSON data:
x =  '{ "organization":"GeeksForGeeks",
        "city":"Noida",
        "country":"India"}'
 
# python object to be appended
y = {"pin":110096}
 
# parsing JSON string:
z = json.loads(x)
  
# appending the data
z.update(y)
 
# the result is a JSON string:
print(json.dumps(z))
انتاج:
 

{“pin”: 110096، “Organization”: “GeeksForGeeks”، “country”: “India”، “city”: “Noida”} 
 

مثال 2: تحديث ملف JSON. لنفترض أن ملف JSON يبدو هكذا.
 

python-json

نريد إضافة بيانات JSON أخرى بعد emp_details . أدناه هو التنفيذ.


# Python program to update
# JSON
 
 
import json
 
 
# function to add to JSON
def write_json(new_data, filename='data.json'):
    with open(filename,'r+') as file:
          # First we load existing data into a dict.
        file_data = json.load(file)
        # Join new_data with file_data inside emp_details
        file_data["emp_details"].append(new_data)
        # Sets file's current position at offset.
        file.seek(0)
        # convert back to json.
        json.dump(file_data, file, indent = 4)
 
    # python object to be appended
y = {"emp_name":"Nikhil",
     "email": "nikhil@geeksforgeeks.org",
     "job_profile": "Full Time"
    }
     
write_json(y)
انتاج:
 
<<<<<<<<<<<<<<<<<<<<<<
تسلسل بيانات JSON في Python
مستوى الصعوبة: أساسي
آخر تحديث: 26 نوفمبر 2020
التسلسل هو عملية ترميز من نوع بيانات ساذج إلى تنسيق JSON. تقوم وحدة Python module json بتحويل كائن قاموس Python إلى كائن JSON ، ويتم تحويل list و tuple إلى مصفوفة JSON ، وتحويل int و float كرقم JSON ، ولا يتم تحويل أي شيء إلى JSON فارغ. 



دعنا نلقي نظرة على كيفية إجراء تسلسل لبيانات Python إلى تنسيق JSON باستخدام هذه الطرق:

أحمق().
مقالب ().
json.dump ()
يمكن استخدام طريقة json.dump () للكتابة إلى ملف JSON. اكتب البيانات إلى كائن يشبه الملف بتنسيق json.

بناء الجملة: json.dump (dict، file_pointer)

حدود:

القاموس - اسم القاموس الذي يجب تحويله إلى كائن JSON.
مؤشر الملف - مؤشر الملف المفتوح في وضع الكتابة أو الإلحاق.
أدناه هو التنفيذ:

تحويل كائن python والكتابة إلى ملف json.

# import module
import json
  
# Data to be written
data = {
    "user": {
        "name": "satyam kumar",
        "age": 21,
        "Place": "Patna",
        "Blood group": "O+"
    }
}
  
# Serializing json and 
# Writing json file
with open( "datafile.json" , "w" ) as write:
    json.dump( data , write )
انتاج:


data_file.json

json.dumps ()
يمكن للطريقة json.dumps () تحويل كائن Python إلى سلسلة JSON.

بناء الجملة: json.dumps (dict)

حدود:

القاموس - اسم القاموس الذي يجب تحويله إلى كائن JSON.
أدناه هو التنفيذ:

تحويل كائن python إلى سلسلة json.

# import module
import json
  
# Data to be written 
data = {
    "user": {
        "name": "satyam kumar",
        "age": 21,
        "Place": "Patna",
        "Blood group": "O+"
    }
}
  
# Serializing json
res = json.dumps( data )
print( res )
انتاج:


<<<<<<<<<<<<<<<<<<<<<<
قم بإلغاء تسلسل JSON للاعتراض في Python
تاريخ التحديث الأخير: 07 يوليو 2021
دعونا نرى كيفية إلغاء تسلسل مستند JSON إلى كائن Python. إلغاء التسلسل هو عملية فك تشفير البيانات الموجودة بتنسيق JSON إلى نوع بيانات أصلي. في لغة Python ، يقوم إلغاء التسلسل بفك تشفير بيانات JSON إلى قاموس (نوع البيانات في لغة python).
سنستخدم هذه الطرق لوحدة json لأداء هذه المهمة: 
 

loads () : لإلغاء تسلسل مستند JSON إلى كائن Python.
load () : لإلغاء تسلسل دفق بتنسيق JSON (والذي يدعم القراءة من ملف) إلى كائن Python.
مثال 1: استخدام دالة loads (). 
 


# importing the module
import json
 
# creating the JSON data as a string
data = '{"Name" : "Romy", "Gender" : "Female"}'
 
print("Datatype before deserialization : "
      + str(type(data)))
  
# deserializing the data
data = json.loads(data)
 
print("Datatype after deserialization : "
      + str(type(data)))
انتاج : 
 

نوع البيانات قبل إلغاء التسلسل:
نوع البيانات بعد إلغاء التسلسل:
مثال 2: استخدام دالة load (). يتعين علينا إلغاء تسلسل ملف باسم file.json. 
 



 


# importing the module
import json
 
# opening the JSON file
data = open('file.json',)
 
print("Datatype before deserialization : "
      + str(type(data)))
    
# deserializing the data
data = json.load(data)
 
print("Datatype after deserialization : "
      + str(type(data)))
انتاج : 
 

نوع البيانات قبل إلغاء التسلسل:
نوع البيانات بعد إلغاء التسلسل:
 
<<<<<<<<<<<<<<<<<<<<<<
العمل مع ملفات csv في بايثون
مستوى الصعوبة: متوسط
آخر تحديث: 19 فبراير 2022
تشرح هذه المقالة كيفية تحميل ملف CSV وتحليله في Python.
بادئ ذي بدء ، ما هو ملف CSV؟ 
CSV (قيم مفصولة بفواصل) هو تنسيق ملف بسيط يستخدم لتخزين البيانات الجدولية ، مثل جدول بيانات أو قاعدة بيانات. يخزن ملف CSV البيانات المجدولة (الأرقام والنصوص) بنص عادي. كل سطر من الملف هو سجل بيانات. يتكون كل سجل من حقل واحد أو أكثر ، مفصولة بفاصلات. يعد استخدام الفاصلة كفاصل حقل مصدر اسم تنسيق الملف هذا. لتشغيل ملفات CSV في لغة python ، توجد وحدة نمطية تحمل في ثناياه عوامل تسمى csv . 

 

قراءة ملف CSV

 


# importing csv module
import csv
 
# csv file name
filename = "aapl.csv"
 
# initializing the titles and rows list
fields = []
rows = []
 
# reading csv file
with open(filename, 'r') as csvfile:
    # creating a csv reader object
    csvreader = csv.reader(csvfile)
     
    # extracting field names through first row
    fields = next(csvreader)
 
    # extracting each data row one by one
    for row in csvreader:
        rows.append(row)
 
    # get total number of rows
    print("Total no. of rows: %d"%(csvreader.line_num))
 
# printing the field names
print('Field names are:' + ', '.join(field for field in fields))
 
#  printing first 5 rows
print('\nFirst 5 rows are:\n')
for row in rows[:5]:
    # parsing each column of a row
    for col in row:
        print("%10s"%col,end=" "),
    print('\n')
يبدو إخراج البرنامج أعلاه كما يلي:
 



يستخدم المثال أعلاه ملف CSV aapl.csv والذي يمكن تنزيله من هنا . 
قم بتشغيل هذا البرنامج باستخدام ملف aapl.csv في نفس الدليل.
دعونا نحاول فهم هذا الجزء من الكود. 
 

 
مع (filename، 'r') مفتوح مثل csvfile:
    csvreader = csv.reader (csvfile)
هنا ، نفتح ملف CSV أولاً في وضع القراءة. يسمى كائن الملف باسم csvfile . يتم تحويل كائن الملف إلى كائن csv.reader. نحفظ الكائن csv.reader كملف csvreader .
 
الحقول = csvreader.next ()
csvreader هو كائن قابل للتكرار. ومن ثم ، تقوم طريقة .next () بإرجاع الصف الحالي وتقدم المكرر إلى الصف التالي. نظرًا لأن الصف الأول من ملف csv يحتوي على الرؤوس (أو أسماء الحقول) ، فإننا نحفظها في قائمة تسمى الحقول .
 
للصف في csvreader:
        rows.append (صف)
الآن ، نكرر الصفوف المتبقية باستخدام حلقة for. يتم إلحاق كل صف بقائمة تسمى الصفوف . إذا حاولت طباعة كل صف ، فيمكن للمرء أن يجد أن الصف ليس سوى قائمة تحتوي على جميع قيم الحقل.
 
طباعة ("إجمالي عدد الصفوف:٪ d"٪ (csvreader.line_num))
csvreader.line_num ليس سوى عداد يقوم بإرجاع عدد الصفوف التي تم تكرارها.
 

الكتابة في ملف CSV

 


# importing the csv module
import csv
 
# field names
fields = ['Name', 'Branch', 'Year', 'CGPA']
 
# data rows of csv file
rows = [ ['Nikhil', 'COE', '2', '9.0'],
         ['Sanchit', 'COE', '2', '9.1'],
         ['Aditya', 'IT', '2', '9.3'],
         ['Sagar', 'SE', '1', '9.5'],
         ['Prateek', 'MCE', '3', '7.8'],
         ['Sahil', 'EP', '2', '9.1']]
 
# name of csv file
filename = "university_records.csv"
 
# writing to csv file
with open(filename, 'w') as csvfile:
    # creating a csv writer object
    csvwriter = csv.writer(csvfile)
     
    # writing the fields
    csvwriter.writerow(fields)
     
    # writing the data rows
    csvwriter.writerows(rows)
دعونا نحاول فهم الكود أعلاه على شكل أجزاء. 
 

تم تحديد الحقول والصفوف بالفعل. الحقول عبارة عن قائمة تحتوي على جميع أسماء الحقول. الصفوف هي قائمة من القوائم. كل صف عبارة عن قائمة تحتوي على قيم الحقول لهذا الصف.
 
بـ open (filename، 'w') كـ csvfile:
    csvwriter = csv.writer (csvfile)
هنا ، نفتح أولاً ملف CSV في وضع WRITE. يسمى كائن الملف باسم csvfile . يتم تحويل كائن الملف إلى كائن csv.writer. نحفظ كائن csv.writer كملف csvwriter .
 
csvwriter.writerow (الحقول)
نستخدم الآن التابع writeow لكتابة الصف الأول الذي لا يمثل سوى أسماء الحقول.
 
csvwriter.writerows (الصفوف)
نستخدم طريقة الكاتب لكتابة عدة صفوف في وقت واحد.
 

كتابة قاموس إلى ملف CSV

 


# importing the csv module
import csv
 
# my data rows as dictionary objects
mydict =[{'branch': 'COE', 'cgpa': '9.0', 'name': 'Nikhil', 'year': '2'},
         {'branch': 'COE', 'cgpa': '9.1', 'name': 'Sanchit', 'year': '2'},
         {'branch': 'IT', 'cgpa': '9.3', 'name': 'Aditya', 'year': '2'},
         {'branch': 'SE', 'cgpa': '9.5', 'name': 'Sagar', 'year': '1'},
         {'branch': 'MCE', 'cgpa': '7.8', 'name': 'Prateek', 'year': '3'},
         {'branch': 'EP', 'cgpa': '9.1', 'name': 'Sahil', 'year': '2'}]
 
# field names
fields = ['name', 'branch', 'year', 'cgpa']
 
# name of csv file
filename = "university_records.csv"
 
# writing to csv file
with open(filename, 'w') as csvfile:
    # creating a csv dict writer object
    writer = csv.DictWriter(csvfile, fieldnames = fields)
     
    # writing headers (field names)
    writer.writeheader()
     
    # writing data rows
    writer.writerows(mydict)
في هذا المثال ، نكتب قاموس mydict إلى ملف CSV. 
 

 
بـ open (filename، 'w') كـ csvfile:
    الكاتب = csv.DictWriter (csvfile ، أسماء الحقول = الحقول)
هنا ، يتم تحويل كائن الملف ( csvfile ) إلى كائن DictWriter. 
هنا ، نحدد أسماء الحقول كوسيطة.
 
الكاتب والكتابة ()
تقوم طريقة writeheader بكتابة الصف الأول من ملف csv الخاص بك باستخدام أسماء الحقول المحددة مسبقًا.
 
Writerows (mydict)
تكتب طريقة الكاتب ببساطة جميع الصفوف ولكن في كل صف ، تكتب القيم فقط (وليس المفاتيح).
لذلك ، في النهاية ، يبدو ملف CSV الخاص بنا على النحو التالي:
 



نقاط مهمة: 
 

في وحدات csv ، يمكن إعطاء معلمة اختيارية لهجة تُستخدم لتحديد مجموعة من المعلمات الخاصة بتنسيق CSV معين . بشكل افتراضي ، تستخدم وحدة csv لهجة excel مما يجعلها متوافقة مع جداول بيانات Excel. يمكنك تحديد لهجتك الخاصة باستخدام طريقة register_dialect . 
هنا مثال: 
 
 

 
الآن ، أثناء تحديد كائن csv.reader أو csv.writer ، يمكننا تحديد اللهجة كما 
يلي: 
 

 
 

الآن ، ضع في اعتبارك أن ملف CSV يبدو بهذا الشكل بنص عادي: 
 


نلاحظ أن المحدد ليس فاصلة بل فاصلة منقوطة. أيضًا ، يتم فصل الصفوف بواسطة سطرين جديدين بدلاً من سطر واحد. في مثل هذه الحالات ، يمكننا تحديد المحدد وفاصل السطر على النحو التالي: 
 
 
 
لذلك ، كانت هذه مناقشة مختصرة ولكنها موجزة حول كيفية تحميل ملفات CSV وتحليلها في برنامج Python. 
 



هذه المدونة من مساهمة نيخيل كومار . إذا كنت تحب GeeksforGeeks وترغب في المساهمة ، فيمكنك أيضًا كتابة مقال باستخدام write.geeksforgeeks.org أو إرسال مقالتك بالبريد إلى review-team@geeksforgeeks.org. شاهد مقالتك تظهر على صفحة GeeksforGeeks الرئيسية وساعد المهوسين الآخرين.
يرجى كتابة التعليقات إذا وجدت أي شيء غير صحيح ، أو إذا كنت ترغب في مشاركة المزيد من المعلومات حول الموضوع الذي تمت مناقشته أعلاه.
 
<<<<<<<<<<<<<<<<<<<<<
قراءة ملفات CSV في بايثون
مستوى الصعوبة: متوسط
آخر تحديث: 03 ديسمبر 2021
ملف CSV (قيم مفصولة بفواصل) هو شكل من أشكال مستند نص عادي يستخدم تنسيقًا معينًا لتنظيم المعلومات الجدولية. تنسيق ملف CSV هو مستند نصي مقيد يستخدم فاصلة لتمييز القيم. كل صف في المستند عبارة عن سجل بيانات. يتكون كل سجل من حقل واحد أو أكثر ، مقسومًا على فاصلات. إنه تنسيق الملفات الأكثر شيوعًا لاستيراد وتصدير جداول البيانات وقواعد البيانات.
 

قراءة ملف CSV
هناك طرق مختلفة لقراءة ملف CSV يستخدم إما وحدة CSV أو مكتبة الباندا. 

وحدة CSV: تعد وحدة CSV واحدة من الوحدات النمطية في Python التي توفر فصولاً لقراءة وكتابة المعلومات المجدولة بتنسيق ملف CSV.
مكتبة الباندا: تعد مكتبة الباندا واحدة من مكتبات Python مفتوحة المصدر التي توفر هياكل بيانات عالية الأداء ومريحة وأدوات وتقنيات لتحليل البيانات لبرمجة Python. 
 
قراءة تنسيق ملف CSV في Python:
ضع في اعتبارك ملف CSV أدناه المسمى "Giants.CSV":
 



 

USing csv.reader (): في البداية ، يتم فتح ملف CSV باستخدام طريقة open () في الوضع "r" (يحدد وضع القراءة أثناء فتح الملف) الذي يعيد كائن الملف ثم يُقرأ باستخدام القارئ () أسلوب وحدة CSV الذي يعرض كائن القارئ الذي يتكرر عبر الأسطر في مستند CSV المحدد.
ملاحظة: تُستخدم الكلمة الأساسية "with" جنبًا إلى جنب مع طريقة open () لأنها تبسط معالجة الاستثناءات وتغلق ملف CSV تلقائيًا.
import csv
 
# opening the CSV file
with open('Giants.csv', mode ='r')as file:
   
  # reading the CSV file
  csvFile = csv.reader(file)
 
  # displaying the contents of the CSV file
  for lines in csvFile:
        print(lines)
انتاج:

['Organization'، 'CEO'، 'Founded']
['Alphabet'، 'Sundar Pichai'، '02 -Oct-15 ']
['Microsoft'، 'Satya Nadella'، '04 -Apr-75 ']
["Amazon"، "Jeff Bezos"، "05-Jul-94 "]
في برنامج القارئ أعلاه ، تُستخدم الطريقة () لقراءة ملف Giants.csv الذي يرسم البيانات في قوائم.

باستخدام فئة csv.DictReader (): وهي مشابهة للطريقة السابقة ، يتم فتح ملف CSV أولاً باستخدام طريقة open () ، ثم تتم قراءته باستخدام فئة DictReader من وحدة csv التي تعمل مثل القارئ العادي ولكنها ترسم المعلومات في ملف CSV إلى قاموس. يتكون السطر الأول من الملف من مفاتيح القاموس. 

import csv
 
# opening the CSV file
with open('Giants.csv', mode ='r') as file:   
        
       # reading the CSV file
       csvFile = csv.DictReader(file)
 
       # displaying the contents of the CSV file
       for lines in csvFile:
            print(lines)
انتاج:

OrderedDict ([('Organization'، 'Alphabet')، ('CEO'، 'Sundar Pichai')، ('Founded'، '02 -Oct-15 ′)]) 
OrderedDict ([('Organization'، 'Microsoft') )، ('CEO'، 'Satya Nadella')، ('Founded'، '04 -Apr-75 ′)]) 
OrderedDict ([('Organization'، 'Amazon')، ('CEO'، 'Jeff Bezos' )، ('تأسست'، '05 يوليو -94 ′)])

استخدام طريقة pandas.read_csv (): من السهل جدًا وبسيط قراءة ملف CSV باستخدام وظائف مكتبة الباندا. هنا يتم استخدام طريقة read_csv () الخاصة بمكتبة الباندا لقراءة البيانات من ملفات CSV.

import pandas
 
# reading the CSV file
csvFile = pandas.read_csv('Giants.csv')
 
# displaying the contents of the CSV file
print(csvFile)
انتاج:

تأسيس الرئيس التنفيذي للمنظمة
0 الأبجدية سوندار بيتشاي 02 أكتوبر 15
1 مايكروسوفت ساتيا ناديلا 04-أبريل -75
2 أمازون جيف بيزوس 05 يوليو 94
في البرنامج أعلاه ، تقوم طريقة csv_read () الخاصة بمكتبة الباندا بقراءة ملف Giants.csv وتعيين بياناته في قائمة ثنائية الأبعاد. 
ملاحظة: لمعرفة المزيد عن pandas.csv_read () انقر هنا .


<<<<<<<<<<<<<<<<<<<<
كتابة ملفات CSV في بايثون
تاريخ التحديث الأخير: 29 ديسمبر 2019
CSV (قيم مفصولة بفواصل) هو تنسيق ملف بسيط يستخدم لتخزين البيانات الجدولية ، مثل جدول بيانات أو قاعدة بيانات. يخزن ملف CSV البيانات الجدولية (الأرقام والنصوص) بنص عادي. كل سطر من الملف هو سجل بيانات. يتكون كل سجل من حقل واحد أو أكثر ، مفصولة بفاصلات. يعد استخدام الفاصلة كفاصل حقل مصدر اسم تنسيق الملف هذا.

توفر Python وحدة نمطية مضمنة تسمى csvللعمل مع ملفات CSV. هناك العديد من الفصول التي توفرها هذه الوحدة للكتابة إلى CSV:

استخدام فئة csv.writer
استخدام فئة csv.DictWriter
استخدام فئة csv.writer
csv.writerيتم استخدام فئة لإدخال البيانات إلى ملف CSV. تقوم هذه الفئة بإرجاع كائن كاتب مسؤول عن تحويل بيانات المستخدم إلى سلسلة محددة. يجب فتح كائن csvfile newline=''وإلا فلن يتم تفسير أحرف السطر الجديد داخل الحقول بين علامات الاقتباس بشكل صحيح.

بناء الجملة: csv.writer (csvfile ، اللهجة = 'excel' ، ** fmtparams)

المعلمات:
csvfile: كائن ملف مع طريقة write ().
اللهجة (اختياري): اسم اللهجة المستخدمة.
fmtparams (اختياري): معلمات التنسيق التي ستحل محل تلك المحددة في اللهجة.

csv.writerيوفر class طريقتين للكتابة إلى CSV. هم writerow()و writerows().

الكاتب (): تكتب هذه الطريقة صفًا واحدًا في كل مرة. يمكن كتابة صف الحقل باستخدام هذه الطريقة.
بناء الجملة:

كاتب (حقول)
كاتب (): تستخدم هذه الطريقة لكتابة عدة صفوف في وقت واحد. يمكن استخدام هذا لكتابة قائمة الصفوف.
بناء الجملة:

كتابة ملفات CSV في بايثون
كتّاب (صفوف)
مثال:

# Python program to demonstrate
# writing to CSV
  
  
import csv 
    
# field names 
fields = ['Name', 'Branch', 'Year', 'CGPA'] 
    
# data rows of csv file 
rows = [ ['Nikhil', 'COE', '2', '9.0'], 
         ['Sanchit', 'COE', '2', '9.1'], 
         ['Aditya', 'IT', '2', '9.3'], 
         ['Sagar', 'SE', '1', '9.5'], 
         ['Prateek', 'MCE', '3', '7.8'], 
         ['Sahil', 'EP', '2', '9.1']] 
    
# name of csv file 
filename = "university_records.csv"
    
# writing to csv file 
with open(filename, 'w') as csvfile: 
    # creating a csv writer object 
    csvwriter = csv.writer(csvfile) 
        
    # writing the fields 
    csvwriter.writerow(fields) 
        
    # writing the data rows 
    csvwriter.writerows(rows)
انتاج:

python-write-to-csv

استخدام فئة csv.DictWriter
تقوم هذه الفئة بإرجاع كائن كاتب يقوم بتعيين القواميس على صفوف الإخراج.

بناء الجملة: csv.DictWriter (csvfile، fieldnames، restval = "، extrasaction = 'lift'، dialect = 'excel'، * args، ** kwds)

المعلمات:
csvfile: كائن ملف مع طريقة write ().
أسماء الحقول: سلسلة مفاتيح تحدد الترتيب الذي يجب تمرير القيم به في القاموس.
restval (اختياري): يحدد القيمة المراد كتابتها إذا كان القاموس يفتقد مفتاحًا في أسماء الحقول.
extrasaction (اختياري): إذا لم يتم العثور على مفتاح في أسماء الحقول ، فإن معلمة extrasaction الاختيارية تشير إلى الإجراء الذي يجب اتخاذه. إذا تم ضبطه على رفع ValueError ، فسيتم رفع قيمة ValueError.
اللهجة (اختياري): اسم اللهجة المستخدمة.

يوفر csv.DictWriter طريقتين للكتابة إلى CSV. هم انهم:

writeheader (): writeheader() الطريقة تكتب ببساطة الصف الأول من ملف csv الخاص بك باستخدام أسماء الحقول المحددة مسبقًا.
بناء الجملة:

عنوان الكتابة ()
writerows(): writerows تقوم الطريقة ببساطة بكتابة جميع الصفوف ولكن في كل صف ، تكتب القيم فقط (وليس المفاتيح).
بناء الجملة:

الكاتب (mydict)
مثال:

# importing the csv module 
import csv 
    
# my data rows as dictionary objects 
mydict =[{'branch': 'COE', 'cgpa': '9.0', 'name': 'Nikhil', 'year': '2'}, 
         {'branch': 'COE', 'cgpa': '9.1', 'name': 'Sanchit', 'year': '2'}, 
         {'branch': 'IT', 'cgpa': '9.3', 'name': 'Aditya', 'year': '2'}, 
         {'branch': 'SE', 'cgpa': '9.5', 'name': 'Sagar', 'year': '1'}, 
         {'branch': 'MCE', 'cgpa': '7.8', 'name': 'Prateek', 'year': '3'}, 
         {'branch': 'EP', 'cgpa': '9.1', 'name': 'Sahil', 'year': '2'}] 
    
# field names 
fields = ['name', 'branch', 'year', 'cgpa'] 
    
# name of csv file 
filename = "university_records.csv"
    
# writing to csv file 
with open(filename, 'w') as csvfile: 
    # creating a csv dict writer object 
    writer = csv.DictWriter(csvfile, fieldnames = fields) 
        
    # writing headers (field names) 
    writer.writeheader() 
        
    # writing data rows 
    writer.writerows(mydict) 

